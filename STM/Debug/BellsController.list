
BellsController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008624  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec4  080087f8  080087f8  000097f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096bc  080096bc  0000b1e4  2**0
                  CONTENTS
  4 .ARM          00000008  080096bc  080096bc  0000a6bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096c4  080096c4  0000b1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096c4  080096c4  0000a6c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080096c8  080096c8  0000a6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  080096cc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005574  200001e4  080098b0  0000b1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005758  080098b0  0000b758  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1f6  00000000  00000000  0000b214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bb3  00000000  00000000  0001640a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  00017fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c8  00000000  00000000  00018ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002253d  00000000  00000000  00019388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c4a5  00000000  00000000  0003b8c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd06e  00000000  00000000  00047d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  00114dd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004398  00000000  00000000  00114e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  001191f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080087dc 	.word	0x080087dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	080087dc 	.word	0x080087dc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c5c:	f000 b9a0 	b.w	8000fa0 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f83c 	bl	8000ce4 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2lz>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4604      	mov	r4, r0
 8000c80:	460d      	mov	r5, r1
 8000c82:	f7ff ff5b 	bl	8000b3c <__aeabi_dcmplt>
 8000c86:	b928      	cbnz	r0, 8000c94 <__aeabi_d2lz+0x1c>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c90:	f000 b80a 	b.w	8000ca8 <__aeabi_d2ulz>
 8000c94:	4620      	mov	r0, r4
 8000c96:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c9a:	f000 f805 	bl	8000ca8 <__aeabi_d2ulz>
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca4:	bd38      	pop	{r3, r4, r5, pc}
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2ulz>:
 8000ca8:	b5d0      	push	{r4, r6, r7, lr}
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <__aeabi_d2ulz+0x34>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	4606      	mov	r6, r0
 8000cb0:	460f      	mov	r7, r1
 8000cb2:	f7ff fcd1 	bl	8000658 <__aeabi_dmul>
 8000cb6:	f7ff ffa7 	bl	8000c08 <__aeabi_d2uiz>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	f7ff fc52 	bl	8000564 <__aeabi_ui2d>
 8000cc0:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <__aeabi_d2ulz+0x38>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f7ff fcc8 	bl	8000658 <__aeabi_dmul>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4630      	mov	r0, r6
 8000cce:	4639      	mov	r1, r7
 8000cd0:	f7ff fb0a 	bl	80002e8 <__aeabi_dsub>
 8000cd4:	f7ff ff98 	bl	8000c08 <__aeabi_d2uiz>
 8000cd8:	4621      	mov	r1, r4
 8000cda:	bdd0      	pop	{r4, r6, r7, pc}
 8000cdc:	3df00000 	.word	0x3df00000
 8000ce0:	41f00000 	.word	0x41f00000

08000ce4 <__udivmoddi4>:
 8000ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce8:	9d08      	ldr	r5, [sp, #32]
 8000cea:	460c      	mov	r4, r1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d14e      	bne.n	8000d8e <__udivmoddi4+0xaa>
 8000cf0:	4694      	mov	ip, r2
 8000cf2:	458c      	cmp	ip, r1
 8000cf4:	4686      	mov	lr, r0
 8000cf6:	fab2 f282 	clz	r2, r2
 8000cfa:	d962      	bls.n	8000dc2 <__udivmoddi4+0xde>
 8000cfc:	b14a      	cbz	r2, 8000d12 <__udivmoddi4+0x2e>
 8000cfe:	f1c2 0320 	rsb	r3, r2, #32
 8000d02:	4091      	lsls	r1, r2
 8000d04:	fa20 f303 	lsr.w	r3, r0, r3
 8000d08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0c:	4319      	orrs	r1, r3
 8000d0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f f68c 	uxth.w	r6, ip
 8000d1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb07 1114 	mls	r1, r7, r4, r1
 8000d26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2a:	fb04 f106 	mul.w	r1, r4, r6
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x64>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d3a:	f080 8112 	bcs.w	8000f62 <__udivmoddi4+0x27e>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 810f 	bls.w	8000f62 <__udivmoddi4+0x27e>
 8000d44:	3c02      	subs	r4, #2
 8000d46:	4463      	add	r3, ip
 8000d48:	1a59      	subs	r1, r3, r1
 8000d4a:	fa1f f38e 	uxth.w	r3, lr
 8000d4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d52:	fb07 1110 	mls	r1, r7, r0, r1
 8000d56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5a:	fb00 f606 	mul.w	r6, r0, r6
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x94>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d6a:	f080 80fc 	bcs.w	8000f66 <__udivmoddi4+0x282>
 8000d6e:	429e      	cmp	r6, r3
 8000d70:	f240 80f9 	bls.w	8000f66 <__udivmoddi4+0x282>
 8000d74:	4463      	add	r3, ip
 8000d76:	3802      	subs	r0, #2
 8000d78:	1b9b      	subs	r3, r3, r6
 8000d7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d7e:	2100      	movs	r1, #0
 8000d80:	b11d      	cbz	r5, 8000d8a <__udivmoddi4+0xa6>
 8000d82:	40d3      	lsrs	r3, r2
 8000d84:	2200      	movs	r2, #0
 8000d86:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d905      	bls.n	8000d9e <__udivmoddi4+0xba>
 8000d92:	b10d      	cbz	r5, 8000d98 <__udivmoddi4+0xb4>
 8000d94:	e9c5 0100 	strd	r0, r1, [r5]
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e7f5      	b.n	8000d8a <__udivmoddi4+0xa6>
 8000d9e:	fab3 f183 	clz	r1, r3
 8000da2:	2900      	cmp	r1, #0
 8000da4:	d146      	bne.n	8000e34 <__udivmoddi4+0x150>
 8000da6:	42a3      	cmp	r3, r4
 8000da8:	d302      	bcc.n	8000db0 <__udivmoddi4+0xcc>
 8000daa:	4290      	cmp	r0, r2
 8000dac:	f0c0 80f0 	bcc.w	8000f90 <__udivmoddi4+0x2ac>
 8000db0:	1a86      	subs	r6, r0, r2
 8000db2:	eb64 0303 	sbc.w	r3, r4, r3
 8000db6:	2001      	movs	r0, #1
 8000db8:	2d00      	cmp	r5, #0
 8000dba:	d0e6      	beq.n	8000d8a <__udivmoddi4+0xa6>
 8000dbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc0:	e7e3      	b.n	8000d8a <__udivmoddi4+0xa6>
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	f040 8090 	bne.w	8000ee8 <__udivmoddi4+0x204>
 8000dc8:	eba1 040c 	sub.w	r4, r1, ip
 8000dcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd0:	fa1f f78c 	uxth.w	r7, ip
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dde:	fb08 4416 	mls	r4, r8, r6, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb07 f006 	mul.w	r0, r7, r6
 8000dea:	4298      	cmp	r0, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x11c>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x11a>
 8000df8:	4298      	cmp	r0, r3
 8000dfa:	f200 80cd 	bhi.w	8000f98 <__udivmoddi4+0x2b4>
 8000dfe:	4626      	mov	r6, r4
 8000e00:	1a1c      	subs	r4, r3, r0
 8000e02:	fa1f f38e 	uxth.w	r3, lr
 8000e06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e12:	fb00 f707 	mul.w	r7, r0, r7
 8000e16:	429f      	cmp	r7, r3
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x148>
 8000e1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x146>
 8000e24:	429f      	cmp	r7, r3
 8000e26:	f200 80b0 	bhi.w	8000f8a <__udivmoddi4+0x2a6>
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	1bdb      	subs	r3, r3, r7
 8000e2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e32:	e7a5      	b.n	8000d80 <__udivmoddi4+0x9c>
 8000e34:	f1c1 0620 	rsb	r6, r1, #32
 8000e38:	408b      	lsls	r3, r1
 8000e3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e3e:	431f      	orrs	r7, r3
 8000e40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e44:	fa04 f301 	lsl.w	r3, r4, r1
 8000e48:	ea43 030c 	orr.w	r3, r3, ip
 8000e4c:	40f4      	lsrs	r4, r6
 8000e4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e52:	0c38      	lsrs	r0, r7, #16
 8000e54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e58:	fbb4 fef0 	udiv	lr, r4, r0
 8000e5c:	fa1f fc87 	uxth.w	ip, r7
 8000e60:	fb00 441e 	mls	r4, r0, lr, r4
 8000e64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e68:	fb0e f90c 	mul.w	r9, lr, ip
 8000e6c:	45a1      	cmp	r9, r4
 8000e6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e72:	d90a      	bls.n	8000e8a <__udivmoddi4+0x1a6>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e7a:	f080 8084 	bcs.w	8000f86 <__udivmoddi4+0x2a2>
 8000e7e:	45a1      	cmp	r9, r4
 8000e80:	f240 8081 	bls.w	8000f86 <__udivmoddi4+0x2a2>
 8000e84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	eba4 0409 	sub.w	r4, r4, r9
 8000e8e:	fa1f f983 	uxth.w	r9, r3
 8000e92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e96:	fb00 4413 	mls	r4, r0, r3, r4
 8000e9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d907      	bls.n	8000eb6 <__udivmoddi4+0x1d2>
 8000ea6:	193c      	adds	r4, r7, r4
 8000ea8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eac:	d267      	bcs.n	8000f7e <__udivmoddi4+0x29a>
 8000eae:	45a4      	cmp	ip, r4
 8000eb0:	d965      	bls.n	8000f7e <__udivmoddi4+0x29a>
 8000eb2:	3b02      	subs	r3, #2
 8000eb4:	443c      	add	r4, r7
 8000eb6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eba:	fba0 9302 	umull	r9, r3, r0, r2
 8000ebe:	eba4 040c 	sub.w	r4, r4, ip
 8000ec2:	429c      	cmp	r4, r3
 8000ec4:	46ce      	mov	lr, r9
 8000ec6:	469c      	mov	ip, r3
 8000ec8:	d351      	bcc.n	8000f6e <__udivmoddi4+0x28a>
 8000eca:	d04e      	beq.n	8000f6a <__udivmoddi4+0x286>
 8000ecc:	b155      	cbz	r5, 8000ee4 <__udivmoddi4+0x200>
 8000ece:	ebb8 030e 	subs.w	r3, r8, lr
 8000ed2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ed6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eda:	40cb      	lsrs	r3, r1
 8000edc:	431e      	orrs	r6, r3
 8000ede:	40cc      	lsrs	r4, r1
 8000ee0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	e750      	b.n	8000d8a <__udivmoddi4+0xa6>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ef8:	4094      	lsls	r4, r2
 8000efa:	430c      	orrs	r4, r1
 8000efc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f04:	fa1f f78c 	uxth.w	r7, ip
 8000f08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f10:	0c23      	lsrs	r3, r4, #16
 8000f12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f16:	fb00 f107 	mul.w	r1, r0, r7
 8000f1a:	4299      	cmp	r1, r3
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x24c>
 8000f1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f22:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f26:	d22c      	bcs.n	8000f82 <__udivmoddi4+0x29e>
 8000f28:	4299      	cmp	r1, r3
 8000f2a:	d92a      	bls.n	8000f82 <__udivmoddi4+0x29e>
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	1a5b      	subs	r3, r3, r1
 8000f32:	b2a4      	uxth	r4, r4
 8000f34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f38:	fb08 3311 	mls	r3, r8, r1, r3
 8000f3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f40:	fb01 f307 	mul.w	r3, r1, r7
 8000f44:	42a3      	cmp	r3, r4
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x276>
 8000f48:	eb1c 0404 	adds.w	r4, ip, r4
 8000f4c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f50:	d213      	bcs.n	8000f7a <__udivmoddi4+0x296>
 8000f52:	42a3      	cmp	r3, r4
 8000f54:	d911      	bls.n	8000f7a <__udivmoddi4+0x296>
 8000f56:	3902      	subs	r1, #2
 8000f58:	4464      	add	r4, ip
 8000f5a:	1ae4      	subs	r4, r4, r3
 8000f5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f60:	e739      	b.n	8000dd6 <__udivmoddi4+0xf2>
 8000f62:	4604      	mov	r4, r0
 8000f64:	e6f0      	b.n	8000d48 <__udivmoddi4+0x64>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e706      	b.n	8000d78 <__udivmoddi4+0x94>
 8000f6a:	45c8      	cmp	r8, r9
 8000f6c:	d2ae      	bcs.n	8000ecc <__udivmoddi4+0x1e8>
 8000f6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f76:	3801      	subs	r0, #1
 8000f78:	e7a8      	b.n	8000ecc <__udivmoddi4+0x1e8>
 8000f7a:	4631      	mov	r1, r6
 8000f7c:	e7ed      	b.n	8000f5a <__udivmoddi4+0x276>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	e799      	b.n	8000eb6 <__udivmoddi4+0x1d2>
 8000f82:	4630      	mov	r0, r6
 8000f84:	e7d4      	b.n	8000f30 <__udivmoddi4+0x24c>
 8000f86:	46d6      	mov	lr, sl
 8000f88:	e77f      	b.n	8000e8a <__udivmoddi4+0x1a6>
 8000f8a:	4463      	add	r3, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e74d      	b.n	8000e2c <__udivmoddi4+0x148>
 8000f90:	4606      	mov	r6, r0
 8000f92:	4623      	mov	r3, r4
 8000f94:	4608      	mov	r0, r1
 8000f96:	e70f      	b.n	8000db8 <__udivmoddi4+0xd4>
 8000f98:	3e02      	subs	r6, #2
 8000f9a:	4463      	add	r3, ip
 8000f9c:	e730      	b.n	8000e00 <__udivmoddi4+0x11c>
 8000f9e:	bf00      	nop

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <cJSON_GetErrorPtr>:
    size_t position;
} error;
static error global_error = { NULL, 0 };

CJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
    return (const char*) (global_error.json + global_error.position);
 8000fa8:	4b04      	ldr	r3, [pc, #16]	@ (8000fbc <cJSON_GetErrorPtr+0x18>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b03      	ldr	r3, [pc, #12]	@ (8000fbc <cJSON_GetErrorPtr+0x18>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	4413      	add	r3, r2
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	20000200 	.word	0x20000200

08000fc0 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d002      	beq.n	8000fd6 <case_insensitive_strcmp+0x16>
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e056      	b.n	8001088 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d10d      	bne.n	8000ffe <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e050      	b.n	8001088 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <case_insensitive_strcmp+0x32>
        {
            return 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e04a      	b.n	8001088 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	73fb      	strb	r3, [r7, #15]
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	3301      	adds	r3, #1
 8001008:	4a22      	ldr	r2, [pc, #136]	@ (8001094 <case_insensitive_strcmp+0xd4>)
 800100a:	4413      	add	r3, r2
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b01      	cmp	r3, #1
 8001014:	d103      	bne.n	800101e <case_insensitive_strcmp+0x5e>
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	f103 0220 	add.w	r2, r3, #32
 800101c:	e000      	b.n	8001020 <case_insensitive_strcmp+0x60>
 800101e:	7bfa      	ldrb	r2, [r7, #15]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	73bb      	strb	r3, [r7, #14]
 8001026:	7bbb      	ldrb	r3, [r7, #14]
 8001028:	3301      	adds	r3, #1
 800102a:	491a      	ldr	r1, [pc, #104]	@ (8001094 <case_insensitive_strcmp+0xd4>)
 800102c:	440b      	add	r3, r1
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b01      	cmp	r3, #1
 8001036:	d102      	bne.n	800103e <case_insensitive_strcmp+0x7e>
 8001038:	7bbb      	ldrb	r3, [r7, #14]
 800103a:	3320      	adds	r3, #32
 800103c:	e000      	b.n	8001040 <case_insensitive_strcmp+0x80>
 800103e:	7bbb      	ldrb	r3, [r7, #14]
 8001040:	429a      	cmp	r2, r3
 8001042:	d0d0      	beq.n	8000fe6 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	737b      	strb	r3, [r7, #13]
 800104a:	7b7b      	ldrb	r3, [r7, #13]
 800104c:	3301      	adds	r3, #1
 800104e:	4a11      	ldr	r2, [pc, #68]	@ (8001094 <case_insensitive_strcmp+0xd4>)
 8001050:	4413      	add	r3, r2
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b01      	cmp	r3, #1
 800105a:	d103      	bne.n	8001064 <case_insensitive_strcmp+0xa4>
 800105c:	7b7b      	ldrb	r3, [r7, #13]
 800105e:	f103 0220 	add.w	r2, r3, #32
 8001062:	e000      	b.n	8001066 <case_insensitive_strcmp+0xa6>
 8001064:	7b7a      	ldrb	r2, [r7, #13]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	733b      	strb	r3, [r7, #12]
 800106c:	7b3b      	ldrb	r3, [r7, #12]
 800106e:	3301      	adds	r3, #1
 8001070:	4908      	ldr	r1, [pc, #32]	@ (8001094 <case_insensitive_strcmp+0xd4>)
 8001072:	440b      	add	r3, r1
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	2b01      	cmp	r3, #1
 800107c:	d102      	bne.n	8001084 <case_insensitive_strcmp+0xc4>
 800107e:	7b3b      	ldrb	r3, [r7, #12]
 8001080:	3320      	adds	r3, #32
 8001082:	e000      	b.n	8001086 <case_insensitive_strcmp+0xc6>
 8001084:	7b3b      	ldrb	r3, [r7, #12]
 8001086:	1ad3      	subs	r3, r2, r3
}
 8001088:	4618      	mov	r0, r3
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	08009350 	.word	0x08009350

08001098 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2028      	movs	r0, #40	@ 0x28
 80010a6:	4798      	blx	r3
 80010a8:	60f8      	str	r0, [r7, #12]
    if (node)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d004      	beq.n	80010ba <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 80010b0:	2228      	movs	r2, #40	@ 0x28
 80010b2:	2100      	movs	r1, #0
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	f005 f810 	bl	80060da <memset>
    }

    return node;
 80010ba:	68fb      	ldr	r3, [r7, #12]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 80010d0:	e03d      	b.n	800114e <cJSON_Delete+0x8a>
    {
        next = item->next;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d108      	bne.n	80010f6 <cJSON_Delete+0x32>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d004      	beq.n	80010f6 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ffe7 	bl	80010c4 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10c      	bne.n	800111c <cJSON_Delete+0x58>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d008      	beq.n	800111c <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 800110a:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <cJSON_Delete+0x9c>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	6912      	ldr	r2, [r2, #16]
 8001112:	4610      	mov	r0, r2
 8001114:	4798      	blx	r3
            item->valuestring = NULL;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001124:	2b00      	cmp	r3, #0
 8001126:	d10c      	bne.n	8001142 <cJSON_Delete+0x7e>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d008      	beq.n	8001142 <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 8001130:	4b0b      	ldr	r3, [pc, #44]	@ (8001160 <cJSON_Delete+0x9c>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	6a12      	ldr	r2, [r2, #32]
 8001138:	4610      	mov	r0, r2
 800113a:	4798      	blx	r3
            item->string = NULL;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 8001142:	4b07      	ldr	r3, [pc, #28]	@ (8001160 <cJSON_Delete+0x9c>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	4798      	blx	r3
        item = next;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1be      	bne.n	80010d2 <cJSON_Delete+0xe>
    }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000000 	.word	0x20000000

08001164 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001168:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 800116a:	4618      	mov	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	0000      	movs	r0, r0
	...

08001178 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b098      	sub	sp, #96	@ 0x60
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
    double number = 0;
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	f04f 0300 	mov.w	r3, #0
 800118a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 800118e:	2300      	movs	r3, #0
 8001190:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8001192:	f7ff ffe7 	bl	8001164 <get_decimal_point>
 8001196:	4603      	mov	r3, r0
 8001198:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <parse_number+0x36>
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <parse_number+0x3a>
    {
        return false;
 80011ae:	2300      	movs	r3, #0
 80011b0:	e0a0      	b.n	80012f4 <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80011b6:	e03d      	b.n	8001234 <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	6899      	ldr	r1, [r3, #8]
 80011c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011c2:	440b      	add	r3, r1
 80011c4:	4413      	add	r3, r2
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b45      	cmp	r3, #69	@ 0x45
 80011ca:	dc17      	bgt.n	80011fc <parse_number+0x84>
 80011cc:	2b2b      	cmp	r3, #43	@ 0x2b
 80011ce:	db40      	blt.n	8001252 <parse_number+0xda>
 80011d0:	3b2b      	subs	r3, #43	@ 0x2b
 80011d2:	2201      	movs	r2, #1
 80011d4:	409a      	lsls	r2, r3
 80011d6:	4b4c      	ldr	r3, [pc, #304]	@ (8001308 <parse_number+0x190>)
 80011d8:	4013      	ands	r3, r2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	bf14      	ite	ne
 80011de:	2301      	movne	r3, #1
 80011e0:	2300      	moveq	r3, #0
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d10b      	bne.n	8001200 <parse_number+0x88>
 80011e8:	f002 0308 	and.w	r3, r2, #8
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	bf14      	ite	ne
 80011f0:	2301      	movne	r3, #1
 80011f2:	2300      	moveq	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d111      	bne.n	800121e <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 80011fa:	e02a      	b.n	8001252 <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 80011fc:	2b65      	cmp	r3, #101	@ 0x65
 80011fe:	d128      	bne.n	8001252 <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	6899      	ldr	r1, [r3, #8]
 8001208:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800120a:	440b      	add	r3, r1
 800120c:	4413      	add	r3, r2
 800120e:	7819      	ldrb	r1, [r3, #0]
 8001210:	f107 0208 	add.w	r2, r7, #8
 8001214:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001216:	4413      	add	r3, r2
 8001218:	460a      	mov	r2, r1
 800121a:	701a      	strb	r2, [r3, #0]
                break;
 800121c:	e007      	b.n	800122e <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 800121e:	f107 0208 	add.w	r2, r7, #8
 8001222:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001224:	4413      	add	r3, r2
 8001226:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800122a:	701a      	strb	r2, [r3, #0]
                break;
 800122c:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800122e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001230:	3301      	adds	r3, #1
 8001232:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001234:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001236:	2b3e      	cmp	r3, #62	@ 0x3e
 8001238:	d80d      	bhi.n	8001256 <parse_number+0xde>
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00a      	beq.n	8001256 <parse_number+0xde>
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001246:	441a      	add	r2, r3
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	429a      	cmp	r2, r3
 800124e:	d3b3      	bcc.n	80011b8 <parse_number+0x40>
        }
    }
loop_end:
 8001250:	e001      	b.n	8001256 <parse_number+0xde>
                goto loop_end;
 8001252:	bf00      	nop
 8001254:	e000      	b.n	8001258 <parse_number+0xe0>
loop_end:
 8001256:	bf00      	nop
    number_c_string[i] = '\0';
 8001258:	f107 0208 	add.w	r2, r7, #8
 800125c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800125e:	4413      	add	r3, r2
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8001264:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f004 fe5e 	bl	8005f30 <strtod>
 8001274:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 8001278:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	429a      	cmp	r2, r3
 8001280:	d101      	bne.n	8001286 <parse_number+0x10e>
    {
        return false; /* parse_error */
 8001282:	2300      	movs	r3, #0
 8001284:	e036      	b.n	80012f4 <parse_number+0x17c>
    }

    item->valuedouble = number;
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800128c:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001290:	a31b      	add	r3, pc, #108	@ (adr r3, 8001300 <parse_number+0x188>)
 8001292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001296:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800129a:	f7ff fc63 	bl	8000b64 <__aeabi_dcmpge>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d004      	beq.n	80012ae <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80012aa:	615a      	str	r2, [r3, #20]
 80012ac:	e015      	b.n	80012da <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	4b16      	ldr	r3, [pc, #88]	@ (800130c <parse_number+0x194>)
 80012b4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80012b8:	f7ff fc4a 	bl	8000b50 <__aeabi_dcmple>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d004      	beq.n	80012cc <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80012c8:	615a      	str	r2, [r3, #20]
 80012ca:	e006      	b.n	80012da <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 80012cc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80012d0:	f7ff fc72 	bl	8000bb8 <__aeabi_d2iz>
 80012d4:	4602      	mov	r2, r0
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2208      	movs	r2, #8
 80012de:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80012e6:	f107 0208 	add.w	r2, r7, #8
 80012ea:	1a8a      	subs	r2, r1, r2
 80012ec:	441a      	add	r2, r3
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	609a      	str	r2, [r3, #8]
    return true;
 80012f2:	2301      	movs	r3, #1
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3760      	adds	r7, #96	@ 0x60
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	f3af 8000 	nop.w
 8001300:	ffc00000 	.word	0xffc00000
 8001304:	41dfffff 	.word	0x41dfffff
 8001308:	04007fe5 	.word	0x04007fe5
 800130c:	c1e00000 	.word	0xc1e00000

08001310 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <ensure+0x20>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <ensure+0x24>
    {
        return NULL;
 8001330:	2300      	movs	r3, #0
 8001332:	e083      	b.n	800143c <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d007      	beq.n	800134c <ensure+0x3c>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	429a      	cmp	r2, r3
 8001346:	d301      	bcc.n	800134c <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8001348:	2300      	movs	r3, #0
 800134a:	e077      	b.n	800143c <ensure+0x12c>
    }

    if (needed > INT_MAX)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	da01      	bge.n	8001356 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8001352:	2300      	movs	r3, #0
 8001354:	e072      	b.n	800143c <ensure+0x12c>
    }

    needed += p->offset + 1;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	4413      	add	r3, r2
 800135e:	3301      	adds	r3, #1
 8001360:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	429a      	cmp	r2, r3
 800136a:	d805      	bhi.n	8001378 <ensure+0x68>
    {
        return p->buffer + p->offset;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	4413      	add	r3, r2
 8001376:	e061      	b.n	800143c <ensure+0x12c>
    }

    if (p->noalloc) {
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <ensure+0x74>
        return NULL;
 8001380:	2300      	movs	r3, #0
 8001382:	e05b      	b.n	800143c <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800138a:	d308      	bcc.n	800139e <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	db03      	blt.n	800139a <ensure+0x8a>
        {
            newsize = INT_MAX;
 8001392:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	e004      	b.n	80013a4 <ensure+0x94>
        }
        else
        {
            return NULL;
 800139a:	2300      	movs	r3, #0
 800139c:	e04e      	b.n	800143c <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d018      	beq.n	80013de <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6812      	ldr	r2, [r2, #0]
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	4610      	mov	r0, r2
 80013b8:	4798      	blx	r3
 80013ba:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d132      	bne.n	8001428 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	6812      	ldr	r2, [r2, #0]
 80013ca:	4610      	mov	r0, r2
 80013cc:	4798      	blx	r3
            p->length = 0;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]

            return NULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	e02e      	b.n	800143c <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	68b8      	ldr	r0, [r7, #8]
 80013e4:	4798      	blx	r3
 80013e6:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10d      	bne.n	800140a <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6812      	ldr	r2, [r2, #0]
 80013f6:	4610      	mov	r0, r2
 80013f8:	4798      	blx	r3
            p->length = 0;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]

            return NULL;
 8001406:	2300      	movs	r3, #0
 8001408:	e018      	b.n	800143c <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6819      	ldr	r1, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	3301      	adds	r3, #1
 8001414:	461a      	mov	r2, r3
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f004 feeb 	bl	80061f2 <memcpy>
        p->hooks.deallocate(p->buffer);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	6812      	ldr	r2, [r2, #0]
 8001424:	4610      	mov	r0, r2
 8001426:	4798      	blx	r3
    }
    p->length = newsize;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	4413      	add	r3, r2
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d013      	beq.n	800147e <update_offset+0x3a>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00f      	beq.n	800147e <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	4413      	add	r3, r2
 8001468:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689c      	ldr	r4, [r3, #8]
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f7fe fece 	bl	8000210 <strlen>
 8001474:	4603      	mov	r3, r0
 8001476:	18e2      	adds	r2, r4, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	e000      	b.n	8001480 <update_offset+0x3c>
        return;
 800147e:	bf00      	nop
}
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	bd90      	pop	{r4, r7, pc}
	...

08001488 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8001488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800148c:	b087      	sub	sp, #28
 800148e:	af00      	add	r7, sp, #0
 8001490:	ed87 0b02 	vstr	d0, [r7, #8]
 8001494:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8001498:	68b8      	ldr	r0, [r7, #8]
 800149a:	68fe      	ldr	r6, [r7, #12]
 800149c:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	687e      	ldr	r6, [r7, #4]
 80014a4:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80014a8:	f7ff fb66 	bl	8000b78 <__aeabi_dcmpgt>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d004      	beq.n	80014bc <compare_double+0x34>
 80014b2:	68bc      	ldr	r4, [r7, #8]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80014ba:	e003      	b.n	80014c4 <compare_double+0x3c>
 80014bc:	683c      	ldr	r4, [r7, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80014c4:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 80014c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014d0:	f7fe ff0a 	bl	80002e8 <__aeabi_dsub>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4690      	mov	r8, r2
 80014da:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <compare_double+0x8c>)
 80014e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014e8:	f7ff f8b6 	bl	8000658 <__aeabi_dmul>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	2101      	movs	r1, #1
 80014f2:	460c      	mov	r4, r1
 80014f4:	4640      	mov	r0, r8
 80014f6:	4649      	mov	r1, r9
 80014f8:	f7ff fb2a 	bl	8000b50 <__aeabi_dcmple>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <compare_double+0x7e>
 8001502:	2300      	movs	r3, #0
 8001504:	461c      	mov	r4, r3
 8001506:	b2e3      	uxtb	r3, r4
}
 8001508:	4618      	mov	r0, r3
 800150a:	371c      	adds	r7, #28
 800150c:	46bd      	mov	sp, r7
 800150e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001512:	bf00      	nop
 8001514:	3cb00000 	.word	0x3cb00000

08001518 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8001518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151a:	b093      	sub	sp, #76	@ 0x4c
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001522:	2300      	movs	r3, #0
 8001524:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800152c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	f107 0318 	add.w	r3, r7, #24
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
 800154c:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 800154e:	f7ff fe09 	bl	8001164 <get_decimal_point>
 8001552:	4603      	mov	r3, r0
 8001554:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <print_number+0x56>
    {
        return false;
 800156a:	2300      	movs	r3, #0
 800156c:	e0b4      	b.n	80016d8 <print_number+0x1c0>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 800156e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001572:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001576:	f7ff fb09 	bl	8000b8c <__aeabi_dcmpun>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d121      	bne.n	80015c4 <print_number+0xac>
 8001580:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8001582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001584:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001588:	2301      	movs	r3, #1
 800158a:	461e      	mov	r6, r3
 800158c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001590:	4b53      	ldr	r3, [pc, #332]	@ (80016e0 <print_number+0x1c8>)
 8001592:	4620      	mov	r0, r4
 8001594:	4629      	mov	r1, r5
 8001596:	f7ff faf9 	bl	8000b8c <__aeabi_dcmpun>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d10b      	bne.n	80015b8 <print_number+0xa0>
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015a4:	4b4e      	ldr	r3, [pc, #312]	@ (80016e0 <print_number+0x1c8>)
 80015a6:	4620      	mov	r0, r4
 80015a8:	4629      	mov	r1, r5
 80015aa:	f7ff fad1 	bl	8000b50 <__aeabi_dcmple>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <print_number+0xa0>
 80015b4:	2300      	movs	r3, #0
 80015b6:	461e      	mov	r6, r3
 80015b8:	b2f3      	uxtb	r3, r6
 80015ba:	f083 0301 	eor.w	r3, r3, #1
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d007      	beq.n	80015d4 <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4946      	ldr	r1, [pc, #280]	@ (80016e4 <print_number+0x1cc>)
 80015ca:	4618      	mov	r0, r3
 80015cc:	f003 fd30 	bl	8005030 <siprintf>
 80015d0:	6478      	str	r0, [r7, #68]	@ 0x44
 80015d2:	e03f      	b.n	8001654 <print_number+0x13c>
    }
    else if(d == (double)item->valueint)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ffd3 	bl	8000584 <__aeabi_i2d>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80015e6:	f7ff fa9f 	bl	8000b28 <__aeabi_dcmpeq>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d009      	beq.n	8001604 <print_number+0xec>
    {
        length = sprintf((char*)number_buffer, "%d", item->valueint);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695a      	ldr	r2, [r3, #20]
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	493b      	ldr	r1, [pc, #236]	@ (80016e8 <print_number+0x1d0>)
 80015fa:	4618      	mov	r0, r3
 80015fc:	f003 fd18 	bl	8005030 <siprintf>
 8001600:	6478      	str	r0, [r7, #68]	@ 0x44
 8001602:	e027      	b.n	8001654 <print_number+0x13c>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8001604:	f107 0014 	add.w	r0, r7, #20
 8001608:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800160c:	4937      	ldr	r1, [pc, #220]	@ (80016ec <print_number+0x1d4>)
 800160e:	f003 fd0f 	bl	8005030 <siprintf>
 8001612:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8001614:	f107 0208 	add.w	r2, r7, #8
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4934      	ldr	r1, [pc, #208]	@ (80016f0 <print_number+0x1d8>)
 800161e:	4618      	mov	r0, r3
 8001620:	f003 fd26 	bl	8005070 <siscanf>
 8001624:	4603      	mov	r3, r0
 8001626:	2b01      	cmp	r3, #1
 8001628:	d10c      	bne.n	8001644 <print_number+0x12c>
 800162a:	ed97 7b02 	vldr	d7, [r7, #8]
 800162e:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8001632:	eeb0 0a47 	vmov.f32	s0, s14
 8001636:	eef0 0a67 	vmov.f32	s1, s15
 800163a:	f7ff ff25 	bl	8001488 <compare_double>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d107      	bne.n	8001654 <print_number+0x13c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8001644:	f107 0014 	add.w	r0, r7, #20
 8001648:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800164c:	4929      	ldr	r1, [pc, #164]	@ (80016f4 <print_number+0x1dc>)
 800164e:	f003 fcef 	bl	8005030 <siprintf>
 8001652:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8001654:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001656:	2b00      	cmp	r3, #0
 8001658:	db02      	blt.n	8001660 <print_number+0x148>
 800165a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800165c:	2b19      	cmp	r3, #25
 800165e:	dd01      	ble.n	8001664 <print_number+0x14c>
    {
        return false;
 8001660:	2300      	movs	r3, #0
 8001662:	e039      	b.n	80016d8 <print_number+0x1c0>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8001664:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001666:	3301      	adds	r3, #1
 8001668:	4619      	mov	r1, r3
 800166a:	6838      	ldr	r0, [r7, #0]
 800166c:	f7ff fe50 	bl	8001310 <ensure>
 8001670:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 8001672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <print_number+0x164>
    {
        return false;
 8001678:	2300      	movs	r3, #0
 800167a:	e02d      	b.n	80016d8 <print_number+0x1c0>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 800167c:	2300      	movs	r3, #0
 800167e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001680:	e01a      	b.n	80016b8 <print_number+0x1a0>
    {
        if (number_buffer[i] == decimal_point)
 8001682:	f107 0214 	add.w	r2, r7, #20
 8001686:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001688:	4413      	add	r3, r2
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001690:	429a      	cmp	r2, r3
 8001692:	d105      	bne.n	80016a0 <print_number+0x188>
        {
            output_pointer[i] = '.';
 8001694:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001696:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001698:	4413      	add	r3, r2
 800169a:	222e      	movs	r2, #46	@ 0x2e
 800169c:	701a      	strb	r2, [r3, #0]
            continue;
 800169e:	e008      	b.n	80016b2 <print_number+0x19a>
        }

        output_pointer[i] = number_buffer[i];
 80016a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016a4:	4413      	add	r3, r2
 80016a6:	f107 0114 	add.w	r1, r7, #20
 80016aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80016ac:	440a      	add	r2, r1
 80016ae:	7812      	ldrb	r2, [r2, #0]
 80016b0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 80016b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016b4:	3301      	adds	r3, #1
 80016b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80016b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80016bc:	429a      	cmp	r2, r3
 80016be:	d3e0      	bcc.n	8001682 <print_number+0x16a>
    }
    output_pointer[i] = '\0';
 80016c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016c4:	4413      	add	r3, r2
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016d0:	441a      	add	r2, r3
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	609a      	str	r2, [r3, #8]

    return true;
 80016d6:	2301      	movs	r3, #1
}
 80016d8:	4618      	mov	r0, r3
 80016da:	374c      	adds	r7, #76	@ 0x4c
 80016dc:	46bd      	mov	sp, r7
 80016de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016e0:	7fefffff 	.word	0x7fefffff
 80016e4:	08008804 	.word	0x08008804
 80016e8:	0800880c 	.word	0x0800880c
 80016ec:	08008810 	.word	0x08008810
 80016f0:	08008818 	.word	0x08008818
 80016f4:	0800881c 	.word	0x0800881c

080016f8 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	e04c      	b.n	80017a8 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4413      	add	r3, r2
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b2f      	cmp	r3, #47	@ 0x2f
 8001718:	d90f      	bls.n	800173a <parse_hex4+0x42>
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	4413      	add	r3, r2
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b39      	cmp	r3, #57	@ 0x39
 8001724:	d809      	bhi.n	800173a <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	4413      	add	r3, r2
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	3b30      	subs	r3, #48	@ 0x30
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	e02d      	b.n	8001796 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	4413      	add	r3, r2
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b40      	cmp	r3, #64	@ 0x40
 8001744:	d90f      	bls.n	8001766 <parse_hex4+0x6e>
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	4413      	add	r3, r2
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b46      	cmp	r3, #70	@ 0x46
 8001750:	d809      	bhi.n	8001766 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	4413      	add	r3, r2
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4413      	add	r3, r2
 8001760:	3b37      	subs	r3, #55	@ 0x37
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	e017      	b.n	8001796 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4413      	add	r3, r2
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b60      	cmp	r3, #96	@ 0x60
 8001770:	d90f      	bls.n	8001792 <parse_hex4+0x9a>
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	4413      	add	r3, r2
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b66      	cmp	r3, #102	@ 0x66
 800177c:	d809      	bhi.n	8001792 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	4413      	add	r3, r2
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4413      	add	r3, r2
 800178c:	3b57      	subs	r3, #87	@ 0x57
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	e001      	b.n	8001796 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8001792:	2300      	movs	r3, #0
 8001794:	e00c      	b.n	80017b0 <parse_hex4+0xb8>
        }

        if (i < 3)
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2b02      	cmp	r3, #2
 800179a:	d802      	bhi.n	80017a2 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	3301      	adds	r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d9af      	bls.n	800170e <parse_hex4+0x16>
        }
    }

    return h;
 80017ae:	68fb      	ldr	r3, [r7, #12]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	@ 0x28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b05      	cmp	r3, #5
 80017f4:	f340 80b7 	ble.w	8001966 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	3302      	adds	r3, #2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff7b 	bl	80016f8 <parse_hex4>
 8001802:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800180a:	d304      	bcc.n	8001816 <utf16_literal_to_utf8+0x5a>
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8001812:	f0c0 80aa 	bcc.w	800196a <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800181c:	d337      	bcc.n	800188e <utf16_literal_to_utf8+0xd2>
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001824:	d233      	bcs.n	800188e <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	3306      	adds	r3, #6
 800182a:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8001830:	230c      	movs	r3, #12
 8001832:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b05      	cmp	r3, #5
 800183e:	f340 8096 	ble.w	800196e <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b5c      	cmp	r3, #92	@ 0x5c
 8001848:	f040 8093 	bne.w	8001972 <utf16_literal_to_utf8+0x1b6>
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	3301      	adds	r3, #1
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b75      	cmp	r3, #117	@ 0x75
 8001854:	f040 808d 	bne.w	8001972 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	3302      	adds	r3, #2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff4b 	bl	80016f8 <parse_hex4>
 8001862:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800186a:	f0c0 8084 	bcc.w	8001976 <utf16_literal_to_utf8+0x1ba>
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8001874:	d27f      	bcs.n	8001976 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	029a      	lsls	r2, r3, #10
 800187a:	4b43      	ldr	r3, [pc, #268]	@ (8001988 <utf16_literal_to_utf8+0x1cc>)
 800187c:	4013      	ands	r3, r2
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001884:	4313      	orrs	r3, r2
 8001886:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 800188c:	e004      	b.n	8001898 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800188e:	2306      	movs	r3, #6
 8001890:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189a:	2b7f      	cmp	r3, #127	@ 0x7f
 800189c:	d803      	bhi.n	80018a6 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800189e:	2301      	movs	r3, #1
 80018a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80018a4:	e01f      	b.n	80018e6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 80018a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018ac:	d206      	bcs.n	80018bc <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 80018ae:	2302      	movs	r3, #2
 80018b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 80018b4:	23c0      	movs	r3, #192	@ 0xc0
 80018b6:	f887 3020 	strb.w	r3, [r7, #32]
 80018ba:	e014      	b.n	80018e6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 80018bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018c2:	d206      	bcs.n	80018d2 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 80018c4:	2303      	movs	r3, #3
 80018c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 80018ca:	23e0      	movs	r3, #224	@ 0xe0
 80018cc:	f887 3020 	strb.w	r3, [r7, #32]
 80018d0:	e009      	b.n	80018e6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 80018d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d4:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80018d8:	d24f      	bcs.n	800197a <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80018da:	2304      	movs	r3, #4
 80018dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80018e0:	23f0      	movs	r3, #240	@ 0xf0
 80018e2:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80018e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80018ea:	3b01      	subs	r3, #1
 80018ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80018f0:	e015      	b.n	800191e <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80018f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6819      	ldr	r1, [r3, #0]
 8001900:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001904:	440b      	add	r3, r1
 8001906:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800190e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001910:	099b      	lsrs	r3, r3, #6
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001914:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001918:	3b01      	subs	r3, #1
 800191a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800191e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1e5      	bne.n	80018f2 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8001926:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800192a:	2b01      	cmp	r3, #1
 800192c:	d909      	bls.n	8001942 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800192e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001930:	b2d9      	uxtb	r1, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f897 2020 	ldrb.w	r2, [r7, #32]
 800193a:	430a      	orrs	r2, r1
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	701a      	strb	r2, [r3, #0]
 8001940:	e007      	b.n	8001952 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001944:	b2da      	uxtb	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800195a:	441a      	add	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001960:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001964:	e00b      	b.n	800197e <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8001966:	bf00      	nop
 8001968:	e008      	b.n	800197c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800196a:	bf00      	nop
 800196c:	e006      	b.n	800197c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800196e:	bf00      	nop
 8001970:	e004      	b.n	800197c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001972:	bf00      	nop
 8001974:	e002      	b.n	800197c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001976:	bf00      	nop
 8001978:	e000      	b.n	800197c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800197a:	bf00      	nop

fail:
    return 0;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3728      	adds	r7, #40	@ 0x28
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	000ffc00 	.word	0x000ffc00

0800198c <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	@ 0x28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	3301      	adds	r3, #1
 80019a0:	4413      	add	r3, r2
 80019a2:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	3301      	adds	r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	4413      	add	r3, r2
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b22      	cmp	r3, #34	@ 0x22
 80019c8:	f040 8103 	bne.w	8001bd2 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80019d4:	e017      	b.n	8001a06 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b5c      	cmp	r3, #92	@ 0x5c
 80019dc:	d110      	bne.n	8001a00 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	1c5a      	adds	r2, r3, #1
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	461a      	mov	r2, r3
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	f080 80f1 	bcs.w	8001bd6 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	3301      	adds	r3, #1
 80019f8:	61bb      	str	r3, [r7, #24]
                input_end++;
 80019fa:	6a3b      	ldr	r3, [r7, #32]
 80019fc:	3301      	adds	r3, #1
 80019fe:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001a00:	6a3b      	ldr	r3, [r7, #32]
 8001a02:	3301      	adds	r3, #1
 8001a04:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6a3a      	ldr	r2, [r7, #32]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	461a      	mov	r2, r3
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d203      	bcs.n	8001a20 <parse_string+0x94>
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b22      	cmp	r3, #34	@ 0x22
 8001a1e:	d1da      	bne.n	80019d6 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6a3a      	ldr	r2, [r7, #32]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	461a      	mov	r2, r3
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	f080 80d3 	bcs.w	8001bda <parse_string+0x24e>
 8001a34:	6a3b      	ldr	r3, [r7, #32]
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b22      	cmp	r3, #34	@ 0x22
 8001a3a:	f040 80ce 	bne.w	8001bda <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	4413      	add	r3, r2
 8001a48:	6a3a      	ldr	r2, [r7, #32]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	3201      	adds	r2, #1
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4798      	blx	r3
 8001a60:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 80ba 	beq.w	8001bde <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001a6e:	e094      	b.n	8001b9a <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8001a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b5c      	cmp	r3, #92	@ 0x5c
 8001a76:	d008      	beq.n	8001a8a <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a7a:	1c53      	adds	r3, r2, #1
 8001a7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1c59      	adds	r1, r3, #1
 8001a82:	60f9      	str	r1, [r7, #12]
 8001a84:	7812      	ldrb	r2, [r2, #0]
 8001a86:	701a      	strb	r2, [r3, #0]
 8001a88:	e087      	b.n	8001b9a <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001a8e:	6a3a      	ldr	r2, [r7, #32]
 8001a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f340 80a4 	ble.w	8001be2 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b75      	cmp	r3, #117	@ 0x75
 8001aa2:	f300 80a0 	bgt.w	8001be6 <parse_string+0x25a>
 8001aa6:	2b5c      	cmp	r3, #92	@ 0x5c
 8001aa8:	da04      	bge.n	8001ab4 <parse_string+0x128>
 8001aaa:	2b22      	cmp	r3, #34	@ 0x22
 8001aac:	d05c      	beq.n	8001b68 <parse_string+0x1dc>
 8001aae:	2b2f      	cmp	r3, #47	@ 0x2f
 8001ab0:	d05a      	beq.n	8001b68 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001ab2:	e098      	b.n	8001be6 <parse_string+0x25a>
            switch (input_pointer[1])
 8001ab4:	3b5c      	subs	r3, #92	@ 0x5c
 8001ab6:	2b19      	cmp	r3, #25
 8001ab8:	f200 8095 	bhi.w	8001be6 <parse_string+0x25a>
 8001abc:	a201      	add	r2, pc, #4	@ (adr r2, 8001ac4 <parse_string+0x138>)
 8001abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac2:	bf00      	nop
 8001ac4:	08001b69 	.word	0x08001b69
 8001ac8:	08001be7 	.word	0x08001be7
 8001acc:	08001be7 	.word	0x08001be7
 8001ad0:	08001be7 	.word	0x08001be7
 8001ad4:	08001be7 	.word	0x08001be7
 8001ad8:	08001be7 	.word	0x08001be7
 8001adc:	08001b2d 	.word	0x08001b2d
 8001ae0:	08001be7 	.word	0x08001be7
 8001ae4:	08001be7 	.word	0x08001be7
 8001ae8:	08001be7 	.word	0x08001be7
 8001aec:	08001b39 	.word	0x08001b39
 8001af0:	08001be7 	.word	0x08001be7
 8001af4:	08001be7 	.word	0x08001be7
 8001af8:	08001be7 	.word	0x08001be7
 8001afc:	08001be7 	.word	0x08001be7
 8001b00:	08001be7 	.word	0x08001be7
 8001b04:	08001be7 	.word	0x08001be7
 8001b08:	08001be7 	.word	0x08001be7
 8001b0c:	08001b45 	.word	0x08001b45
 8001b10:	08001be7 	.word	0x08001be7
 8001b14:	08001be7 	.word	0x08001be7
 8001b18:	08001be7 	.word	0x08001be7
 8001b1c:	08001b51 	.word	0x08001b51
 8001b20:	08001be7 	.word	0x08001be7
 8001b24:	08001b5d 	.word	0x08001b5d
 8001b28:	08001b79 	.word	0x08001b79
                    *output_pointer++ = '\b';
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	60fa      	str	r2, [r7, #12]
 8001b32:	2208      	movs	r2, #8
 8001b34:	701a      	strb	r2, [r3, #0]
                    break;
 8001b36:	e02c      	b.n	8001b92 <parse_string+0x206>
                    *output_pointer++ = '\f';
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	60fa      	str	r2, [r7, #12]
 8001b3e:	220c      	movs	r2, #12
 8001b40:	701a      	strb	r2, [r3, #0]
                    break;
 8001b42:	e026      	b.n	8001b92 <parse_string+0x206>
                    *output_pointer++ = '\n';
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	60fa      	str	r2, [r7, #12]
 8001b4a:	220a      	movs	r2, #10
 8001b4c:	701a      	strb	r2, [r3, #0]
                    break;
 8001b4e:	e020      	b.n	8001b92 <parse_string+0x206>
                    *output_pointer++ = '\r';
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	60fa      	str	r2, [r7, #12]
 8001b56:	220d      	movs	r2, #13
 8001b58:	701a      	strb	r2, [r3, #0]
                    break;
 8001b5a:	e01a      	b.n	8001b92 <parse_string+0x206>
                    *output_pointer++ = '\t';
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	60fa      	str	r2, [r7, #12]
 8001b62:	2209      	movs	r2, #9
 8001b64:	701a      	strb	r2, [r3, #0]
                    break;
 8001b66:	e014      	b.n	8001b92 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 8001b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	1c59      	adds	r1, r3, #1
 8001b70:	60f9      	str	r1, [r7, #12]
 8001b72:	7812      	ldrb	r2, [r2, #0]
 8001b74:	701a      	strb	r2, [r3, #0]
                    break;
 8001b76:	e00c      	b.n	8001b92 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001b78:	f107 030c 	add.w	r3, r7, #12
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	6a39      	ldr	r1, [r7, #32]
 8001b80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b82:	f7ff fe1b 	bl	80017bc <utf16_literal_to_utf8>
 8001b86:	4603      	mov	r3, r0
 8001b88:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001b8a:	7dfb      	ldrb	r3, [r7, #23]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d02c      	beq.n	8001bea <parse_string+0x25e>
                    break;
 8001b90:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001b92:	7dfb      	ldrb	r3, [r7, #23]
 8001b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b96:	4413      	add	r3, r2
 8001b98:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 8001b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	f4ff af66 	bcc.w	8001a70 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2210      	movs	r2, #16
 8001bae:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69fa      	ldr	r2, [r7, #28]
 8001bb4:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6a3a      	ldr	r2, [r7, #32]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	609a      	str	r2, [r3, #8]

    return true;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e020      	b.n	8001c14 <parse_string+0x288>
        goto fail;
 8001bd2:	bf00      	nop
 8001bd4:	e00a      	b.n	8001bec <parse_string+0x260>
                    goto fail;
 8001bd6:	bf00      	nop
 8001bd8:	e008      	b.n	8001bec <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 8001bda:	bf00      	nop
 8001bdc:	e006      	b.n	8001bec <parse_string+0x260>
            goto fail; /* allocation failure */
 8001bde:	bf00      	nop
 8001be0:	e004      	b.n	8001bec <parse_string+0x260>
                goto fail;
 8001be2:	bf00      	nop
 8001be4:	e002      	b.n	8001bec <parse_string+0x260>
                    goto fail;
 8001be6:	bf00      	nop
 8001be8:	e000      	b.n	8001bec <parse_string+0x260>
                        goto fail;
 8001bea:	bf00      	nop

fail:
    if (output != NULL)
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d005      	beq.n	8001bfe <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	69f8      	ldr	r0, [r7, #28]
 8001bf8:	4798      	blx	r3
        output = NULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d006      	beq.n	8001c12 <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3728      	adds	r7, #40	@ 0x28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <print_string_ptr+0x28>
    {
        return false;
 8001c40:	2300      	movs	r3, #0
 8001c42:	e110      	b.n	8001e66 <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d111      	bne.n	8001c6e <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8001c4a:	2103      	movs	r1, #3
 8001c4c:	6838      	ldr	r0, [r7, #0]
 8001c4e:	f7ff fb5f 	bl	8001310 <ensure>
 8001c52:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <print_string_ptr+0x42>
        {
            return false;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e103      	b.n	8001e66 <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4a83      	ldr	r2, [pc, #524]	@ (8001e70 <print_string_ptr+0x254>)
 8001c62:	8811      	ldrh	r1, [r2, #0]
 8001c64:	7892      	ldrb	r2, [r2, #2]
 8001c66:	8019      	strh	r1, [r3, #0]
 8001c68:	709a      	strb	r2, [r3, #2]

        return true;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e0fb      	b.n	8001e66 <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	61fb      	str	r3, [r7, #28]
 8001c72:	e024      	b.n	8001cbe <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b22      	cmp	r3, #34	@ 0x22
 8001c7a:	dc0f      	bgt.n	8001c9c <print_string_ptr+0x80>
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	db13      	blt.n	8001ca8 <print_string_ptr+0x8c>
 8001c80:	3b08      	subs	r3, #8
 8001c82:	4a7c      	ldr	r2, [pc, #496]	@ (8001e74 <print_string_ptr+0x258>)
 8001c84:	fa22 f303 	lsr.w	r3, r2, r3
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	bf14      	ite	ne
 8001c90:	2301      	movne	r3, #1
 8001c92:	2300      	moveq	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d102      	bne.n	8001ca0 <print_string_ptr+0x84>
 8001c9a:	e005      	b.n	8001ca8 <print_string_ptr+0x8c>
 8001c9c:	2b5c      	cmp	r3, #92	@ 0x5c
 8001c9e:	d103      	bne.n	8001ca8 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	617b      	str	r3, [r7, #20]
                break;
 8001ca6:	e007      	b.n	8001cb8 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b1f      	cmp	r3, #31
 8001cae:	d802      	bhi.n	8001cb6 <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	3305      	adds	r3, #5
 8001cb4:	617b      	str	r3, [r7, #20]
                }
                break;
 8001cb6:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1d6      	bne.n	8001c74 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	461a      	mov	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	3303      	adds	r3, #3
 8001cd8:	4619      	mov	r1, r3
 8001cda:	6838      	ldr	r0, [r7, #0]
 8001cdc:	f7ff fb18 	bl	8001310 <ensure>
 8001ce0:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <print_string_ptr+0xd0>
    {
        return false;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	e0bc      	b.n	8001e66 <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d117      	bne.n	8001d22 <print_string_ptr+0x106>
    {
        output[0] = '\"';
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	2222      	movs	r2, #34	@ 0x22
 8001cf6:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f004 fa76 	bl	80061f2 <memcpy>
        output[output_length + 1] = '\"';
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	2222      	movs	r2, #34	@ 0x22
 8001d10:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	3302      	adds	r3, #2
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4413      	add	r3, r2
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]

        return true;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e0a1      	b.n	8001e66 <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	2222      	movs	r2, #34	@ 0x22
 8001d26:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	61fb      	str	r3, [r7, #28]
 8001d32:	e086      	b.n	8001e42 <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b1f      	cmp	r3, #31
 8001d3a:	d90c      	bls.n	8001d56 <print_string_ptr+0x13a>
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b22      	cmp	r3, #34	@ 0x22
 8001d42:	d008      	beq.n	8001d56 <print_string_ptr+0x13a>
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b5c      	cmp	r3, #92	@ 0x5c
 8001d4a:	d004      	beq.n	8001d56 <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	781a      	ldrb	r2, [r3, #0]
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	701a      	strb	r2, [r3, #0]
 8001d54:	e06f      	b.n	8001e36 <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	1c5a      	adds	r2, r3, #1
 8001d5a:	61ba      	str	r2, [r7, #24]
 8001d5c:	225c      	movs	r2, #92	@ 0x5c
 8001d5e:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b22      	cmp	r3, #34	@ 0x22
 8001d66:	dc3d      	bgt.n	8001de4 <print_string_ptr+0x1c8>
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	db59      	blt.n	8001e20 <print_string_ptr+0x204>
 8001d6c:	3b08      	subs	r3, #8
 8001d6e:	2b1a      	cmp	r3, #26
 8001d70:	d856      	bhi.n	8001e20 <print_string_ptr+0x204>
 8001d72:	a201      	add	r2, pc, #4	@ (adr r2, 8001d78 <print_string_ptr+0x15c>)
 8001d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d78:	08001df9 	.word	0x08001df9
 8001d7c:	08001e19 	.word	0x08001e19
 8001d80:	08001e09 	.word	0x08001e09
 8001d84:	08001e21 	.word	0x08001e21
 8001d88:	08001e01 	.word	0x08001e01
 8001d8c:	08001e11 	.word	0x08001e11
 8001d90:	08001e21 	.word	0x08001e21
 8001d94:	08001e21 	.word	0x08001e21
 8001d98:	08001e21 	.word	0x08001e21
 8001d9c:	08001e21 	.word	0x08001e21
 8001da0:	08001e21 	.word	0x08001e21
 8001da4:	08001e21 	.word	0x08001e21
 8001da8:	08001e21 	.word	0x08001e21
 8001dac:	08001e21 	.word	0x08001e21
 8001db0:	08001e21 	.word	0x08001e21
 8001db4:	08001e21 	.word	0x08001e21
 8001db8:	08001e21 	.word	0x08001e21
 8001dbc:	08001e21 	.word	0x08001e21
 8001dc0:	08001e21 	.word	0x08001e21
 8001dc4:	08001e21 	.word	0x08001e21
 8001dc8:	08001e21 	.word	0x08001e21
 8001dcc:	08001e21 	.word	0x08001e21
 8001dd0:	08001e21 	.word	0x08001e21
 8001dd4:	08001e21 	.word	0x08001e21
 8001dd8:	08001e21 	.word	0x08001e21
 8001ddc:	08001e21 	.word	0x08001e21
 8001de0:	08001df1 	.word	0x08001df1
 8001de4:	2b5c      	cmp	r3, #92	@ 0x5c
 8001de6:	d11b      	bne.n	8001e20 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	225c      	movs	r2, #92	@ 0x5c
 8001dec:	701a      	strb	r2, [r3, #0]
                    break;
 8001dee:	e022      	b.n	8001e36 <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2222      	movs	r2, #34	@ 0x22
 8001df4:	701a      	strb	r2, [r3, #0]
                    break;
 8001df6:	e01e      	b.n	8001e36 <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	2262      	movs	r2, #98	@ 0x62
 8001dfc:	701a      	strb	r2, [r3, #0]
                    break;
 8001dfe:	e01a      	b.n	8001e36 <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	2266      	movs	r2, #102	@ 0x66
 8001e04:	701a      	strb	r2, [r3, #0]
                    break;
 8001e06:	e016      	b.n	8001e36 <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	226e      	movs	r2, #110	@ 0x6e
 8001e0c:	701a      	strb	r2, [r3, #0]
                    break;
 8001e0e:	e012      	b.n	8001e36 <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	2272      	movs	r2, #114	@ 0x72
 8001e14:	701a      	strb	r2, [r3, #0]
                    break;
 8001e16:	e00e      	b.n	8001e36 <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	2274      	movs	r2, #116	@ 0x74
 8001e1c:	701a      	strb	r2, [r3, #0]
                    break;
 8001e1e:	e00a      	b.n	8001e36 <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4914      	ldr	r1, [pc, #80]	@ (8001e78 <print_string_ptr+0x25c>)
 8001e28:	69b8      	ldr	r0, [r7, #24]
 8001e2a:	f003 f901 	bl	8005030 <siprintf>
                    output_pointer += 4;
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	3304      	adds	r3, #4
 8001e32:	61bb      	str	r3, [r7, #24]
                    break;
 8001e34:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	61fb      	str	r3, [r7, #28]
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	61bb      	str	r3, [r7, #24]
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f47f af74 	bne.w	8001d34 <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4413      	add	r3, r2
 8001e54:	2222      	movs	r2, #34	@ 0x22
 8001e56:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	3302      	adds	r3, #2
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4413      	add	r3, r2
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]

    return true;
 8001e64:	2301      	movs	r3, #1
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3720      	adds	r7, #32
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	08008824 	.word	0x08008824
 8001e74:	04000037 	.word	0x04000037
 8001e78:	08008828 	.word	0x08008828

08001e7c <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	6839      	ldr	r1, [r7, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fec5 	bl	8001c1c <print_string_ptr>
 8001e92:	4603      	mov	r3, r0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <buffer_skip_whitespace+0x16>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e02c      	b.n	8001f10 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <buffer_skip_whitespace+0x2c>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d306      	bcc.n	8001ed6 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	e021      	b.n	8001f10 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00d      	beq.n	8001ef8 <buffer_skip_whitespace+0x5c>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d207      	bcs.n	8001ef8 <buffer_skip_whitespace+0x5c>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b20      	cmp	r3, #32
 8001ef6:	d9e9      	bls.n	8001ecc <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d104      	bne.n	8001f0e <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	1e5a      	subs	r2, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001f0e:	687b      	ldr	r3, [r7, #4]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d007      	beq.n	8001f3a <skip_utf8_bom+0x1e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <skip_utf8_bom+0x1e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <skip_utf8_bom+0x22>
    {
        return NULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e01c      	b.n	8001f78 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d018      	beq.n	8001f76 <skip_utf8_bom+0x5a>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	1d1a      	adds	r2, r3, #4
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d211      	bcs.n	8001f76 <skip_utf8_bom+0x5a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	4908      	ldr	r1, [pc, #32]	@ (8001f80 <skip_utf8_bom+0x64>)
 8001f60:	4618      	mov	r0, r3
 8001f62:	f004 f895 	bl	8006090 <strncmp>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d104      	bne.n	8001f76 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	1cda      	adds	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001f76:	687b      	ldr	r3, [r7, #4]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	08008830 	.word	0x08008830

08001f84 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	e00c      	b.n	8001fb4 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f7fe f938 	bl	8000210 <strlen>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	6979      	ldr	r1, [r7, #20]
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f000 f805 	bl	8001fbc <cJSON_ParseWithLengthOpts>
 8001fb2:	4603      	mov	r3, r0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08e      	sub	sp, #56	@ 0x38
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001fca:	f107 0318 	add.w	r3, r7, #24
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	609a      	str	r2, [r3, #8]
 8001fd6:	60da      	str	r2, [r3, #12]
 8001fd8:	611a      	str	r2, [r3, #16]
 8001fda:	615a      	str	r2, [r3, #20]
 8001fdc:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 8001fe2:	4b41      	ldr	r3, [pc, #260]	@ (80020e8 <cJSON_ParseWithLengthOpts+0x12c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001fe8:	4b3f      	ldr	r3, [pc, #252]	@ (80020e8 <cJSON_ParseWithLengthOpts+0x12c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d042      	beq.n	800207a <cJSON_ParseWithLengthOpts+0xbe>
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d03f      	beq.n	800207a <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8002006:	4a39      	ldr	r2, [pc, #228]	@ (80020ec <cJSON_ParseWithLengthOpts+0x130>)
 8002008:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800200c:	ca07      	ldmia	r2, {r0, r1, r2}
 800200e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8002012:	4836      	ldr	r0, [pc, #216]	@ (80020ec <cJSON_ParseWithLengthOpts+0x130>)
 8002014:	f7ff f840 	bl	8001098 <cJSON_New_Item>
 8002018:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 800201a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800201c:	2b00      	cmp	r3, #0
 800201e:	d02e      	beq.n	800207e <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8002020:	f107 0318 	add.w	r3, r7, #24
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff79 	bl	8001f1c <skip_utf8_bom>
 800202a:	4603      	mov	r3, r0
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff35 	bl	8001e9c <buffer_skip_whitespace>
 8002032:	4603      	mov	r3, r0
 8002034:	4619      	mov	r1, r3
 8002036:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002038:	f000 f902 	bl	8002240 <parse_value>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d01f      	beq.n	8002082 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00e      	beq.n	8002066 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8002048:	f107 0318 	add.w	r3, r7, #24
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff25 	bl	8001e9c <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8002052:	6a3a      	ldr	r2, [r7, #32]
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	429a      	cmp	r2, r3
 8002058:	d215      	bcs.n	8002086 <cJSON_ParseWithLengthOpts+0xca>
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	4413      	add	r3, r2
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10f      	bne.n	8002086 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d004      	beq.n	8002076 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	441a      	add	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	601a      	str	r2, [r3, #0]
    }

    return item;
 8002076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002078:	e031      	b.n	80020de <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800207a:	bf00      	nop
 800207c:	e004      	b.n	8002088 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800207e:	bf00      	nop
 8002080:	e002      	b.n	8002088 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8002082:	bf00      	nop
 8002084:	e000      	b.n	8002088 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8002086:	bf00      	nop

fail:
    if (item != NULL)
 8002088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800208e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002090:	f7ff f818 	bl	80010c4 <cJSON_Delete>
    }

    if (value != NULL)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d020      	beq.n	80020dc <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 80020a2:	6a3a      	ldr	r2, [r7, #32]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d202      	bcs.n	80020b0 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	e005      	b.n	80020bc <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3b01      	subs	r3, #1
 80020ba:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d004      	beq.n	80020cc <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	441a      	add	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 80020cc:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <cJSON_ParseWithLengthOpts+0x12c>)
 80020ce:	461a      	mov	r2, r3
 80020d0:	f107 0310 	add.w	r3, r7, #16
 80020d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020d8:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3738      	adds	r7, #56	@ 0x38
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000200 	.word	0x20000200
 80020ec:	20000000 	.word	0x20000000

080020f0 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 80020f8:	2200      	movs	r2, #0
 80020fa:	2100      	movs	r1, #0
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ff41 	bl	8001f84 <cJSON_ParseWithOpts>
 8002102:	4603      	mov	r3, r0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08e      	sub	sp, #56	@ 0x38
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8002118:	2300      	movs	r3, #0
 800211a:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 800211c:	f107 0310 	add.w	r3, r7, #16
 8002120:	2224      	movs	r2, #36	@ 0x24
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f003 ffd8 	bl	80060da <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a3b      	ldr	r2, [pc, #236]	@ (800221c <print+0x110>)
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	4610      	mov	r0, r2
 8002134:	4798      	blx	r3
 8002136:	4603      	mov	r3, r0
 8002138:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 800213a:	4b38      	ldr	r3, [pc, #224]	@ (800221c <print+0x110>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800214a:	ca07      	ldmia	r2, {r0, r1, r2}
 800214c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d042      	beq.n	80021dc <print+0xd0>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8002156:	f107 0310 	add.w	r3, r7, #16
 800215a:	4619      	mov	r1, r3
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 f95b 	bl	8002418 <print_value>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d03b      	beq.n	80021e0 <print+0xd4>
    {
        goto fail;
    }
    update_offset(buffer);
 8002168:	f107 0310 	add.w	r3, r7, #16
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff f969 	bl	8001444 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00d      	beq.n	8002196 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	6938      	ldr	r0, [r7, #16]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	3201      	adds	r2, #1
 8002184:	4611      	mov	r1, r2
 8002186:	4798      	blx	r3
 8002188:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 800218a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800218c:	2b00      	cmp	r3, #0
 800218e:	d029      	beq.n	80021e4 <print+0xd8>
            goto fail;
        }
        buffer->buffer = NULL;
 8002190:	2300      	movs	r3, #0
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	e020      	b.n	80021d8 <print+0xcc>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	3201      	adds	r2, #1
 800219e:	4610      	mov	r0, r2
 80021a0:	4798      	blx	r3
 80021a2:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 80021a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d01e      	beq.n	80021e8 <print+0xdc>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 80021aa:	6939      	ldr	r1, [r7, #16]
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	4293      	cmp	r3, r2
 80021b4:	bf28      	it	cs
 80021b6:	4613      	movcs	r3, r2
 80021b8:	461a      	mov	r2, r3
 80021ba:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80021bc:	f004 f819 	bl	80061f2 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80021c4:	4413      	add	r3, r2
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	4610      	mov	r0, r2
 80021d2:	4798      	blx	r3
        buffer->buffer = NULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	613b      	str	r3, [r7, #16]
    }

    return printed;
 80021d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021da:	e01a      	b.n	8002212 <print+0x106>
        goto fail;
 80021dc:	bf00      	nop
 80021de:	e004      	b.n	80021ea <print+0xde>
        goto fail;
 80021e0:	bf00      	nop
 80021e2:	e002      	b.n	80021ea <print+0xde>
            goto fail;
 80021e4:	bf00      	nop
 80021e6:	e000      	b.n	80021ea <print+0xde>
            goto fail;
 80021e8:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d006      	beq.n	80021fe <print+0xf2>
    {
        hooks->deallocate(buffer->buffer);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4610      	mov	r0, r2
 80021f8:	4798      	blx	r3
        buffer->buffer = NULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
    }

    if (printed != NULL)
 80021fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <print+0x104>
    {
        hooks->deallocate(printed);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800220a:	4798      	blx	r3
        printed = NULL;
 800220c:	2300      	movs	r3, #0
 800220e:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    return NULL;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3738      	adds	r7, #56	@ 0x38
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	080092c8 	.word	0x080092c8

08002220 <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 8002228:	4a04      	ldr	r2, [pc, #16]	@ (800223c <cJSON_Print+0x1c>)
 800222a:	2101      	movs	r1, #1
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff ff6d 	bl	800210c <print>
 8002232:	4603      	mov	r3, r0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000000 	.word	0x20000000

08002240 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <parse_value+0x18>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <parse_value+0x1c>
    {
        return false; /* no input */
 8002258:	2300      	movs	r3, #0
 800225a:	e0d2      	b.n	8002402 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d01d      	beq.n	800229e <parse_value+0x5e>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	1d1a      	adds	r2, r3, #4
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	429a      	cmp	r2, r3
 800226e:	d816      	bhi.n	800229e <parse_value+0x5e>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	4413      	add	r3, r2
 800227a:	2204      	movs	r2, #4
 800227c:	4963      	ldr	r1, [pc, #396]	@ (800240c <parse_value+0x1cc>)
 800227e:	4618      	mov	r0, r3
 8002280:	f003 ff06 	bl	8006090 <strncmp>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d109      	bne.n	800229e <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2204      	movs	r2, #4
 800228e:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	1d1a      	adds	r2, r3, #4
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	609a      	str	r2, [r3, #8]
        return true;
 800229a:	2301      	movs	r3, #1
 800229c:	e0b1      	b.n	8002402 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d01d      	beq.n	80022e0 <parse_value+0xa0>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	1d5a      	adds	r2, r3, #5
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d816      	bhi.n	80022e0 <parse_value+0xa0>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	4413      	add	r3, r2
 80022bc:	2205      	movs	r2, #5
 80022be:	4954      	ldr	r1, [pc, #336]	@ (8002410 <parse_value+0x1d0>)
 80022c0:	4618      	mov	r0, r3
 80022c2:	f003 fee5 	bl	8006090 <strncmp>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d109      	bne.n	80022e0 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	1d5a      	adds	r2, r3, #5
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	609a      	str	r2, [r3, #8]
        return true;
 80022dc:	2301      	movs	r3, #1
 80022de:	e090      	b.n	8002402 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d020      	beq.n	8002328 <parse_value+0xe8>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	1d1a      	adds	r2, r3, #4
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d819      	bhi.n	8002328 <parse_value+0xe8>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	4413      	add	r3, r2
 80022fe:	2204      	movs	r2, #4
 8002300:	4944      	ldr	r1, [pc, #272]	@ (8002414 <parse_value+0x1d4>)
 8002302:	4618      	mov	r0, r3
 8002304:	f003 fec4 	bl	8006090 <strncmp>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10c      	bne.n	8002328 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2202      	movs	r2, #2
 8002312:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	1d1a      	adds	r2, r3, #4
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	609a      	str	r2, [r3, #8]
        return true;
 8002324:	2301      	movs	r3, #1
 8002326:	e06c      	b.n	8002402 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d013      	beq.n	8002356 <parse_value+0x116>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	429a      	cmp	r2, r3
 8002338:	d20d      	bcs.n	8002356 <parse_value+0x116>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	4413      	add	r3, r2
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b22      	cmp	r3, #34	@ 0x22
 8002348:	d105      	bne.n	8002356 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800234a:	6839      	ldr	r1, [r7, #0]
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff fb1d 	bl	800198c <parse_string>
 8002352:	4603      	mov	r3, r0
 8002354:	e055      	b.n	8002402 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d023      	beq.n	80023a4 <parse_value+0x164>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	429a      	cmp	r2, r3
 8002366:	d21d      	bcs.n	80023a4 <parse_value+0x164>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	4413      	add	r3, r2
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b2d      	cmp	r3, #45	@ 0x2d
 8002376:	d00f      	beq.n	8002398 <parse_value+0x158>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	4413      	add	r3, r2
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b2f      	cmp	r3, #47	@ 0x2f
 8002386:	d90d      	bls.n	80023a4 <parse_value+0x164>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	4413      	add	r3, r2
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b39      	cmp	r3, #57	@ 0x39
 8002396:	d805      	bhi.n	80023a4 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8002398:	6839      	ldr	r1, [r7, #0]
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7fe feec 	bl	8001178 <parse_number>
 80023a0:	4603      	mov	r3, r0
 80023a2:	e02e      	b.n	8002402 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d013      	beq.n	80023d2 <parse_value+0x192>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d20d      	bcs.n	80023d2 <parse_value+0x192>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	4413      	add	r3, r2
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b5b      	cmp	r3, #91	@ 0x5b
 80023c4:	d105      	bne.n	80023d2 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 80023c6:	6839      	ldr	r1, [r7, #0]
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f909 	bl	80025e0 <parse_array>
 80023ce:	4603      	mov	r3, r0
 80023d0:	e017      	b.n	8002402 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d013      	beq.n	8002400 <parse_value+0x1c0>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d20d      	bcs.n	8002400 <parse_value+0x1c0>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	4413      	add	r3, r2
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b7b      	cmp	r3, #123	@ 0x7b
 80023f2:	d105      	bne.n	8002400 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 80023f4:	6839      	ldr	r1, [r7, #0]
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 fa3c 	bl	8002874 <parse_object>
 80023fc:	4603      	mov	r3, r0
 80023fe:	e000      	b.n	8002402 <parse_value+0x1c2>
    }

    return false;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	08008804 	.word	0x08008804
 8002410:	08008834 	.word	0x08008834
 8002414:	0800883c 	.word	0x0800883c

08002418 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d002      	beq.n	8002432 <print_value+0x1a>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <print_value+0x1e>
    {
        return false;
 8002432:	2300      	movs	r3, #0
 8002434:	e0c9      	b.n	80025ca <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b80      	cmp	r3, #128	@ 0x80
 800243e:	f000 808e 	beq.w	800255e <print_value+0x146>
 8002442:	2b80      	cmp	r3, #128	@ 0x80
 8002444:	f300 80c0 	bgt.w	80025c8 <print_value+0x1b0>
 8002448:	2b20      	cmp	r3, #32
 800244a:	dc49      	bgt.n	80024e0 <print_value+0xc8>
 800244c:	2b00      	cmp	r3, #0
 800244e:	f340 80bb 	ble.w	80025c8 <print_value+0x1b0>
 8002452:	3b01      	subs	r3, #1
 8002454:	2b1f      	cmp	r3, #31
 8002456:	f200 80b7 	bhi.w	80025c8 <print_value+0x1b0>
 800245a:	a201      	add	r2, pc, #4	@ (adr r2, 8002460 <print_value+0x48>)
 800245c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002460:	0800250b 	.word	0x0800250b
 8002464:	0800252f 	.word	0x0800252f
 8002468:	080025c9 	.word	0x080025c9
 800246c:	080024e7 	.word	0x080024e7
 8002470:	080025c9 	.word	0x080025c9
 8002474:	080025c9 	.word	0x080025c9
 8002478:	080025c9 	.word	0x080025c9
 800247c:	08002553 	.word	0x08002553
 8002480:	080025c9 	.word	0x080025c9
 8002484:	080025c9 	.word	0x080025c9
 8002488:	080025c9 	.word	0x080025c9
 800248c:	080025c9 	.word	0x080025c9
 8002490:	080025c9 	.word	0x080025c9
 8002494:	080025c9 	.word	0x080025c9
 8002498:	080025c9 	.word	0x080025c9
 800249c:	080025a5 	.word	0x080025a5
 80024a0:	080025c9 	.word	0x080025c9
 80024a4:	080025c9 	.word	0x080025c9
 80024a8:	080025c9 	.word	0x080025c9
 80024ac:	080025c9 	.word	0x080025c9
 80024b0:	080025c9 	.word	0x080025c9
 80024b4:	080025c9 	.word	0x080025c9
 80024b8:	080025c9 	.word	0x080025c9
 80024bc:	080025c9 	.word	0x080025c9
 80024c0:	080025c9 	.word	0x080025c9
 80024c4:	080025c9 	.word	0x080025c9
 80024c8:	080025c9 	.word	0x080025c9
 80024cc:	080025c9 	.word	0x080025c9
 80024d0:	080025c9 	.word	0x080025c9
 80024d4:	080025c9 	.word	0x080025c9
 80024d8:	080025c9 	.word	0x080025c9
 80024dc:	080025b1 	.word	0x080025b1
 80024e0:	2b40      	cmp	r3, #64	@ 0x40
 80024e2:	d06b      	beq.n	80025bc <print_value+0x1a4>
 80024e4:	e070      	b.n	80025c8 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 80024e6:	2105      	movs	r1, #5
 80024e8:	6838      	ldr	r0, [r7, #0]
 80024ea:	f7fe ff11 	bl	8001310 <ensure>
 80024ee:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <print_value+0xe2>
            {
                return false;
 80024f6:	2300      	movs	r3, #0
 80024f8:	e067      	b.n	80025ca <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4a35      	ldr	r2, [pc, #212]	@ (80025d4 <print_value+0x1bc>)
 80024fe:	6810      	ldr	r0, [r2, #0]
 8002500:	6018      	str	r0, [r3, #0]
 8002502:	7912      	ldrb	r2, [r2, #4]
 8002504:	711a      	strb	r2, [r3, #4]
            return true;
 8002506:	2301      	movs	r3, #1
 8002508:	e05f      	b.n	80025ca <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 800250a:	2106      	movs	r1, #6
 800250c:	6838      	ldr	r0, [r7, #0]
 800250e:	f7fe feff 	bl	8001310 <ensure>
 8002512:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <print_value+0x106>
            {
                return false;
 800251a:	2300      	movs	r3, #0
 800251c:	e055      	b.n	80025ca <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4a2d      	ldr	r2, [pc, #180]	@ (80025d8 <print_value+0x1c0>)
 8002522:	6810      	ldr	r0, [r2, #0]
 8002524:	6018      	str	r0, [r3, #0]
 8002526:	8892      	ldrh	r2, [r2, #4]
 8002528:	809a      	strh	r2, [r3, #4]
            return true;
 800252a:	2301      	movs	r3, #1
 800252c:	e04d      	b.n	80025ca <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 800252e:	2105      	movs	r1, #5
 8002530:	6838      	ldr	r0, [r7, #0]
 8002532:	f7fe feed 	bl	8001310 <ensure>
 8002536:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <print_value+0x12a>
            {
                return false;
 800253e:	2300      	movs	r3, #0
 8002540:	e043      	b.n	80025ca <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4a25      	ldr	r2, [pc, #148]	@ (80025dc <print_value+0x1c4>)
 8002546:	6810      	ldr	r0, [r2, #0]
 8002548:	6018      	str	r0, [r3, #0]
 800254a:	7912      	ldrb	r2, [r2, #4]
 800254c:	711a      	strb	r2, [r3, #4]
            return true;
 800254e:	2301      	movs	r3, #1
 8002550:	e03b      	b.n	80025ca <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 8002552:	6839      	ldr	r1, [r7, #0]
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7fe ffdf 	bl	8001518 <print_number>
 800255a:	4603      	mov	r3, r0
 800255c:	e035      	b.n	80025ca <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 800255e:	2300      	movs	r3, #0
 8002560:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <print_value+0x156>
            {
                return false;
 800256a:	2300      	movs	r3, #0
 800256c:	e02d      	b.n	80025ca <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	4618      	mov	r0, r3
 8002574:	f7fd fe4c 	bl	8000210 <strlen>
 8002578:	4603      	mov	r3, r0
 800257a:	3301      	adds	r3, #1
 800257c:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 800257e:	68b9      	ldr	r1, [r7, #8]
 8002580:	6838      	ldr	r0, [r7, #0]
 8002582:	f7fe fec5 	bl	8001310 <ensure>
 8002586:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <print_value+0x17a>
            {
                return false;
 800258e:	2300      	movs	r3, #0
 8002590:	e01b      	b.n	80025ca <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	4619      	mov	r1, r3
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f003 fe29 	bl	80061f2 <memcpy>
            return true;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e012      	b.n	80025ca <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 80025a4:	6839      	ldr	r1, [r7, #0]
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff fc68 	bl	8001e7c <print_string>
 80025ac:	4603      	mov	r3, r0
 80025ae:	e00c      	b.n	80025ca <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 80025b0:	6839      	ldr	r1, [r7, #0]
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f8d8 	bl	8002768 <print_array>
 80025b8:	4603      	mov	r3, r0
 80025ba:	e006      	b.n	80025ca <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 80025bc:	6839      	ldr	r1, [r7, #0]
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 fa64 	bl	8002a8c <print_object>
 80025c4:	4603      	mov	r3, r0
 80025c6:	e000      	b.n	80025ca <print_value+0x1b2>

        default:
            return false;
 80025c8:	2300      	movs	r3, #0
    }
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	08008804 	.word	0x08008804
 80025d8:	08008834 	.word	0x08008834
 80025dc:	0800883c 	.word	0x0800883c

080025e0 <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025fa:	d301      	bcc.n	8002600 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 80025fc:	2300      	movs	r3, #0
 80025fe:	e0af      	b.n	8002760 <parse_array+0x180>
    }
    input_buffer->depth++;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	4413      	add	r3, r2
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b5b      	cmp	r3, #91	@ 0x5b
 8002618:	f040 8094 	bne.w	8002744 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002626:	6838      	ldr	r0, [r7, #0]
 8002628:	f7ff fc38 	bl	8001e9c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00d      	beq.n	800264e <parse_array+0x6e>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	429a      	cmp	r2, r3
 800263c:	d207      	bcs.n	800264e <parse_array+0x6e>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	4413      	add	r3, r2
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b5d      	cmp	r3, #93	@ 0x5d
 800264c:	d061      	beq.n	8002712 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <parse_array+0x80>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	429a      	cmp	r2, r3
 800265e:	d305      	bcc.n	800266c <parse_array+0x8c>
    {
        input_buffer->offset--;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	1e5a      	subs	r2, r3, #1
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	609a      	str	r2, [r3, #8]
        goto fail;
 800266a:	e072      	b.n	8002752 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	1e5a      	subs	r2, r3, #1
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	3310      	adds	r3, #16
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fd0c 	bl	8001098 <cJSON_New_Item>
 8002680:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d05f      	beq.n	8002748 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d104      	bne.n	8002698 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	e007      	b.n	80026a8 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	1c5a      	adds	r2, r3, #1
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80026b2:	6838      	ldr	r0, [r7, #0]
 80026b4:	f7ff fbf2 	bl	8001e9c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80026b8:	6839      	ldr	r1, [r7, #0]
 80026ba:	6938      	ldr	r0, [r7, #16]
 80026bc:	f7ff fdc0 	bl	8002240 <parse_value>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d042      	beq.n	800274c <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80026c6:	6838      	ldr	r0, [r7, #0]
 80026c8:	f7ff fbe8 	bl	8001e9c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00d      	beq.n	80026ee <parse_array+0x10e>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d207      	bcs.n	80026ee <parse_array+0x10e>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	4413      	add	r3, r2
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b2c      	cmp	r3, #44	@ 0x2c
 80026ec:	d0c3      	beq.n	8002676 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d02d      	beq.n	8002750 <parse_array+0x170>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d227      	bcs.n	8002750 <parse_array+0x170>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	4413      	add	r3, r2
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b5d      	cmp	r3, #93	@ 0x5d
 800270e:	d11f      	bne.n	8002750 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8002710:	e000      	b.n	8002714 <parse_array+0x134>
        goto success;
 8002712:	bf00      	nop
    input_buffer->depth--;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	1e5a      	subs	r2, r3, #1
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <parse_array+0x14a>
        head->prev = current_item;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2220      	movs	r2, #32
 800272e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	609a      	str	r2, [r3, #8]

    return true;
 8002740:	2301      	movs	r3, #1
 8002742:	e00d      	b.n	8002760 <parse_array+0x180>
        goto fail;
 8002744:	bf00      	nop
 8002746:	e004      	b.n	8002752 <parse_array+0x172>
            goto fail; /* allocation failure */
 8002748:	bf00      	nop
 800274a:	e002      	b.n	8002752 <parse_array+0x172>
            goto fail; /* failed to parse value */
 800274c:	bf00      	nop
 800274e:	e000      	b.n	8002752 <parse_array+0x172>
        goto fail; /* expected end of array */
 8002750:	bf00      	nop

fail:
    if (head != NULL)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d002      	beq.n	800275e <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8002758:	6978      	ldr	r0, [r7, #20]
 800275a:	f7fe fcb3 	bl	80010c4 <cJSON_Delete>
    }

    return false;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <print_array+0x22>
    {
        return false;
 8002786:	2300      	movs	r3, #0
 8002788:	e070      	b.n	800286c <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800278a:	2101      	movs	r1, #1
 800278c:	6838      	ldr	r0, [r7, #0]
 800278e:	f7fe fdbf 	bl	8001310 <ensure>
 8002792:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <print_array+0x36>
    {
        return false;
 800279a:	2300      	movs	r3, #0
 800279c:	e066      	b.n	800286c <print_array+0x104>
    }

    *output_pointer = '[';
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	225b      	movs	r2, #91	@ 0x5b
 80027a2:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 80027b8:	e03d      	b.n	8002836 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 80027ba:	6839      	ldr	r1, [r7, #0]
 80027bc:	6938      	ldr	r0, [r7, #16]
 80027be:	f7ff fe2b 	bl	8002418 <print_value>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <print_array+0x64>
        {
            return false;
 80027c8:	2300      	movs	r3, #0
 80027ca:	e04f      	b.n	800286c <print_array+0x104>
        }
        update_offset(output_buffer);
 80027cc:	6838      	ldr	r0, [r7, #0]
 80027ce:	f7fe fe39 	bl	8001444 <update_offset>
        if (current_element->next)
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d02a      	beq.n	8002830 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <print_array+0x7e>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e000      	b.n	80027e8 <print_array+0x80>
 80027e6:	2301      	movs	r3, #1
 80027e8:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	3301      	adds	r3, #1
 80027ee:	4619      	mov	r1, r3
 80027f0:	6838      	ldr	r0, [r7, #0]
 80027f2:	f7fe fd8d 	bl	8001310 <ensure>
 80027f6:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <print_array+0x9a>
            {
                return false;
 80027fe:	2300      	movs	r3, #0
 8002800:	e034      	b.n	800286c <print_array+0x104>
            }
            *output_pointer++ = ',';
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	617a      	str	r2, [r7, #20]
 8002808:	222c      	movs	r2, #44	@ 0x2c
 800280a:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d004      	beq.n	800281e <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	617a      	str	r2, [r7, #20]
 800281a:	2220      	movs	r2, #32
 800281c:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2200      	movs	r2, #0
 8002822:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	441a      	add	r2, r3
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1be      	bne.n	80027ba <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 800283c:	2102      	movs	r1, #2
 800283e:	6838      	ldr	r0, [r7, #0]
 8002840:	f7fe fd66 	bl	8001310 <ensure>
 8002844:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <print_array+0xe8>
    {
        return false;
 800284c:	2300      	movs	r3, #0
 800284e:	e00d      	b.n	800286c <print_array+0x104>
    }
    *output_pointer++ = ']';
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	617a      	str	r2, [r7, #20]
 8002856:	225d      	movs	r2, #93	@ 0x5d
 8002858:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2200      	movs	r2, #0
 800285e:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	1e5a      	subs	r2, r3, #1
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	60da      	str	r2, [r3, #12]

    return true;
 800286a:	2301      	movs	r3, #1
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002882:	2300      	movs	r3, #0
 8002884:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800288e:	d301      	bcc.n	8002894 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8002890:	2300      	movs	r3, #0
 8002892:	e0f7      	b.n	8002a84 <parse_object+0x210>
    }
    input_buffer->depth++;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80db 	beq.w	8002a5c <parse_object+0x1e8>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	f080 80d4 	bcs.w	8002a5c <parse_object+0x1e8>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	4413      	add	r3, r2
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b7b      	cmp	r3, #123	@ 0x7b
 80028c2:	f040 80cb 	bne.w	8002a5c <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80028d0:	6838      	ldr	r0, [r7, #0]
 80028d2:	f7ff fae3 	bl	8001e9c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00e      	beq.n	80028fa <parse_object+0x86>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d208      	bcs.n	80028fa <parse_object+0x86>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	4413      	add	r3, r2
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b7d      	cmp	r3, #125	@ 0x7d
 80028f6:	f000 8098 	beq.w	8002a2a <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <parse_object+0x98>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	429a      	cmp	r2, r3
 800290a:	d305      	bcc.n	8002918 <parse_object+0xa4>
    {
        input_buffer->offset--;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	1e5a      	subs	r2, r3, #1
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	609a      	str	r2, [r3, #8]
        goto fail;
 8002916:	e0ae      	b.n	8002a76 <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	1e5a      	subs	r2, r3, #1
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	3310      	adds	r3, #16
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fbb6 	bl	8001098 <cJSON_New_Item>
 800292c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 8095 	beq.w	8002a60 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d104      	bne.n	8002946 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	e007      	b.n	8002956 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 8083 	beq.w	8002a64 <parse_object+0x1f0>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	429a      	cmp	r2, r3
 800296a:	d27b      	bcs.n	8002a64 <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002976:	6838      	ldr	r0, [r7, #0]
 8002978:	f7ff fa90 	bl	8001e9c <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800297c:	6839      	ldr	r1, [r7, #0]
 800297e:	6938      	ldr	r0, [r7, #16]
 8002980:	f7ff f804 	bl	800198c <parse_string>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d06e      	beq.n	8002a68 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800298a:	6838      	ldr	r0, [r7, #0]
 800298c:	f7ff fa86 	bl	8001e9c <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	2200      	movs	r2, #0
 800299c:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d063      	beq.n	8002a6c <parse_object+0x1f8>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d25d      	bcs.n	8002a6c <parse_object+0x1f8>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	4413      	add	r3, r2
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b3a      	cmp	r3, #58	@ 0x3a
 80029be:	d155      	bne.n	8002a6c <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80029ca:	6838      	ldr	r0, [r7, #0]
 80029cc:	f7ff fa66 	bl	8001e9c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80029d0:	6839      	ldr	r1, [r7, #0]
 80029d2:	6938      	ldr	r0, [r7, #16]
 80029d4:	f7ff fc34 	bl	8002240 <parse_value>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d048      	beq.n	8002a70 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80029de:	6838      	ldr	r0, [r7, #0]
 80029e0:	f7ff fa5c 	bl	8001e9c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00d      	beq.n	8002a06 <parse_object+0x192>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d207      	bcs.n	8002a06 <parse_object+0x192>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	4413      	add	r3, r2
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b2c      	cmp	r3, #44	@ 0x2c
 8002a04:	d08d      	beq.n	8002922 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d033      	beq.n	8002a74 <parse_object+0x200>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d22d      	bcs.n	8002a74 <parse_object+0x200>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	4413      	add	r3, r2
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b7d      	cmp	r3, #125	@ 0x7d
 8002a26:	d125      	bne.n	8002a74 <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 8002a28:	e000      	b.n	8002a2c <parse_object+0x1b8>
        goto success; /* empty object */
 8002a2a:	bf00      	nop
    input_buffer->depth--;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	1e5a      	subs	r2, r3, #1
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <parse_object+0x1ce>
        head->prev = current_item;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2240      	movs	r2, #64	@ 0x40
 8002a46:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	609a      	str	r2, [r3, #8]
    return true;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e013      	b.n	8002a84 <parse_object+0x210>
        goto fail; /* not an object */
 8002a5c:	bf00      	nop
 8002a5e:	e00a      	b.n	8002a76 <parse_object+0x202>
            goto fail; /* allocation failure */
 8002a60:	bf00      	nop
 8002a62:	e008      	b.n	8002a76 <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 8002a64:	bf00      	nop
 8002a66:	e006      	b.n	8002a76 <parse_object+0x202>
            goto fail; /* failed to parse name */
 8002a68:	bf00      	nop
 8002a6a:	e004      	b.n	8002a76 <parse_object+0x202>
            goto fail; /* invalid object */
 8002a6c:	bf00      	nop
 8002a6e:	e002      	b.n	8002a76 <parse_object+0x202>
            goto fail; /* failed to parse value */
 8002a70:	bf00      	nop
 8002a72:	e000      	b.n	8002a76 <parse_object+0x202>
        goto fail; /* expected end of object */
 8002a74:	bf00      	nop

fail:
    if (head != NULL)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <parse_object+0x20e>
    {
        cJSON_Delete(head);
 8002a7c:	6978      	ldr	r0, [r7, #20]
 8002a7e:	f7fe fb21 	bl	80010c4 <cJSON_Delete>
    }

    return false;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <print_object+0x22>
    {
        return false;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e108      	b.n	8002cc0 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <print_object+0x2e>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e000      	b.n	8002abc <print_object+0x30>
 8002aba:	2301      	movs	r3, #1
 8002abc:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	6838      	ldr	r0, [r7, #0]
 8002ac6:	f7fe fc23 	bl	8001310 <ensure>
 8002aca:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <print_object+0x4a>
    {
        return false;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e0f4      	b.n	8002cc0 <print_object+0x234>
    }

    *output_pointer++ = '{';
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	61fa      	str	r2, [r7, #28]
 8002adc:	227b      	movs	r2, #123	@ 0x7b
 8002ade:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d004      	beq.n	8002afc <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	61fa      	str	r2, [r7, #28]
 8002af8:	220a      	movs	r2, #10
 8002afa:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	441a      	add	r2, r3
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	609a      	str	r2, [r3, #8]

    while (current_item)
 8002b08:	e0a0      	b.n	8002c4c <print_object+0x1c0>
    {
        if (output_buffer->format)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d022      	beq.n	8002b58 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	4619      	mov	r1, r3
 8002b18:	6838      	ldr	r0, [r7, #0]
 8002b1a:	f7fe fbf9 	bl	8001310 <ensure>
 8002b1e:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <print_object+0x9e>
            {
                return false;
 8002b26:	2300      	movs	r3, #0
 8002b28:	e0ca      	b.n	8002cc0 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	e007      	b.n	8002b40 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	61fa      	str	r2, [r7, #28]
 8002b36:	2209      	movs	r2, #9
 8002b38:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d3f2      	bcc.n	8002b30 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	441a      	add	r2, r3
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	6839      	ldr	r1, [r7, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff f85c 	bl	8001c1c <print_string_ptr>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <print_object+0xe2>
        {
            return false;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	e0a8      	b.n	8002cc0 <print_object+0x234>
        }
        update_offset(output_buffer);
 8002b6e:	6838      	ldr	r0, [r7, #0]
 8002b70:	f7fe fc68 	bl	8001444 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <print_object+0xf4>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e000      	b.n	8002b82 <print_object+0xf6>
 8002b80:	2301      	movs	r3, #1
 8002b82:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8002b84:	68f9      	ldr	r1, [r7, #12]
 8002b86:	6838      	ldr	r0, [r7, #0]
 8002b88:	f7fe fbc2 	bl	8001310 <ensure>
 8002b8c:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <print_object+0x10c>
        {
            return false;
 8002b94:	2300      	movs	r3, #0
 8002b96:	e093      	b.n	8002cc0 <print_object+0x234>
        }
        *output_pointer++ = ':';
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	61fa      	str	r2, [r7, #28]
 8002b9e:	223a      	movs	r2, #58	@ 0x3a
 8002ba0:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d004      	beq.n	8002bb4 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	61fa      	str	r2, [r7, #28]
 8002bb0:	2209      	movs	r2, #9
 8002bb2:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	441a      	add	r2, r3
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8002bc0:	6839      	ldr	r1, [r7, #0]
 8002bc2:	69b8      	ldr	r0, [r7, #24]
 8002bc4:	f7ff fc28 	bl	8002418 <print_value>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <print_object+0x146>
        {
            return false;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	e076      	b.n	8002cc0 <print_object+0x234>
        }
        update_offset(output_buffer);
 8002bd2:	6838      	ldr	r0, [r7, #0]
 8002bd4:	f7fe fc36 	bl	8001444 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <print_object+0x158>
 8002be0:	2201      	movs	r2, #1
 8002be2:	e000      	b.n	8002be6 <print_object+0x15a>
 8002be4:	2200      	movs	r2, #0
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <print_object+0x166>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <print_object+0x168>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	4413      	add	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	6838      	ldr	r0, [r7, #0]
 8002c00:	f7fe fb86 	bl	8001310 <ensure>
 8002c04:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <print_object+0x184>
        {
            return false;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e057      	b.n	8002cc0 <print_object+0x234>
        }
        if (current_item->next)
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d004      	beq.n	8002c22 <print_object+0x196>
        {
            *output_pointer++ = ',';
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	61fa      	str	r2, [r7, #28]
 8002c1e:	222c      	movs	r2, #44	@ 0x2c
 8002c20:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d004      	beq.n	8002c34 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	61fa      	str	r2, [r7, #28]
 8002c30:	220a      	movs	r2, #10
 8002c32:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	2200      	movs	r2, #0
 8002c38:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	441a      	add	r2, r3
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f47f af5b 	bne.w	8002b0a <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <print_object+0x1d8>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	3301      	adds	r3, #1
 8002c62:	e000      	b.n	8002c66 <print_object+0x1da>
 8002c64:	2302      	movs	r3, #2
 8002c66:	4619      	mov	r1, r3
 8002c68:	6838      	ldr	r0, [r7, #0]
 8002c6a:	f7fe fb51 	bl	8001310 <ensure>
 8002c6e:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <print_object+0x1ee>
    {
        return false;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e022      	b.n	8002cc0 <print_object+0x234>
    }
    if (output_buffer->format)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d010      	beq.n	8002ca4 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002c82:	2300      	movs	r3, #0
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	e007      	b.n	8002c98 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	61fa      	str	r2, [r7, #28]
 8002c8e:	2209      	movs	r2, #9
 8002c90:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	3301      	adds	r3, #1
 8002c96:	613b      	str	r3, [r7, #16]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d3f1      	bcc.n	8002c88 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	61fa      	str	r2, [r7, #28]
 8002caa:	227d      	movs	r2, #125	@ 0x7d
 8002cac:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	1e5a      	subs	r2, r3, #1
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	60da      	str	r2, [r3, #12]

    return true;
 8002cbe:	2301      	movs	r3, #1
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3720      	adds	r7, #32
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <get_object_item+0x1c>
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <get_object_item+0x20>
    {
        return NULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	e033      	b.n	8002d50 <get_object_item+0x88>
    }

    current_element = object->child;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d017      	beq.n	8002d24 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002cf4:	e002      	b.n	8002cfc <get_object_item+0x34>
        {
            current_element = current_element->next;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d01c      	beq.n	8002d3c <get_object_item+0x74>
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d018      	beq.n	8002d3c <get_object_item+0x74>
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	4619      	mov	r1, r3
 8002d10:	68b8      	ldr	r0, [r7, #8]
 8002d12:	f7fd fa85 	bl	8000220 <strcmp>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1ec      	bne.n	8002cf6 <get_object_item+0x2e>
 8002d1c:	e00e      	b.n	8002d3c <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d008      	beq.n	8002d3c <get_object_item+0x74>
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	4619      	mov	r1, r3
 8002d30:	68b8      	ldr	r0, [r7, #8]
 8002d32:	f7fe f945 	bl	8000fc0 <case_insensitive_strcmp>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f0      	bne.n	8002d1e <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <get_object_item+0x82>
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <get_object_item+0x86>
        return NULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	e000      	b.n	8002d50 <get_object_item+0x88>
    }

    return current_element;
 8002d4e:	697b      	ldr	r3, [r7, #20]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 8002d62:	2201      	movs	r2, #1
 8002d64:	6839      	ldr	r1, [r7, #0]
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7ff ffae 	bl	8002cc8 <get_object_item>
 8002d6c:	4603      	mov	r3, r0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <cJSON_IsNumber+0x12>
    {
        return false;
 8002d84:	2300      	movs	r3, #0
 8002d86:	e007      	b.n	8002d98 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	bf0c      	ite	eq
 8002d92:	2301      	moveq	r3, #1
 8002d94:	2300      	movne	r3, #0
 8002d96:	b2db      	uxtb	r3, r3
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <cJSON_IsString+0x12>
    {
        return false;
 8002db2:	2300      	movs	r3, #0
 8002db4:	e007      	b.n	8002dc6 <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b10      	cmp	r3, #16
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dda:	f000 fc0d 	bl	80035f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dde:	f000 f84b 	bl	8002e78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002de2:	f000 f8d3 	bl	8002f8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002de6:	f000 f8a7 	bl	8002f38 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Simulate receiving JSON message
   process_json_message(jsonEx);
 8002dea:	4b1d      	ldr	r3, [pc, #116]	@ (8002e60 <main+0x8c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 f8fc 	bl	8002fec <process_json_message>

   for (int i = 0; i < eventCount; i++)
 8002df4:	2300      	movs	r3, #0
 8002df6:	607b      	str	r3, [r7, #4]
 8002df8:	e02b      	b.n	8002e52 <main+0x7e>
   {
	   send_uart_message(events[i].melodyName);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	22cc      	movs	r2, #204	@ 0xcc
 8002dfe:	fb02 f303 	mul.w	r3, r2, r3
 8002e02:	4a18      	ldr	r2, [pc, #96]	@ (8002e64 <main+0x90>)
 8002e04:	4413      	add	r3, r2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 f8da 	bl	8002fc0 <send_uart_message>
	   send_uart_message("\n");
 8002e0c:	4816      	ldr	r0, [pc, #88]	@ (8002e68 <main+0x94>)
 8002e0e:	f000 f8d7 	bl	8002fc0 <send_uart_message>
	   sprintf(buf, "%d\r\n", events[i].melodyNumber);
 8002e12:	4a14      	ldr	r2, [pc, #80]	@ (8002e64 <main+0x90>)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	21cc      	movs	r1, #204	@ 0xcc
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3364      	adds	r3, #100	@ 0x64
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	4911      	ldr	r1, [pc, #68]	@ (8002e6c <main+0x98>)
 8002e26:	4812      	ldr	r0, [pc, #72]	@ (8002e70 <main+0x9c>)
 8002e28:	f002 f902 	bl	8005030 <siprintf>
	   send_uart_message(buf);
 8002e2c:	4810      	ldr	r0, [pc, #64]	@ (8002e70 <main+0x9c>)
 8002e2e:	f000 f8c7 	bl	8002fc0 <send_uart_message>
	   send_uart_message(events[i].time);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	22cc      	movs	r2, #204	@ 0xcc
 8002e36:	fb02 f303 	mul.w	r3, r2, r3
 8002e3a:	3368      	adds	r3, #104	@ 0x68
 8002e3c:	4a09      	ldr	r2, [pc, #36]	@ (8002e64 <main+0x90>)
 8002e3e:	4413      	add	r3, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 f8bd 	bl	8002fc0 <send_uart_message>
	   send_uart_message("\n");
 8002e46:	4808      	ldr	r0, [pc, #32]	@ (8002e68 <main+0x94>)
 8002e48:	f000 f8ba 	bl	8002fc0 <send_uart_message>
   for (int i = 0; i < eventCount; i++)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	607b      	str	r3, [r7, #4]
 8002e52:	4b08      	ldr	r3, [pc, #32]	@ (8002e74 <main+0xa0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	dbce      	blt.n	8002dfa <main+0x26>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002e5c:	bf00      	nop
 8002e5e:	e7fd      	b.n	8002e5c <main+0x88>
 8002e60:	2000000c 	.word	0x2000000c
 8002e64:	20000650 	.word	0x20000650
 8002e68:	08009210 	.word	0x08009210
 8002e6c:	08009214 	.word	0x08009214
 8002e70:	20000250 	.word	0x20000250
 8002e74:	20005600 	.word	0x20005600

08002e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b094      	sub	sp, #80	@ 0x50
 8002e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e7e:	f107 031c 	add.w	r3, r7, #28
 8002e82:	2234      	movs	r2, #52	@ 0x34
 8002e84:	2100      	movs	r1, #0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f003 f927 	bl	80060da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e8c:	f107 0308 	add.w	r3, r7, #8
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	60da      	str	r2, [r3, #12]
 8002e9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	607b      	str	r3, [r7, #4]
 8002ea0:	4b23      	ldr	r3, [pc, #140]	@ (8002f30 <SystemClock_Config+0xb8>)
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea4:	4a22      	ldr	r2, [pc, #136]	@ (8002f30 <SystemClock_Config+0xb8>)
 8002ea6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eaa:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eac:	4b20      	ldr	r3, [pc, #128]	@ (8002f30 <SystemClock_Config+0xb8>)
 8002eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb4:	607b      	str	r3, [r7, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002eb8:	2300      	movs	r3, #0
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8002f34 <SystemClock_Config+0xbc>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8002f34 <SystemClock_Config+0xbc>)
 8002ec6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	4b19      	ldr	r3, [pc, #100]	@ (8002f34 <SystemClock_Config+0xbc>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002ed4:	603b      	str	r3, [r7, #0]
 8002ed6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002edc:	2301      	movs	r3, #1
 8002ede:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ee8:	f107 031c 	add.w	r3, r7, #28
 8002eec:	4618      	mov	r0, r3
 8002eee:	f001 f933 	bl	8004158 <HAL_RCC_OscConfig>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002ef8:	f000 f9d6 	bl	80032a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002efc:	230f      	movs	r3, #15
 8002efe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f04:	2300      	movs	r3, #0
 8002f06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002f10:	f107 0308 	add.w	r3, r7, #8
 8002f14:	2100      	movs	r1, #0
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fe5a 	bl	8003bd0 <HAL_RCC_ClockConfig>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002f22:	f000 f9c1 	bl	80032a8 <Error_Handler>
  }
}
 8002f26:	bf00      	nop
 8002f28:	3750      	adds	r7, #80	@ 0x50
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40007000 	.word	0x40007000

08002f38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f3c:	4b11      	ldr	r3, [pc, #68]	@ (8002f84 <MX_USART2_UART_Init+0x4c>)
 8002f3e:	4a12      	ldr	r2, [pc, #72]	@ (8002f88 <MX_USART2_UART_Init+0x50>)
 8002f40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002f42:	4b10      	ldr	r3, [pc, #64]	@ (8002f84 <MX_USART2_UART_Init+0x4c>)
 8002f44:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002f48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f84 <MX_USART2_UART_Init+0x4c>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f50:	4b0c      	ldr	r3, [pc, #48]	@ (8002f84 <MX_USART2_UART_Init+0x4c>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f56:	4b0b      	ldr	r3, [pc, #44]	@ (8002f84 <MX_USART2_UART_Init+0x4c>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f5c:	4b09      	ldr	r3, [pc, #36]	@ (8002f84 <MX_USART2_UART_Init+0x4c>)
 8002f5e:	220c      	movs	r2, #12
 8002f60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f62:	4b08      	ldr	r3, [pc, #32]	@ (8002f84 <MX_USART2_UART_Init+0x4c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f68:	4b06      	ldr	r3, [pc, #24]	@ (8002f84 <MX_USART2_UART_Init+0x4c>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f6e:	4805      	ldr	r0, [pc, #20]	@ (8002f84 <MX_USART2_UART_Init+0x4c>)
 8002f70:	f001 fb90 	bl	8004694 <HAL_UART_Init>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f7a:	f000 f995 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f7e:	bf00      	nop
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000208 	.word	0x20000208
 8002f88:	40004400 	.word	0x40004400

08002f8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	607b      	str	r3, [r7, #4]
 8002f96:	4b09      	ldr	r3, [pc, #36]	@ (8002fbc <MX_GPIO_Init+0x30>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9a:	4a08      	ldr	r2, [pc, #32]	@ (8002fbc <MX_GPIO_Init+0x30>)
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fa2:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <MX_GPIO_Init+0x30>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	607b      	str	r3, [r7, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40023800 	.word	0x40023800

08002fc0 <send_uart_message>:

/* USER CODE BEGIN 4 */

void send_uart_message(char *message) {
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7fd f921 	bl	8000210 <strlen>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4803      	ldr	r0, [pc, #12]	@ (8002fe8 <send_uart_message+0x28>)
 8002fda:	f001 fbab 	bl	8004734 <HAL_UART_Transmit>
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	20000208 	.word	0x20000208

08002fec <process_json_message>:

/**
 * @brief Parse and save the event in the array
 * @param message, pointer to the string parsed as a json
 */
void process_json_message(const char *event) {
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b0c2      	sub	sp, #264	@ 0x108
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002ff6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002ffa:	6018      	str	r0, [r3, #0]
	const cJSON *documents = NULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
	const cJSON *document = NULL;
 8003002:	2300      	movs	r3, #0
 8003004:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	const cJSON *fields = NULL;
 8003008:	2300      	movs	r3, #0
 800300a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
	const cJSON *field = NULL;
 800300e:	2300      	movs	r3, #0
 8003010:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    cJSON *event_json = cJSON_Parse(event);
 8003014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003018:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800301c:	6818      	ldr	r0, [r3, #0]
 800301e:	f7ff f867 	bl	80020f0 <cJSON_Parse>
 8003022:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
    if (event_json == NULL)
 8003026:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d112      	bne.n	8003054 <process_json_message+0x68>
    {
        const char *error_ptr = cJSON_GetErrorPtr();
 800302e:	f7fd ffb9 	bl	8000fa4 <cJSON_GetErrorPtr>
 8003032:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
        if (error_ptr != NULL)
 8003036:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 8109 	beq.w	8003252 <process_json_message+0x266>
        {
            fprintf(stderr, "Error before: %s\n", error_ptr);
 8003040:	4b89      	ldr	r3, [pc, #548]	@ (8003268 <process_json_message+0x27c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800304a:	4988      	ldr	r1, [pc, #544]	@ (800326c <process_json_message+0x280>)
 800304c:	4618      	mov	r0, r3
 800304e:	f002 f92b 	bl	80052a8 <fiprintf>
        }
        goto end;
 8003052:	e0fe      	b.n	8003252 <process_json_message+0x266>
    }

    char *string = cJSON_Print(event_json);
 8003054:	f8d7 00f0 	ldr.w	r0, [r7, #240]	@ 0xf0
 8003058:	f7ff f8e2 	bl	8002220 <cJSON_Print>
 800305c:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
    // send_uart_message(string);

    documents = cJSON_GetObjectItemCaseSensitive(event_json, "documents");
 8003060:	4983      	ldr	r1, [pc, #524]	@ (8003270 <process_json_message+0x284>)
 8003062:	f8d7 00f0 	ldr.w	r0, [r7, #240]	@ 0xf0
 8003066:	f7ff fe77 	bl	8002d58 <cJSON_GetObjectItemCaseSensitive>
 800306a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
        cJSON_ArrayForEach(document, documents)
 800306e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <process_json_message+0x92>
 8003076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	e000      	b.n	8003080 <process_json_message+0x94>
 800307e:	2300      	movs	r3, #0
 8003080:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003084:	e0df      	b.n	8003246 <process_json_message+0x25a>
        {
            fields = cJSON_GetObjectItemCaseSensitive(document, "fields");
 8003086:	497b      	ldr	r1, [pc, #492]	@ (8003274 <process_json_message+0x288>)
 8003088:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 800308c:	f7ff fe64 	bl	8002d58 <cJSON_GetObjectItemCaseSensitive>
 8003090:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8

            char melodyNameString[MAX_STRING_SIZE] = {0};
 8003094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003098:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	3304      	adds	r3, #4
 80030a2:	2260      	movs	r2, #96	@ 0x60
 80030a4:	2100      	movs	r1, #0
 80030a6:	4618      	mov	r0, r3
 80030a8:	f003 f817 	bl	80060da <memset>
			int melodyNumberInt = 0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
			char timeString[MAX_STRING_SIZE] = {0};
 80030b2:	2300      	movs	r3, #0
 80030b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80030b6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80030ba:	2260      	movs	r2, #96	@ 0x60
 80030bc:	2100      	movs	r1, #0
 80030be:	4618      	mov	r0, r3
 80030c0:	f003 f80b 	bl	80060da <memset>

            // Melody name
            cJSON *melodyName = cJSON_GetObjectItemCaseSensitive(fields, "melodyName");
 80030c4:	496c      	ldr	r1, [pc, #432]	@ (8003278 <process_json_message+0x28c>)
 80030c6:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 80030ca:	f7ff fe45 	bl	8002d58 <cJSON_GetObjectItemCaseSensitive>
 80030ce:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
			cJSON *melodyNameValue = cJSON_GetObjectItemCaseSensitive(melodyName, "stringValue");
 80030d2:	496a      	ldr	r1, [pc, #424]	@ (800327c <process_json_message+0x290>)
 80030d4:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 80030d8:	f7ff fe3e 	bl	8002d58 <cJSON_GetObjectItemCaseSensitive>
 80030dc:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
			if (cJSON_IsString(melodyNameValue) && melodyNameValue->valuestring != NULL)
 80030e0:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 80030e4:	f7ff fe5e 	bl	8002da4 <cJSON_IsString>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00d      	beq.n	800310a <process_json_message+0x11e>
 80030ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d008      	beq.n	800310a <process_json_message+0x11e>
			{
				strncpy(melodyNameString, melodyNameValue->valuestring, MAX_STRING_SIZE - 1);
 80030f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030fc:	6919      	ldr	r1, [r3, #16]
 80030fe:	f107 0308 	add.w	r3, r7, #8
 8003102:	2263      	movs	r2, #99	@ 0x63
 8003104:	4618      	mov	r0, r3
 8003106:	f002 ffd5 	bl	80060b4 <strncpy>
			}

            send_uart_message("Melody name: ");
 800310a:	485d      	ldr	r0, [pc, #372]	@ (8003280 <process_json_message+0x294>)
 800310c:	f7ff ff58 	bl	8002fc0 <send_uart_message>
            send_uart_message(cJSON_Print(melodyNameValue));
 8003110:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8003114:	f7ff f884 	bl	8002220 <cJSON_Print>
 8003118:	4603      	mov	r3, r0
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff ff50 	bl	8002fc0 <send_uart_message>
            send_uart_message("\n");
 8003120:	4858      	ldr	r0, [pc, #352]	@ (8003284 <process_json_message+0x298>)
 8003122:	f7ff ff4d 	bl	8002fc0 <send_uart_message>

			// Melody number
			cJSON *melodyNumber = cJSON_GetObjectItemCaseSensitive(fields, "melodyNumber");
 8003126:	4958      	ldr	r1, [pc, #352]	@ (8003288 <process_json_message+0x29c>)
 8003128:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 800312c:	f7ff fe14 	bl	8002d58 <cJSON_GetObjectItemCaseSensitive>
 8003130:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
			cJSON *melodyNumberValue = cJSON_GetObjectItemCaseSensitive(melodyNumber, "integerValue");
 8003134:	4955      	ldr	r1, [pc, #340]	@ (800328c <process_json_message+0x2a0>)
 8003136:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 800313a:	f7ff fe0d 	bl	8002d58 <cJSON_GetObjectItemCaseSensitive>
 800313e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
			if (cJSON_IsNumber(melodyNumberValue))
 8003142:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8003146:	f7ff fe16 	bl	8002d76 <cJSON_IsNumber>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d007      	beq.n	8003160 <process_json_message+0x174>
			{
				melodyNumberInt = atoi(melodyNumberValue->valuestring);
 8003150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	4618      	mov	r0, r3
 8003158:	f001 fea8 	bl	8004eac <atoi>
 800315c:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
			}

            send_uart_message("Melody number: ");
 8003160:	484b      	ldr	r0, [pc, #300]	@ (8003290 <process_json_message+0x2a4>)
 8003162:	f7ff ff2d 	bl	8002fc0 <send_uart_message>
            send_uart_message(cJSON_Print(melodyNumberValue));
 8003166:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800316a:	f7ff f859 	bl	8002220 <cJSON_Print>
 800316e:	4603      	mov	r3, r0
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff ff25 	bl	8002fc0 <send_uart_message>
            send_uart_message("\n");
 8003176:	4843      	ldr	r0, [pc, #268]	@ (8003284 <process_json_message+0x298>)
 8003178:	f7ff ff22 	bl	8002fc0 <send_uart_message>

			// Time
            cJSON *time = cJSON_GetObjectItemCaseSensitive(fields, "time");
 800317c:	4945      	ldr	r1, [pc, #276]	@ (8003294 <process_json_message+0x2a8>)
 800317e:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 8003182:	f7ff fde9 	bl	8002d58 <cJSON_GetObjectItemCaseSensitive>
 8003186:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            cJSON *timeValue = cJSON_GetObjectItemCaseSensitive(time, "timestampValue");
 800318a:	4943      	ldr	r1, [pc, #268]	@ (8003298 <process_json_message+0x2ac>)
 800318c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8003190:	f7ff fde2 	bl	8002d58 <cJSON_GetObjectItemCaseSensitive>
 8003194:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

            if (cJSON_IsString(timeValue) && timeValue->string != NULL)
 8003198:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 800319c:	f7ff fe02 	bl	8002da4 <cJSON_IsString>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00d      	beq.n	80031c2 <process_json_message+0x1d6>
 80031a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <process_json_message+0x1d6>
            {
            	strncpy(timeString, timeValue->valuestring, MAX_STRING_SIZE - 1);
 80031b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031b4:	6919      	ldr	r1, [r3, #16]
 80031b6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80031ba:	2263      	movs	r2, #99	@ 0x63
 80031bc:	4618      	mov	r0, r3
 80031be:	f002 ff79 	bl	80060b4 <strncpy>
            }

            send_uart_message("Time: ");
 80031c2:	4836      	ldr	r0, [pc, #216]	@ (800329c <process_json_message+0x2b0>)
 80031c4:	f7ff fefc 	bl	8002fc0 <send_uart_message>
            send_uart_message(cJSON_Print(timeValue));
 80031c8:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 80031cc:	f7ff f828 	bl	8002220 <cJSON_Print>
 80031d0:	4603      	mov	r3, r0
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff fef4 	bl	8002fc0 <send_uart_message>
            send_uart_message("\n");
 80031d8:	482a      	ldr	r0, [pc, #168]	@ (8003284 <process_json_message+0x298>)
 80031da:	f7ff fef1 	bl	8002fc0 <send_uart_message>

            // Create an event and add it to the array
			if (eventCount < MAX_EVENTS)
 80031de:	4b30      	ldr	r3, [pc, #192]	@ (80032a0 <process_json_message+0x2b4>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b63      	cmp	r3, #99	@ 0x63
 80031e4:	dc2a      	bgt.n	800323c <process_json_message+0x250>
			{
				strncpy(events[eventCount].melodyName, melodyNameString, MAX_STRING_SIZE - 1);
 80031e6:	4b2e      	ldr	r3, [pc, #184]	@ (80032a0 <process_json_message+0x2b4>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	22cc      	movs	r2, #204	@ 0xcc
 80031ec:	fb02 f303 	mul.w	r3, r2, r3
 80031f0:	4a2c      	ldr	r2, [pc, #176]	@ (80032a4 <process_json_message+0x2b8>)
 80031f2:	4413      	add	r3, r2
 80031f4:	f107 0108 	add.w	r1, r7, #8
 80031f8:	2263      	movs	r2, #99	@ 0x63
 80031fa:	4618      	mov	r0, r3
 80031fc:	f002 ff5a 	bl	80060b4 <strncpy>
				events[eventCount].melodyNumber = melodyNumberInt;
 8003200:	4b27      	ldr	r3, [pc, #156]	@ (80032a0 <process_json_message+0x2b4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a27      	ldr	r2, [pc, #156]	@ (80032a4 <process_json_message+0x2b8>)
 8003206:	21cc      	movs	r1, #204	@ 0xcc
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	4413      	add	r3, r2
 800320e:	3364      	adds	r3, #100	@ 0x64
 8003210:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8003214:	601a      	str	r2, [r3, #0]
				strncpy(events[eventCount].time, timeString, MAX_STRING_SIZE - 1);
 8003216:	4b22      	ldr	r3, [pc, #136]	@ (80032a0 <process_json_message+0x2b4>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	22cc      	movs	r2, #204	@ 0xcc
 800321c:	fb02 f303 	mul.w	r3, r2, r3
 8003220:	3368      	adds	r3, #104	@ 0x68
 8003222:	4a20      	ldr	r2, [pc, #128]	@ (80032a4 <process_json_message+0x2b8>)
 8003224:	4413      	add	r3, r2
 8003226:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800322a:	2263      	movs	r2, #99	@ 0x63
 800322c:	4618      	mov	r0, r3
 800322e:	f002 ff41 	bl	80060b4 <strncpy>
				eventCount++;
 8003232:	4b1b      	ldr	r3, [pc, #108]	@ (80032a0 <process_json_message+0x2b4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3301      	adds	r3, #1
 8003238:	4a19      	ldr	r2, [pc, #100]	@ (80032a0 <process_json_message+0x2b4>)
 800323a:	6013      	str	r3, [r2, #0]
        cJSON_ArrayForEach(document, documents)
 800323c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800324a:	2b00      	cmp	r3, #0
 800324c:	f47f af1b 	bne.w	8003086 <process_json_message+0x9a>
			}
        }

    end:
 8003250:	e000      	b.n	8003254 <process_json_message+0x268>
        goto end;
 8003252:	bf00      	nop
        cJSON_Delete(event_json);
 8003254:	f8d7 00f0 	ldr.w	r0, [r7, #240]	@ 0xf0
 8003258:	f7fd ff34 	bl	80010c4 <cJSON_Delete>
        return;
 800325c:	bf00      	nop
}
 800325e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000194 	.word	0x20000194
 800326c:	0800921c 	.word	0x0800921c
 8003270:	08009230 	.word	0x08009230
 8003274:	0800923c 	.word	0x0800923c
 8003278:	08009244 	.word	0x08009244
 800327c:	08009250 	.word	0x08009250
 8003280:	0800925c 	.word	0x0800925c
 8003284:	08009210 	.word	0x08009210
 8003288:	0800926c 	.word	0x0800926c
 800328c:	0800927c 	.word	0x0800927c
 8003290:	0800928c 	.word	0x0800928c
 8003294:	0800929c 	.word	0x0800929c
 8003298:	080092a4 	.word	0x080092a4
 800329c:	080092b4 	.word	0x080092b4
 80032a0:	20005600 	.word	0x20005600
 80032a4:	20000650 	.word	0x20000650

080032a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032ac:	b672      	cpsid	i
}
 80032ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032b0:	bf00      	nop
 80032b2:	e7fd      	b.n	80032b0 <Error_Handler+0x8>

080032b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	607b      	str	r3, [r7, #4]
 80032be:	4b10      	ldr	r3, [pc, #64]	@ (8003300 <HAL_MspInit+0x4c>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c2:	4a0f      	ldr	r2, [pc, #60]	@ (8003300 <HAL_MspInit+0x4c>)
 80032c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80032ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003300 <HAL_MspInit+0x4c>)
 80032cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032d2:	607b      	str	r3, [r7, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	603b      	str	r3, [r7, #0]
 80032da:	4b09      	ldr	r3, [pc, #36]	@ (8003300 <HAL_MspInit+0x4c>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032de:	4a08      	ldr	r2, [pc, #32]	@ (8003300 <HAL_MspInit+0x4c>)
 80032e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80032e6:	4b06      	ldr	r3, [pc, #24]	@ (8003300 <HAL_MspInit+0x4c>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ee:	603b      	str	r3, [r7, #0]
 80032f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40023800 	.word	0x40023800

08003304 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08a      	sub	sp, #40	@ 0x28
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800330c:	f107 0314 	add.w	r3, r7, #20
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	605a      	str	r2, [r3, #4]
 8003316:	609a      	str	r2, [r3, #8]
 8003318:	60da      	str	r2, [r3, #12]
 800331a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a19      	ldr	r2, [pc, #100]	@ (8003388 <HAL_UART_MspInit+0x84>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d12b      	bne.n	800337e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	4b18      	ldr	r3, [pc, #96]	@ (800338c <HAL_UART_MspInit+0x88>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332e:	4a17      	ldr	r2, [pc, #92]	@ (800338c <HAL_UART_MspInit+0x88>)
 8003330:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003334:	6413      	str	r3, [r2, #64]	@ 0x40
 8003336:	4b15      	ldr	r3, [pc, #84]	@ (800338c <HAL_UART_MspInit+0x88>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	4b11      	ldr	r3, [pc, #68]	@ (800338c <HAL_UART_MspInit+0x88>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	4a10      	ldr	r2, [pc, #64]	@ (800338c <HAL_UART_MspInit+0x88>)
 800334c:	f043 0301 	orr.w	r3, r3, #1
 8003350:	6313      	str	r3, [r2, #48]	@ 0x30
 8003352:	4b0e      	ldr	r3, [pc, #56]	@ (800338c <HAL_UART_MspInit+0x88>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800335e:	230c      	movs	r3, #12
 8003360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003362:	2302      	movs	r3, #2
 8003364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003366:	2300      	movs	r3, #0
 8003368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800336a:	2303      	movs	r3, #3
 800336c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800336e:	2307      	movs	r3, #7
 8003370:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003372:	f107 0314 	add.w	r3, r7, #20
 8003376:	4619      	mov	r1, r3
 8003378:	4805      	ldr	r0, [pc, #20]	@ (8003390 <HAL_UART_MspInit+0x8c>)
 800337a:	f000 fa95 	bl	80038a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800337e:	bf00      	nop
 8003380:	3728      	adds	r7, #40	@ 0x28
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40004400 	.word	0x40004400
 800338c:	40023800 	.word	0x40023800
 8003390:	40020000 	.word	0x40020000

08003394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003398:	bf00      	nop
 800339a:	e7fd      	b.n	8003398 <NMI_Handler+0x4>

0800339c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033a0:	bf00      	nop
 80033a2:	e7fd      	b.n	80033a0 <HardFault_Handler+0x4>

080033a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033a8:	bf00      	nop
 80033aa:	e7fd      	b.n	80033a8 <MemManage_Handler+0x4>

080033ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033b0:	bf00      	nop
 80033b2:	e7fd      	b.n	80033b0 <BusFault_Handler+0x4>

080033b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033b8:	bf00      	nop
 80033ba:	e7fd      	b.n	80033b8 <UsageFault_Handler+0x4>

080033bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033c0:	bf00      	nop
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033ca:	b480      	push	{r7}
 80033cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033ce:	bf00      	nop
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033dc:	bf00      	nop
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033ea:	f000 f957 	bl	800369c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033f2:	b480      	push	{r7}
 80033f4:	af00      	add	r7, sp, #0
  return 1;
 80033f6:	2301      	movs	r3, #1
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <_kill>:

int _kill(int pid, int sig)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800340c:	f002 fec4 	bl	8006198 <__errno>
 8003410:	4603      	mov	r3, r0
 8003412:	2216      	movs	r2, #22
 8003414:	601a      	str	r2, [r3, #0]
  return -1;
 8003416:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <_exit>:

void _exit (int status)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800342a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff ffe7 	bl	8003402 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003434:	bf00      	nop
 8003436:	e7fd      	b.n	8003434 <_exit+0x12>

08003438 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	e00a      	b.n	8003460 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800344a:	f3af 8000 	nop.w
 800344e:	4601      	mov	r1, r0
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	60ba      	str	r2, [r7, #8]
 8003456:	b2ca      	uxtb	r2, r1
 8003458:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	3301      	adds	r3, #1
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	429a      	cmp	r2, r3
 8003466:	dbf0      	blt.n	800344a <_read+0x12>
  }

  return len;
 8003468:	687b      	ldr	r3, [r7, #4]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b086      	sub	sp, #24
 8003476:	af00      	add	r7, sp, #0
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	e009      	b.n	8003498 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	60ba      	str	r2, [r7, #8]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	3301      	adds	r3, #1
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	429a      	cmp	r2, r3
 800349e:	dbf1      	blt.n	8003484 <_write+0x12>
  }
  return len;
 80034a0:	687b      	ldr	r3, [r7, #4]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <_close>:

int _close(int file)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034d2:	605a      	str	r2, [r3, #4]
  return 0;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <_isatty>:

int _isatty(int file)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034ea:	2301      	movs	r3, #1
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800351c:	4a14      	ldr	r2, [pc, #80]	@ (8003570 <_sbrk+0x5c>)
 800351e:	4b15      	ldr	r3, [pc, #84]	@ (8003574 <_sbrk+0x60>)
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003528:	4b13      	ldr	r3, [pc, #76]	@ (8003578 <_sbrk+0x64>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003530:	4b11      	ldr	r3, [pc, #68]	@ (8003578 <_sbrk+0x64>)
 8003532:	4a12      	ldr	r2, [pc, #72]	@ (800357c <_sbrk+0x68>)
 8003534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003536:	4b10      	ldr	r3, [pc, #64]	@ (8003578 <_sbrk+0x64>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4413      	add	r3, r2
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	429a      	cmp	r2, r3
 8003542:	d207      	bcs.n	8003554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003544:	f002 fe28 	bl	8006198 <__errno>
 8003548:	4603      	mov	r3, r0
 800354a:	220c      	movs	r2, #12
 800354c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800354e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003552:	e009      	b.n	8003568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003554:	4b08      	ldr	r3, [pc, #32]	@ (8003578 <_sbrk+0x64>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800355a:	4b07      	ldr	r3, [pc, #28]	@ (8003578 <_sbrk+0x64>)
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4413      	add	r3, r2
 8003562:	4a05      	ldr	r2, [pc, #20]	@ (8003578 <_sbrk+0x64>)
 8003564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003566:	68fb      	ldr	r3, [r7, #12]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	20020000 	.word	0x20020000
 8003574:	00000400 	.word	0x00000400
 8003578:	20005604 	.word	0x20005604
 800357c:	20005758 	.word	0x20005758

08003580 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003584:	4b06      	ldr	r3, [pc, #24]	@ (80035a0 <SystemInit+0x20>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800358a:	4a05      	ldr	r2, [pc, #20]	@ (80035a0 <SystemInit+0x20>)
 800358c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003590:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003594:	bf00      	nop
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	e000ed00 	.word	0xe000ed00

080035a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80035a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80035dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80035a8:	f7ff ffea 	bl	8003580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035ac:	480c      	ldr	r0, [pc, #48]	@ (80035e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80035ae:	490d      	ldr	r1, [pc, #52]	@ (80035e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80035b0:	4a0d      	ldr	r2, [pc, #52]	@ (80035e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80035b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035b4:	e002      	b.n	80035bc <LoopCopyDataInit>

080035b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035ba:	3304      	adds	r3, #4

080035bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035c0:	d3f9      	bcc.n	80035b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035c2:	4a0a      	ldr	r2, [pc, #40]	@ (80035ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80035c4:	4c0a      	ldr	r4, [pc, #40]	@ (80035f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80035c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035c8:	e001      	b.n	80035ce <LoopFillZerobss>

080035ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035cc:	3204      	adds	r2, #4

080035ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035d0:	d3fb      	bcc.n	80035ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80035d2:	f002 fde7 	bl	80061a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035d6:	f7ff fbfd 	bl	8002dd4 <main>
  bx  lr    
 80035da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80035e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035e4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80035e8:	080096cc 	.word	0x080096cc
  ldr r2, =_sbss
 80035ec:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80035f0:	20005758 	.word	0x20005758

080035f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035f4:	e7fe      	b.n	80035f4 <ADC_IRQHandler>
	...

080035f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003638 <HAL_Init+0x40>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a0d      	ldr	r2, [pc, #52]	@ (8003638 <HAL_Init+0x40>)
 8003602:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003606:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003608:	4b0b      	ldr	r3, [pc, #44]	@ (8003638 <HAL_Init+0x40>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a0a      	ldr	r2, [pc, #40]	@ (8003638 <HAL_Init+0x40>)
 800360e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003612:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003614:	4b08      	ldr	r3, [pc, #32]	@ (8003638 <HAL_Init+0x40>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a07      	ldr	r2, [pc, #28]	@ (8003638 <HAL_Init+0x40>)
 800361a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800361e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003620:	2003      	movs	r0, #3
 8003622:	f000 f90d 	bl	8003840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003626:	200f      	movs	r0, #15
 8003628:	f000 f808 	bl	800363c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800362c:	f7ff fe42 	bl	80032b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40023c00 	.word	0x40023c00

0800363c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003644:	4b12      	ldr	r3, [pc, #72]	@ (8003690 <HAL_InitTick+0x54>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	4b12      	ldr	r3, [pc, #72]	@ (8003694 <HAL_InitTick+0x58>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	4619      	mov	r1, r3
 800364e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003652:	fbb3 f3f1 	udiv	r3, r3, r1
 8003656:	fbb2 f3f3 	udiv	r3, r2, r3
 800365a:	4618      	mov	r0, r3
 800365c:	f000 f917 	bl	800388e <HAL_SYSTICK_Config>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e00e      	b.n	8003688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b0f      	cmp	r3, #15
 800366e:	d80a      	bhi.n	8003686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003670:	2200      	movs	r2, #0
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003678:	f000 f8ed 	bl	8003856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800367c:	4a06      	ldr	r2, [pc, #24]	@ (8003698 <HAL_InitTick+0x5c>)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	e000      	b.n	8003688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
}
 8003688:	4618      	mov	r0, r3
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	20000010 	.word	0x20000010
 8003694:	20000018 	.word	0x20000018
 8003698:	20000014 	.word	0x20000014

0800369c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036a0:	4b06      	ldr	r3, [pc, #24]	@ (80036bc <HAL_IncTick+0x20>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	461a      	mov	r2, r3
 80036a6:	4b06      	ldr	r3, [pc, #24]	@ (80036c0 <HAL_IncTick+0x24>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4413      	add	r3, r2
 80036ac:	4a04      	ldr	r2, [pc, #16]	@ (80036c0 <HAL_IncTick+0x24>)
 80036ae:	6013      	str	r3, [r2, #0]
}
 80036b0:	bf00      	nop
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	20000018 	.word	0x20000018
 80036c0:	20005608 	.word	0x20005608

080036c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  return uwTick;
 80036c8:	4b03      	ldr	r3, [pc, #12]	@ (80036d8 <HAL_GetTick+0x14>)
 80036ca:	681b      	ldr	r3, [r3, #0]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	20005608 	.word	0x20005608

080036dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003720 <__NVIC_SetPriorityGrouping+0x44>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036f8:	4013      	ands	r3, r2
 80036fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003704:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800370c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800370e:	4a04      	ldr	r2, [pc, #16]	@ (8003720 <__NVIC_SetPriorityGrouping+0x44>)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	60d3      	str	r3, [r2, #12]
}
 8003714:	bf00      	nop
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	e000ed00 	.word	0xe000ed00

08003724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003728:	4b04      	ldr	r3, [pc, #16]	@ (800373c <__NVIC_GetPriorityGrouping+0x18>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	0a1b      	lsrs	r3, r3, #8
 800372e:	f003 0307 	and.w	r3, r3, #7
}
 8003732:	4618      	mov	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	e000ed00 	.word	0xe000ed00

08003740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	6039      	str	r1, [r7, #0]
 800374a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800374c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003750:	2b00      	cmp	r3, #0
 8003752:	db0a      	blt.n	800376a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	b2da      	uxtb	r2, r3
 8003758:	490c      	ldr	r1, [pc, #48]	@ (800378c <__NVIC_SetPriority+0x4c>)
 800375a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375e:	0112      	lsls	r2, r2, #4
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	440b      	add	r3, r1
 8003764:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003768:	e00a      	b.n	8003780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	b2da      	uxtb	r2, r3
 800376e:	4908      	ldr	r1, [pc, #32]	@ (8003790 <__NVIC_SetPriority+0x50>)
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	3b04      	subs	r3, #4
 8003778:	0112      	lsls	r2, r2, #4
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	440b      	add	r3, r1
 800377e:	761a      	strb	r2, [r3, #24]
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	e000e100 	.word	0xe000e100
 8003790:	e000ed00 	.word	0xe000ed00

08003794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003794:	b480      	push	{r7}
 8003796:	b089      	sub	sp, #36	@ 0x24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f1c3 0307 	rsb	r3, r3, #7
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	bf28      	it	cs
 80037b2:	2304      	movcs	r3, #4
 80037b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	3304      	adds	r3, #4
 80037ba:	2b06      	cmp	r3, #6
 80037bc:	d902      	bls.n	80037c4 <NVIC_EncodePriority+0x30>
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	3b03      	subs	r3, #3
 80037c2:	e000      	b.n	80037c6 <NVIC_EncodePriority+0x32>
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	43da      	mvns	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	401a      	ands	r2, r3
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	fa01 f303 	lsl.w	r3, r1, r3
 80037e6:	43d9      	mvns	r1, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037ec:	4313      	orrs	r3, r2
         );
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3724      	adds	r7, #36	@ 0x24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
	...

080037fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3b01      	subs	r3, #1
 8003808:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800380c:	d301      	bcc.n	8003812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800380e:	2301      	movs	r3, #1
 8003810:	e00f      	b.n	8003832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003812:	4a0a      	ldr	r2, [pc, #40]	@ (800383c <SysTick_Config+0x40>)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3b01      	subs	r3, #1
 8003818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800381a:	210f      	movs	r1, #15
 800381c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003820:	f7ff ff8e 	bl	8003740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003824:	4b05      	ldr	r3, [pc, #20]	@ (800383c <SysTick_Config+0x40>)
 8003826:	2200      	movs	r2, #0
 8003828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800382a:	4b04      	ldr	r3, [pc, #16]	@ (800383c <SysTick_Config+0x40>)
 800382c:	2207      	movs	r2, #7
 800382e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	e000e010 	.word	0xe000e010

08003840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff ff47 	bl	80036dc <__NVIC_SetPriorityGrouping>
}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003856:	b580      	push	{r7, lr}
 8003858:	b086      	sub	sp, #24
 800385a:	af00      	add	r7, sp, #0
 800385c:	4603      	mov	r3, r0
 800385e:	60b9      	str	r1, [r7, #8]
 8003860:	607a      	str	r2, [r7, #4]
 8003862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003864:	2300      	movs	r3, #0
 8003866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003868:	f7ff ff5c 	bl	8003724 <__NVIC_GetPriorityGrouping>
 800386c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	68b9      	ldr	r1, [r7, #8]
 8003872:	6978      	ldr	r0, [r7, #20]
 8003874:	f7ff ff8e 	bl	8003794 <NVIC_EncodePriority>
 8003878:	4602      	mov	r2, r0
 800387a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800387e:	4611      	mov	r1, r2
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff ff5d 	bl	8003740 <__NVIC_SetPriority>
}
 8003886:	bf00      	nop
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b082      	sub	sp, #8
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff ffb0 	bl	80037fc <SysTick_Config>
 800389c:	4603      	mov	r3, r0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b089      	sub	sp, #36	@ 0x24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038be:	2300      	movs	r3, #0
 80038c0:	61fb      	str	r3, [r7, #28]
 80038c2:	e165      	b.n	8003b90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038c4:	2201      	movs	r2, #1
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	4013      	ands	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	429a      	cmp	r2, r3
 80038de:	f040 8154 	bne.w	8003b8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d005      	beq.n	80038fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d130      	bne.n	800395c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	2203      	movs	r2, #3
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	43db      	mvns	r3, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4013      	ands	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4313      	orrs	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003930:	2201      	movs	r2, #1
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	091b      	lsrs	r3, r3, #4
 8003946:	f003 0201 	and.w	r2, r3, #1
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4313      	orrs	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	2b03      	cmp	r3, #3
 8003966:	d017      	beq.n	8003998 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	2203      	movs	r2, #3
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4013      	ands	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d123      	bne.n	80039ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	08da      	lsrs	r2, r3, #3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3208      	adds	r2, #8
 80039ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	220f      	movs	r2, #15
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	43db      	mvns	r3, r3
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4013      	ands	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	4313      	orrs	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	08da      	lsrs	r2, r3, #3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3208      	adds	r2, #8
 80039e6:	69b9      	ldr	r1, [r7, #24]
 80039e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	2203      	movs	r2, #3
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	43db      	mvns	r3, r3
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4013      	ands	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 0203 	and.w	r2, r3, #3
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 80ae 	beq.w	8003b8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	4b5d      	ldr	r3, [pc, #372]	@ (8003ba8 <HAL_GPIO_Init+0x300>)
 8003a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a36:	4a5c      	ldr	r2, [pc, #368]	@ (8003ba8 <HAL_GPIO_Init+0x300>)
 8003a38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a3e:	4b5a      	ldr	r3, [pc, #360]	@ (8003ba8 <HAL_GPIO_Init+0x300>)
 8003a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a4a:	4a58      	ldr	r2, [pc, #352]	@ (8003bac <HAL_GPIO_Init+0x304>)
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	089b      	lsrs	r3, r3, #2
 8003a50:	3302      	adds	r3, #2
 8003a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	220f      	movs	r2, #15
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43db      	mvns	r3, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a4f      	ldr	r2, [pc, #316]	@ (8003bb0 <HAL_GPIO_Init+0x308>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d025      	beq.n	8003ac2 <HAL_GPIO_Init+0x21a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a4e      	ldr	r2, [pc, #312]	@ (8003bb4 <HAL_GPIO_Init+0x30c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d01f      	beq.n	8003abe <HAL_GPIO_Init+0x216>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a4d      	ldr	r2, [pc, #308]	@ (8003bb8 <HAL_GPIO_Init+0x310>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d019      	beq.n	8003aba <HAL_GPIO_Init+0x212>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a4c      	ldr	r2, [pc, #304]	@ (8003bbc <HAL_GPIO_Init+0x314>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d013      	beq.n	8003ab6 <HAL_GPIO_Init+0x20e>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a4b      	ldr	r2, [pc, #300]	@ (8003bc0 <HAL_GPIO_Init+0x318>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00d      	beq.n	8003ab2 <HAL_GPIO_Init+0x20a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a4a      	ldr	r2, [pc, #296]	@ (8003bc4 <HAL_GPIO_Init+0x31c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d007      	beq.n	8003aae <HAL_GPIO_Init+0x206>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a49      	ldr	r2, [pc, #292]	@ (8003bc8 <HAL_GPIO_Init+0x320>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d101      	bne.n	8003aaa <HAL_GPIO_Init+0x202>
 8003aa6:	2306      	movs	r3, #6
 8003aa8:	e00c      	b.n	8003ac4 <HAL_GPIO_Init+0x21c>
 8003aaa:	2307      	movs	r3, #7
 8003aac:	e00a      	b.n	8003ac4 <HAL_GPIO_Init+0x21c>
 8003aae:	2305      	movs	r3, #5
 8003ab0:	e008      	b.n	8003ac4 <HAL_GPIO_Init+0x21c>
 8003ab2:	2304      	movs	r3, #4
 8003ab4:	e006      	b.n	8003ac4 <HAL_GPIO_Init+0x21c>
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e004      	b.n	8003ac4 <HAL_GPIO_Init+0x21c>
 8003aba:	2302      	movs	r3, #2
 8003abc:	e002      	b.n	8003ac4 <HAL_GPIO_Init+0x21c>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <HAL_GPIO_Init+0x21c>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	69fa      	ldr	r2, [r7, #28]
 8003ac6:	f002 0203 	and.w	r2, r2, #3
 8003aca:	0092      	lsls	r2, r2, #2
 8003acc:	4093      	lsls	r3, r2
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ad4:	4935      	ldr	r1, [pc, #212]	@ (8003bac <HAL_GPIO_Init+0x304>)
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	089b      	lsrs	r3, r3, #2
 8003ada:	3302      	adds	r3, #2
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ae2:	4b3a      	ldr	r3, [pc, #232]	@ (8003bcc <HAL_GPIO_Init+0x324>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	43db      	mvns	r3, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4013      	ands	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b06:	4a31      	ldr	r2, [pc, #196]	@ (8003bcc <HAL_GPIO_Init+0x324>)
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b0c:	4b2f      	ldr	r3, [pc, #188]	@ (8003bcc <HAL_GPIO_Init+0x324>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	43db      	mvns	r3, r3
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b30:	4a26      	ldr	r2, [pc, #152]	@ (8003bcc <HAL_GPIO_Init+0x324>)
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b36:	4b25      	ldr	r3, [pc, #148]	@ (8003bcc <HAL_GPIO_Init+0x324>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4013      	ands	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8003bcc <HAL_GPIO_Init+0x324>)
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b60:	4b1a      	ldr	r3, [pc, #104]	@ (8003bcc <HAL_GPIO_Init+0x324>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b84:	4a11      	ldr	r2, [pc, #68]	@ (8003bcc <HAL_GPIO_Init+0x324>)
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	61fb      	str	r3, [r7, #28]
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	2b0f      	cmp	r3, #15
 8003b94:	f67f ae96 	bls.w	80038c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b98:	bf00      	nop
 8003b9a:	bf00      	nop
 8003b9c:	3724      	adds	r7, #36	@ 0x24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	40013800 	.word	0x40013800
 8003bb0:	40020000 	.word	0x40020000
 8003bb4:	40020400 	.word	0x40020400
 8003bb8:	40020800 	.word	0x40020800
 8003bbc:	40020c00 	.word	0x40020c00
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	40021400 	.word	0x40021400
 8003bc8:	40021800 	.word	0x40021800
 8003bcc:	40013c00 	.word	0x40013c00

08003bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0cc      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003be4:	4b68      	ldr	r3, [pc, #416]	@ (8003d88 <HAL_RCC_ClockConfig+0x1b8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 030f 	and.w	r3, r3, #15
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d90c      	bls.n	8003c0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf2:	4b65      	ldr	r3, [pc, #404]	@ (8003d88 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfa:	4b63      	ldr	r3, [pc, #396]	@ (8003d88 <HAL_RCC_ClockConfig+0x1b8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d001      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0b8      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d020      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c24:	4b59      	ldr	r3, [pc, #356]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	4a58      	ldr	r2, [pc, #352]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d005      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c3c:	4b53      	ldr	r3, [pc, #332]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	4a52      	ldr	r2, [pc, #328]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c48:	4b50      	ldr	r3, [pc, #320]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	494d      	ldr	r1, [pc, #308]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d044      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d107      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6e:	4b47      	ldr	r3, [pc, #284]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d119      	bne.n	8003cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e07f      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d003      	beq.n	8003c8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	d107      	bne.n	8003c9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8e:	4b3f      	ldr	r3, [pc, #252]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e06f      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9e:	4b3b      	ldr	r3, [pc, #236]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e067      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cae:	4b37      	ldr	r3, [pc, #220]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f023 0203 	bic.w	r2, r3, #3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	4934      	ldr	r1, [pc, #208]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cc0:	f7ff fd00 	bl	80036c4 <HAL_GetTick>
 8003cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc6:	e00a      	b.n	8003cde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc8:	f7ff fcfc 	bl	80036c4 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e04f      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cde:	4b2b      	ldr	r3, [pc, #172]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 020c 	and.w	r2, r3, #12
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d1eb      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf0:	4b25      	ldr	r3, [pc, #148]	@ (8003d88 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 030f 	and.w	r3, r3, #15
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d20c      	bcs.n	8003d18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfe:	4b22      	ldr	r3, [pc, #136]	@ (8003d88 <HAL_RCC_ClockConfig+0x1b8>)
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d06:	4b20      	ldr	r3, [pc, #128]	@ (8003d88 <HAL_RCC_ClockConfig+0x1b8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d001      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e032      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d008      	beq.n	8003d36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d24:	4b19      	ldr	r3, [pc, #100]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	4916      	ldr	r1, [pc, #88]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d009      	beq.n	8003d56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d42:	4b12      	ldr	r3, [pc, #72]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	490e      	ldr	r1, [pc, #56]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d56:	f000 f855 	bl	8003e04 <HAL_RCC_GetSysClockFreq>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	091b      	lsrs	r3, r3, #4
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	490a      	ldr	r1, [pc, #40]	@ (8003d90 <HAL_RCC_ClockConfig+0x1c0>)
 8003d68:	5ccb      	ldrb	r3, [r1, r3]
 8003d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d6e:	4a09      	ldr	r2, [pc, #36]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d72:	4b09      	ldr	r3, [pc, #36]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff fc60 	bl	800363c <HAL_InitTick>

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40023c00 	.word	0x40023c00
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	080092cc 	.word	0x080092cc
 8003d94:	20000010 	.word	0x20000010
 8003d98:	20000014 	.word	0x20000014

08003d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003da0:	4b03      	ldr	r3, [pc, #12]	@ (8003db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003da2:	681b      	ldr	r3, [r3, #0]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	20000010 	.word	0x20000010

08003db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003db8:	f7ff fff0 	bl	8003d9c <HAL_RCC_GetHCLKFreq>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	4b05      	ldr	r3, [pc, #20]	@ (8003dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	0a9b      	lsrs	r3, r3, #10
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	4903      	ldr	r1, [pc, #12]	@ (8003dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dca:	5ccb      	ldrb	r3, [r1, r3]
 8003dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	080092dc 	.word	0x080092dc

08003ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003de0:	f7ff ffdc 	bl	8003d9c <HAL_RCC_GetHCLKFreq>
 8003de4:	4602      	mov	r2, r0
 8003de6:	4b05      	ldr	r3, [pc, #20]	@ (8003dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	0b5b      	lsrs	r3, r3, #13
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	4903      	ldr	r1, [pc, #12]	@ (8003e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003df2:	5ccb      	ldrb	r3, [r1, r3]
 8003df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	080092dc 	.word	0x080092dc

08003e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e08:	b0a6      	sub	sp, #152	@ 0x98
 8003e0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e2a:	4bc8      	ldr	r3, [pc, #800]	@ (800414c <HAL_RCC_GetSysClockFreq+0x348>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	2b0c      	cmp	r3, #12
 8003e34:	f200 817e 	bhi.w	8004134 <HAL_RCC_GetSysClockFreq+0x330>
 8003e38:	a201      	add	r2, pc, #4	@ (adr r2, 8003e40 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3e:	bf00      	nop
 8003e40:	08003e75 	.word	0x08003e75
 8003e44:	08004135 	.word	0x08004135
 8003e48:	08004135 	.word	0x08004135
 8003e4c:	08004135 	.word	0x08004135
 8003e50:	08003e7d 	.word	0x08003e7d
 8003e54:	08004135 	.word	0x08004135
 8003e58:	08004135 	.word	0x08004135
 8003e5c:	08004135 	.word	0x08004135
 8003e60:	08003e85 	.word	0x08003e85
 8003e64:	08004135 	.word	0x08004135
 8003e68:	08004135 	.word	0x08004135
 8003e6c:	08004135 	.word	0x08004135
 8003e70:	08003fef 	.word	0x08003fef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e74:	4bb6      	ldr	r3, [pc, #728]	@ (8004150 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003e76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8003e7a:	e15f      	b.n	800413c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e7c:	4bb5      	ldr	r3, [pc, #724]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x350>)
 8003e7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003e82:	e15b      	b.n	800413c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e84:	4bb1      	ldr	r3, [pc, #708]	@ (800414c <HAL_RCC_GetSysClockFreq+0x348>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e90:	4bae      	ldr	r3, [pc, #696]	@ (800414c <HAL_RCC_GetSysClockFreq+0x348>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d031      	beq.n	8003f00 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e9c:	4bab      	ldr	r3, [pc, #684]	@ (800414c <HAL_RCC_GetSysClockFreq+0x348>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	099b      	lsrs	r3, r3, #6
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ea6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ea8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eae:	663b      	str	r3, [r7, #96]	@ 0x60
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003eb4:	4ba7      	ldr	r3, [pc, #668]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x350>)
 8003eb6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003eba:	462a      	mov	r2, r5
 8003ebc:	fb03 f202 	mul.w	r2, r3, r2
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	4621      	mov	r1, r4
 8003ec4:	fb01 f303 	mul.w	r3, r1, r3
 8003ec8:	4413      	add	r3, r2
 8003eca:	4aa2      	ldr	r2, [pc, #648]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x350>)
 8003ecc:	4621      	mov	r1, r4
 8003ece:	fba1 1202 	umull	r1, r2, r1, r2
 8003ed2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003ed4:	460a      	mov	r2, r1
 8003ed6:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003ed8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003eda:	4413      	add	r3, r2
 8003edc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ede:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ee6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003ee8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003eec:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003ef0:	f7fc feaa 	bl	8000c48 <__aeabi_uldivmod>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	4613      	mov	r3, r2
 8003efa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003efe:	e064      	b.n	8003fca <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f00:	4b92      	ldr	r3, [pc, #584]	@ (800414c <HAL_RCC_GetSysClockFreq+0x348>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	099b      	lsrs	r3, r3, #6
 8003f06:	2200      	movs	r2, #0
 8003f08:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f0a:	657a      	str	r2, [r7, #84]	@ 0x54
 8003f0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f14:	2300      	movs	r3, #0
 8003f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f18:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003f1c:	4622      	mov	r2, r4
 8003f1e:	462b      	mov	r3, r5
 8003f20:	f04f 0000 	mov.w	r0, #0
 8003f24:	f04f 0100 	mov.w	r1, #0
 8003f28:	0159      	lsls	r1, r3, #5
 8003f2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f2e:	0150      	lsls	r0, r2, #5
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4621      	mov	r1, r4
 8003f36:	1a51      	subs	r1, r2, r1
 8003f38:	6139      	str	r1, [r7, #16]
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	eb63 0301 	sbc.w	r3, r3, r1
 8003f40:	617b      	str	r3, [r7, #20]
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f4e:	4659      	mov	r1, fp
 8003f50:	018b      	lsls	r3, r1, #6
 8003f52:	4651      	mov	r1, sl
 8003f54:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f58:	4651      	mov	r1, sl
 8003f5a:	018a      	lsls	r2, r1, #6
 8003f5c:	4651      	mov	r1, sl
 8003f5e:	ebb2 0801 	subs.w	r8, r2, r1
 8003f62:	4659      	mov	r1, fp
 8003f64:	eb63 0901 	sbc.w	r9, r3, r1
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f7c:	4690      	mov	r8, r2
 8003f7e:	4699      	mov	r9, r3
 8003f80:	4623      	mov	r3, r4
 8003f82:	eb18 0303 	adds.w	r3, r8, r3
 8003f86:	60bb      	str	r3, [r7, #8]
 8003f88:	462b      	mov	r3, r5
 8003f8a:	eb49 0303 	adc.w	r3, r9, r3
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	028b      	lsls	r3, r1, #10
 8003fa0:	4621      	mov	r1, r4
 8003fa2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	028a      	lsls	r2, r1, #10
 8003faa:	4610      	mov	r0, r2
 8003fac:	4619      	mov	r1, r3
 8003fae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fb6:	647a      	str	r2, [r7, #68]	@ 0x44
 8003fb8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003fbc:	f7fc fe44 	bl	8000c48 <__aeabi_uldivmod>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fca:	4b60      	ldr	r3, [pc, #384]	@ (800414c <HAL_RCC_GetSysClockFreq+0x348>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	0c1b      	lsrs	r3, r3, #16
 8003fd0:	f003 0303 	and.w	r3, r3, #3
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8003fdc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003fe0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003fec:	e0a6      	b.n	800413c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fee:	4b57      	ldr	r3, [pc, #348]	@ (800414c <HAL_RCC_GetSysClockFreq+0x348>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ff6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ffa:	4b54      	ldr	r3, [pc, #336]	@ (800414c <HAL_RCC_GetSysClockFreq+0x348>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d02a      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004006:	4b51      	ldr	r3, [pc, #324]	@ (800414c <HAL_RCC_GetSysClockFreq+0x348>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	099b      	lsrs	r3, r3, #6
 800400c:	2200      	movs	r2, #0
 800400e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004010:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004014:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004018:	2100      	movs	r1, #0
 800401a:	4b4e      	ldr	r3, [pc, #312]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x350>)
 800401c:	fb03 f201 	mul.w	r2, r3, r1
 8004020:	2300      	movs	r3, #0
 8004022:	fb00 f303 	mul.w	r3, r0, r3
 8004026:	4413      	add	r3, r2
 8004028:	4a4a      	ldr	r2, [pc, #296]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x350>)
 800402a:	fba0 1202 	umull	r1, r2, r0, r2
 800402e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004030:	460a      	mov	r2, r1
 8004032:	673a      	str	r2, [r7, #112]	@ 0x70
 8004034:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004036:	4413      	add	r3, r2
 8004038:	677b      	str	r3, [r7, #116]	@ 0x74
 800403a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800403e:	2200      	movs	r2, #0
 8004040:	633b      	str	r3, [r7, #48]	@ 0x30
 8004042:	637a      	str	r2, [r7, #52]	@ 0x34
 8004044:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004048:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800404c:	f7fc fdfc 	bl	8000c48 <__aeabi_uldivmod>
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	4613      	mov	r3, r2
 8004056:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800405a:	e05b      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800405c:	4b3b      	ldr	r3, [pc, #236]	@ (800414c <HAL_RCC_GetSysClockFreq+0x348>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	099b      	lsrs	r3, r3, #6
 8004062:	2200      	movs	r2, #0
 8004064:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004066:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406e:	623b      	str	r3, [r7, #32]
 8004070:	2300      	movs	r3, #0
 8004072:	627b      	str	r3, [r7, #36]	@ 0x24
 8004074:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004078:	4642      	mov	r2, r8
 800407a:	464b      	mov	r3, r9
 800407c:	f04f 0000 	mov.w	r0, #0
 8004080:	f04f 0100 	mov.w	r1, #0
 8004084:	0159      	lsls	r1, r3, #5
 8004086:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800408a:	0150      	lsls	r0, r2, #5
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	4641      	mov	r1, r8
 8004092:	ebb2 0a01 	subs.w	sl, r2, r1
 8004096:	4649      	mov	r1, r9
 8004098:	eb63 0b01 	sbc.w	fp, r3, r1
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040b0:	ebb2 040a 	subs.w	r4, r2, sl
 80040b4:	eb63 050b 	sbc.w	r5, r3, fp
 80040b8:	f04f 0200 	mov.w	r2, #0
 80040bc:	f04f 0300 	mov.w	r3, #0
 80040c0:	00eb      	lsls	r3, r5, #3
 80040c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040c6:	00e2      	lsls	r2, r4, #3
 80040c8:	4614      	mov	r4, r2
 80040ca:	461d      	mov	r5, r3
 80040cc:	4643      	mov	r3, r8
 80040ce:	18e3      	adds	r3, r4, r3
 80040d0:	603b      	str	r3, [r7, #0]
 80040d2:	464b      	mov	r3, r9
 80040d4:	eb45 0303 	adc.w	r3, r5, r3
 80040d8:	607b      	str	r3, [r7, #4]
 80040da:	f04f 0200 	mov.w	r2, #0
 80040de:	f04f 0300 	mov.w	r3, #0
 80040e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040e6:	4629      	mov	r1, r5
 80040e8:	028b      	lsls	r3, r1, #10
 80040ea:	4621      	mov	r1, r4
 80040ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040f0:	4621      	mov	r1, r4
 80040f2:	028a      	lsls	r2, r1, #10
 80040f4:	4610      	mov	r0, r2
 80040f6:	4619      	mov	r1, r3
 80040f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040fc:	2200      	movs	r2, #0
 80040fe:	61bb      	str	r3, [r7, #24]
 8004100:	61fa      	str	r2, [r7, #28]
 8004102:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004106:	f7fc fd9f 	bl	8000c48 <__aeabi_uldivmod>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	4613      	mov	r3, r2
 8004110:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004114:	4b0d      	ldr	r3, [pc, #52]	@ (800414c <HAL_RCC_GetSysClockFreq+0x348>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	0f1b      	lsrs	r3, r3, #28
 800411a:	f003 0307 	and.w	r3, r3, #7
 800411e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8004122:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004126:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800412a:	fbb2 f3f3 	udiv	r3, r2, r3
 800412e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004132:	e003      	b.n	800413c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004134:	4b06      	ldr	r3, [pc, #24]	@ (8004150 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004136:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800413a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800413c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8004140:	4618      	mov	r0, r3
 8004142:	3798      	adds	r7, #152	@ 0x98
 8004144:	46bd      	mov	sp, r7
 8004146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800414a:	bf00      	nop
 800414c:	40023800 	.word	0x40023800
 8004150:	00f42400 	.word	0x00f42400
 8004154:	017d7840 	.word	0x017d7840

08004158 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e28d      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 8083 	beq.w	800427e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004178:	4b94      	ldr	r3, [pc, #592]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 030c 	and.w	r3, r3, #12
 8004180:	2b04      	cmp	r3, #4
 8004182:	d019      	beq.n	80041b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004184:	4b91      	ldr	r3, [pc, #580]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800418c:	2b08      	cmp	r3, #8
 800418e:	d106      	bne.n	800419e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004190:	4b8e      	ldr	r3, [pc, #568]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004198:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800419c:	d00c      	beq.n	80041b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800419e:	4b8b      	ldr	r3, [pc, #556]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041a6:	2b0c      	cmp	r3, #12
 80041a8:	d112      	bne.n	80041d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041aa:	4b88      	ldr	r3, [pc, #544]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041b6:	d10b      	bne.n	80041d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b8:	4b84      	ldr	r3, [pc, #528]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d05b      	beq.n	800427c <HAL_RCC_OscConfig+0x124>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d157      	bne.n	800427c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e25a      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041d8:	d106      	bne.n	80041e8 <HAL_RCC_OscConfig+0x90>
 80041da:	4b7c      	ldr	r3, [pc, #496]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a7b      	ldr	r2, [pc, #492]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80041e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	e01d      	b.n	8004224 <HAL_RCC_OscConfig+0xcc>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041f0:	d10c      	bne.n	800420c <HAL_RCC_OscConfig+0xb4>
 80041f2:	4b76      	ldr	r3, [pc, #472]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a75      	ldr	r2, [pc, #468]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80041f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	4b73      	ldr	r3, [pc, #460]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a72      	ldr	r2, [pc, #456]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 8004204:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	e00b      	b.n	8004224 <HAL_RCC_OscConfig+0xcc>
 800420c:	4b6f      	ldr	r3, [pc, #444]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a6e      	ldr	r2, [pc, #440]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 8004212:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004216:	6013      	str	r3, [r2, #0]
 8004218:	4b6c      	ldr	r3, [pc, #432]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a6b      	ldr	r2, [pc, #428]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 800421e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d013      	beq.n	8004254 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7ff fa4a 	bl	80036c4 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004234:	f7ff fa46 	bl	80036c4 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b64      	cmp	r3, #100	@ 0x64
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e21f      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004246:	4b61      	ldr	r3, [pc, #388]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0xdc>
 8004252:	e014      	b.n	800427e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004254:	f7ff fa36 	bl	80036c4 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800425c:	f7ff fa32 	bl	80036c4 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b64      	cmp	r3, #100	@ 0x64
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e20b      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426e:	4b57      	ldr	r3, [pc, #348]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0x104>
 800427a:	e000      	b.n	800427e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800427c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d06f      	beq.n	800436a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800428a:	4b50      	ldr	r3, [pc, #320]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 030c 	and.w	r3, r3, #12
 8004292:	2b00      	cmp	r3, #0
 8004294:	d017      	beq.n	80042c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004296:	4b4d      	ldr	r3, [pc, #308]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d105      	bne.n	80042ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042a2:	4b4a      	ldr	r3, [pc, #296]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00b      	beq.n	80042c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ae:	4b47      	ldr	r3, [pc, #284]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042b6:	2b0c      	cmp	r3, #12
 80042b8:	d11c      	bne.n	80042f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ba:	4b44      	ldr	r3, [pc, #272]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d116      	bne.n	80042f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042c6:	4b41      	ldr	r3, [pc, #260]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d005      	beq.n	80042de <HAL_RCC_OscConfig+0x186>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d001      	beq.n	80042de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e1d3      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042de:	4b3b      	ldr	r3, [pc, #236]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	4937      	ldr	r1, [pc, #220]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042f2:	e03a      	b.n	800436a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d020      	beq.n	800433e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042fc:	4b34      	ldr	r3, [pc, #208]	@ (80043d0 <HAL_RCC_OscConfig+0x278>)
 80042fe:	2201      	movs	r2, #1
 8004300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004302:	f7ff f9df 	bl	80036c4 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800430a:	f7ff f9db 	bl	80036c4 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e1b4      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431c:	4b2b      	ldr	r3, [pc, #172]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0f0      	beq.n	800430a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004328:	4b28      	ldr	r3, [pc, #160]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	4925      	ldr	r1, [pc, #148]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 8004338:	4313      	orrs	r3, r2
 800433a:	600b      	str	r3, [r1, #0]
 800433c:	e015      	b.n	800436a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800433e:	4b24      	ldr	r3, [pc, #144]	@ (80043d0 <HAL_RCC_OscConfig+0x278>)
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004344:	f7ff f9be 	bl	80036c4 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800434c:	f7ff f9ba 	bl	80036c4 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e193      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800435e:	4b1b      	ldr	r3, [pc, #108]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b00      	cmp	r3, #0
 8004374:	d036      	beq.n	80043e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d016      	beq.n	80043ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800437e:	4b15      	ldr	r3, [pc, #84]	@ (80043d4 <HAL_RCC_OscConfig+0x27c>)
 8004380:	2201      	movs	r2, #1
 8004382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004384:	f7ff f99e 	bl	80036c4 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800438c:	f7ff f99a 	bl	80036c4 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e173      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800439e:	4b0b      	ldr	r3, [pc, #44]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80043a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCC_OscConfig+0x234>
 80043aa:	e01b      	b.n	80043e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043ac:	4b09      	ldr	r3, [pc, #36]	@ (80043d4 <HAL_RCC_OscConfig+0x27c>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b2:	f7ff f987 	bl	80036c4 <HAL_GetTick>
 80043b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b8:	e00e      	b.n	80043d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ba:	f7ff f983 	bl	80036c4 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d907      	bls.n	80043d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e15c      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
 80043cc:	40023800 	.word	0x40023800
 80043d0:	42470000 	.word	0x42470000
 80043d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d8:	4b8a      	ldr	r3, [pc, #552]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 80043da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1ea      	bne.n	80043ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 8097 	beq.w	8004520 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043f2:	2300      	movs	r3, #0
 80043f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043f6:	4b83      	ldr	r3, [pc, #524]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 80043f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10f      	bne.n	8004422 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004402:	2300      	movs	r3, #0
 8004404:	60bb      	str	r3, [r7, #8]
 8004406:	4b7f      	ldr	r3, [pc, #508]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 8004408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440a:	4a7e      	ldr	r2, [pc, #504]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 800440c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004410:	6413      	str	r3, [r2, #64]	@ 0x40
 8004412:	4b7c      	ldr	r3, [pc, #496]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 8004414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800441a:	60bb      	str	r3, [r7, #8]
 800441c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800441e:	2301      	movs	r3, #1
 8004420:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004422:	4b79      	ldr	r3, [pc, #484]	@ (8004608 <HAL_RCC_OscConfig+0x4b0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800442a:	2b00      	cmp	r3, #0
 800442c:	d118      	bne.n	8004460 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800442e:	4b76      	ldr	r3, [pc, #472]	@ (8004608 <HAL_RCC_OscConfig+0x4b0>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a75      	ldr	r2, [pc, #468]	@ (8004608 <HAL_RCC_OscConfig+0x4b0>)
 8004434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800443a:	f7ff f943 	bl	80036c4 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004442:	f7ff f93f 	bl	80036c4 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e118      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004454:	4b6c      	ldr	r3, [pc, #432]	@ (8004608 <HAL_RCC_OscConfig+0x4b0>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0f0      	beq.n	8004442 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d106      	bne.n	8004476 <HAL_RCC_OscConfig+0x31e>
 8004468:	4b66      	ldr	r3, [pc, #408]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 800446a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800446c:	4a65      	ldr	r2, [pc, #404]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 800446e:	f043 0301 	orr.w	r3, r3, #1
 8004472:	6713      	str	r3, [r2, #112]	@ 0x70
 8004474:	e01c      	b.n	80044b0 <HAL_RCC_OscConfig+0x358>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b05      	cmp	r3, #5
 800447c:	d10c      	bne.n	8004498 <HAL_RCC_OscConfig+0x340>
 800447e:	4b61      	ldr	r3, [pc, #388]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 8004480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004482:	4a60      	ldr	r2, [pc, #384]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 8004484:	f043 0304 	orr.w	r3, r3, #4
 8004488:	6713      	str	r3, [r2, #112]	@ 0x70
 800448a:	4b5e      	ldr	r3, [pc, #376]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 800448c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800448e:	4a5d      	ldr	r2, [pc, #372]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 8004490:	f043 0301 	orr.w	r3, r3, #1
 8004494:	6713      	str	r3, [r2, #112]	@ 0x70
 8004496:	e00b      	b.n	80044b0 <HAL_RCC_OscConfig+0x358>
 8004498:	4b5a      	ldr	r3, [pc, #360]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 800449a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800449c:	4a59      	ldr	r2, [pc, #356]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 800449e:	f023 0301 	bic.w	r3, r3, #1
 80044a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80044a4:	4b57      	ldr	r3, [pc, #348]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 80044a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a8:	4a56      	ldr	r2, [pc, #344]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 80044aa:	f023 0304 	bic.w	r3, r3, #4
 80044ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d015      	beq.n	80044e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b8:	f7ff f904 	bl	80036c4 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044be:	e00a      	b.n	80044d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044c0:	f7ff f900 	bl	80036c4 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e0d7      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d6:	4b4b      	ldr	r3, [pc, #300]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 80044d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0ee      	beq.n	80044c0 <HAL_RCC_OscConfig+0x368>
 80044e2:	e014      	b.n	800450e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e4:	f7ff f8ee 	bl	80036c4 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ea:	e00a      	b.n	8004502 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ec:	f7ff f8ea 	bl	80036c4 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e0c1      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004502:	4b40      	ldr	r3, [pc, #256]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 8004504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1ee      	bne.n	80044ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800450e:	7dfb      	ldrb	r3, [r7, #23]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d105      	bne.n	8004520 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004514:	4b3b      	ldr	r3, [pc, #236]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 8004516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004518:	4a3a      	ldr	r2, [pc, #232]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 800451a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800451e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 80ad 	beq.w	8004684 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800452a:	4b36      	ldr	r3, [pc, #216]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 030c 	and.w	r3, r3, #12
 8004532:	2b08      	cmp	r3, #8
 8004534:	d060      	beq.n	80045f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	2b02      	cmp	r3, #2
 800453c:	d145      	bne.n	80045ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800453e:	4b33      	ldr	r3, [pc, #204]	@ (800460c <HAL_RCC_OscConfig+0x4b4>)
 8004540:	2200      	movs	r2, #0
 8004542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004544:	f7ff f8be 	bl	80036c4 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800454c:	f7ff f8ba 	bl	80036c4 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e093      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455e:	4b29      	ldr	r3, [pc, #164]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1f0      	bne.n	800454c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69da      	ldr	r2, [r3, #28]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004578:	019b      	lsls	r3, r3, #6
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004580:	085b      	lsrs	r3, r3, #1
 8004582:	3b01      	subs	r3, #1
 8004584:	041b      	lsls	r3, r3, #16
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458c:	061b      	lsls	r3, r3, #24
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004594:	071b      	lsls	r3, r3, #28
 8004596:	491b      	ldr	r1, [pc, #108]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 8004598:	4313      	orrs	r3, r2
 800459a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800459c:	4b1b      	ldr	r3, [pc, #108]	@ (800460c <HAL_RCC_OscConfig+0x4b4>)
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a2:	f7ff f88f 	bl	80036c4 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045aa:	f7ff f88b 	bl	80036c4 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e064      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045bc:	4b11      	ldr	r3, [pc, #68]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x452>
 80045c8:	e05c      	b.n	8004684 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ca:	4b10      	ldr	r3, [pc, #64]	@ (800460c <HAL_RCC_OscConfig+0x4b4>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d0:	f7ff f878 	bl	80036c4 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045d8:	f7ff f874 	bl	80036c4 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e04d      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ea:	4b06      	ldr	r3, [pc, #24]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f0      	bne.n	80045d8 <HAL_RCC_OscConfig+0x480>
 80045f6:	e045      	b.n	8004684 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d107      	bne.n	8004610 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e040      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
 8004604:	40023800 	.word	0x40023800
 8004608:	40007000 	.word	0x40007000
 800460c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004610:	4b1f      	ldr	r3, [pc, #124]	@ (8004690 <HAL_RCC_OscConfig+0x538>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d030      	beq.n	8004680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004628:	429a      	cmp	r2, r3
 800462a:	d129      	bne.n	8004680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004636:	429a      	cmp	r2, r3
 8004638:	d122      	bne.n	8004680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004640:	4013      	ands	r3, r2
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004646:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004648:	4293      	cmp	r3, r2
 800464a:	d119      	bne.n	8004680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004656:	085b      	lsrs	r3, r3, #1
 8004658:	3b01      	subs	r3, #1
 800465a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800465c:	429a      	cmp	r2, r3
 800465e:	d10f      	bne.n	8004680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800466c:	429a      	cmp	r2, r3
 800466e:	d107      	bne.n	8004680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800467c:	429a      	cmp	r2, r3
 800467e:	d001      	beq.n	8004684 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e000      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	40023800 	.word	0x40023800

08004694 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e042      	b.n	800472c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fe fe22 	bl	8003304 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2224      	movs	r2, #36	@ 0x24
 80046c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f973 	bl	80049c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695a      	ldr	r2, [r3, #20]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68da      	ldr	r2, [r3, #12]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800470c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b08a      	sub	sp, #40	@ 0x28
 8004738:	af02      	add	r7, sp, #8
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	603b      	str	r3, [r7, #0]
 8004740:	4613      	mov	r3, r2
 8004742:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b20      	cmp	r3, #32
 8004752:	d175      	bne.n	8004840 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d002      	beq.n	8004760 <HAL_UART_Transmit+0x2c>
 800475a:	88fb      	ldrh	r3, [r7, #6]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e06e      	b.n	8004842 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2221      	movs	r2, #33	@ 0x21
 800476e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004772:	f7fe ffa7 	bl	80036c4 <HAL_GetTick>
 8004776:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	88fa      	ldrh	r2, [r7, #6]
 800477c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	88fa      	ldrh	r2, [r7, #6]
 8004782:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800478c:	d108      	bne.n	80047a0 <HAL_UART_Transmit+0x6c>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d104      	bne.n	80047a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004796:	2300      	movs	r3, #0
 8004798:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	61bb      	str	r3, [r7, #24]
 800479e:	e003      	b.n	80047a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047a4:	2300      	movs	r3, #0
 80047a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047a8:	e02e      	b.n	8004808 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2200      	movs	r2, #0
 80047b2:	2180      	movs	r1, #128	@ 0x80
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 f848 	bl	800484a <UART_WaitOnFlagUntilTimeout>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d005      	beq.n	80047cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2220      	movs	r2, #32
 80047c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e03a      	b.n	8004842 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10b      	bne.n	80047ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	461a      	mov	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	3302      	adds	r3, #2
 80047e6:	61bb      	str	r3, [r7, #24]
 80047e8:	e007      	b.n	80047fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	781a      	ldrb	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	3301      	adds	r3, #1
 80047f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047fe:	b29b      	uxth	r3, r3
 8004800:	3b01      	subs	r3, #1
 8004802:	b29a      	uxth	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800480c:	b29b      	uxth	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1cb      	bne.n	80047aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2200      	movs	r2, #0
 800481a:	2140      	movs	r1, #64	@ 0x40
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 f814 	bl	800484a <UART_WaitOnFlagUntilTimeout>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e006      	b.n	8004842 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2220      	movs	r2, #32
 8004838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800483c:	2300      	movs	r3, #0
 800483e:	e000      	b.n	8004842 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004840:	2302      	movs	r3, #2
  }
}
 8004842:	4618      	mov	r0, r3
 8004844:	3720      	adds	r7, #32
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b086      	sub	sp, #24
 800484e:	af00      	add	r7, sp, #0
 8004850:	60f8      	str	r0, [r7, #12]
 8004852:	60b9      	str	r1, [r7, #8]
 8004854:	603b      	str	r3, [r7, #0]
 8004856:	4613      	mov	r3, r2
 8004858:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800485a:	e03b      	b.n	80048d4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004862:	d037      	beq.n	80048d4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004864:	f7fe ff2e 	bl	80036c4 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	6a3a      	ldr	r2, [r7, #32]
 8004870:	429a      	cmp	r2, r3
 8004872:	d302      	bcc.n	800487a <UART_WaitOnFlagUntilTimeout+0x30>
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e03a      	b.n	80048f4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d023      	beq.n	80048d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b80      	cmp	r3, #128	@ 0x80
 8004890:	d020      	beq.n	80048d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b40      	cmp	r3, #64	@ 0x40
 8004896:	d01d      	beq.n	80048d4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d116      	bne.n	80048d4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80048a6:	2300      	movs	r3, #0
 80048a8:	617b      	str	r3, [r7, #20]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	617b      	str	r3, [r7, #20]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f81d 	bl	80048fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2208      	movs	r2, #8
 80048c6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e00f      	b.n	80048f4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	4013      	ands	r3, r2
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	bf0c      	ite	eq
 80048e4:	2301      	moveq	r3, #1
 80048e6:	2300      	movne	r3, #0
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	461a      	mov	r2, r3
 80048ec:	79fb      	ldrb	r3, [r7, #7]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d0b4      	beq.n	800485c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b095      	sub	sp, #84	@ 0x54
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	330c      	adds	r3, #12
 800490a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800490e:	e853 3f00 	ldrex	r3, [r3]
 8004912:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004916:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800491a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	330c      	adds	r3, #12
 8004922:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004924:	643a      	str	r2, [r7, #64]	@ 0x40
 8004926:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004928:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800492a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800492c:	e841 2300 	strex	r3, r2, [r1]
 8004930:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1e5      	bne.n	8004904 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3314      	adds	r3, #20
 800493e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	e853 3f00 	ldrex	r3, [r3]
 8004946:	61fb      	str	r3, [r7, #28]
   return(result);
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f023 0301 	bic.w	r3, r3, #1
 800494e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3314      	adds	r3, #20
 8004956:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004958:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800495a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800495e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004960:	e841 2300 	strex	r3, r2, [r1]
 8004964:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1e5      	bne.n	8004938 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004970:	2b01      	cmp	r3, #1
 8004972:	d119      	bne.n	80049a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	330c      	adds	r3, #12
 800497a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	e853 3f00 	ldrex	r3, [r3]
 8004982:	60bb      	str	r3, [r7, #8]
   return(result);
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f023 0310 	bic.w	r3, r3, #16
 800498a:	647b      	str	r3, [r7, #68]	@ 0x44
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	330c      	adds	r3, #12
 8004992:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004994:	61ba      	str	r2, [r7, #24]
 8004996:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004998:	6979      	ldr	r1, [r7, #20]
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	e841 2300 	strex	r3, r2, [r1]
 80049a0:	613b      	str	r3, [r7, #16]
   return(result);
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1e5      	bne.n	8004974 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80049b6:	bf00      	nop
 80049b8:	3754      	adds	r7, #84	@ 0x54
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
	...

080049c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c8:	b0c0      	sub	sp, #256	@ 0x100
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e0:	68d9      	ldr	r1, [r3, #12]
 80049e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	ea40 0301 	orr.w	r3, r0, r1
 80049ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004a1c:	f021 010c 	bic.w	r1, r1, #12
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a2a:	430b      	orrs	r3, r1
 8004a2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a3e:	6999      	ldr	r1, [r3, #24]
 8004a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	ea40 0301 	orr.w	r3, r0, r1
 8004a4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	4b8f      	ldr	r3, [pc, #572]	@ (8004c90 <UART_SetConfig+0x2cc>)
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d005      	beq.n	8004a64 <UART_SetConfig+0xa0>
 8004a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	4b8d      	ldr	r3, [pc, #564]	@ (8004c94 <UART_SetConfig+0x2d0>)
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d104      	bne.n	8004a6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a64:	f7ff f9ba 	bl	8003ddc <HAL_RCC_GetPCLK2Freq>
 8004a68:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a6c:	e003      	b.n	8004a76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a6e:	f7ff f9a1 	bl	8003db4 <HAL_RCC_GetPCLK1Freq>
 8004a72:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a80:	f040 810c 	bne.w	8004c9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a8e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a96:	4622      	mov	r2, r4
 8004a98:	462b      	mov	r3, r5
 8004a9a:	1891      	adds	r1, r2, r2
 8004a9c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a9e:	415b      	adcs	r3, r3
 8004aa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004aa2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	eb12 0801 	adds.w	r8, r2, r1
 8004aac:	4629      	mov	r1, r5
 8004aae:	eb43 0901 	adc.w	r9, r3, r1
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ac6:	4690      	mov	r8, r2
 8004ac8:	4699      	mov	r9, r3
 8004aca:	4623      	mov	r3, r4
 8004acc:	eb18 0303 	adds.w	r3, r8, r3
 8004ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ad4:	462b      	mov	r3, r5
 8004ad6:	eb49 0303 	adc.w	r3, r9, r3
 8004ada:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004aea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004aee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004af2:	460b      	mov	r3, r1
 8004af4:	18db      	adds	r3, r3, r3
 8004af6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004af8:	4613      	mov	r3, r2
 8004afa:	eb42 0303 	adc.w	r3, r2, r3
 8004afe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004b04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004b08:	f7fc f89e 	bl	8000c48 <__aeabi_uldivmod>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4b61      	ldr	r3, [pc, #388]	@ (8004c98 <UART_SetConfig+0x2d4>)
 8004b12:	fba3 2302 	umull	r2, r3, r3, r2
 8004b16:	095b      	lsrs	r3, r3, #5
 8004b18:	011c      	lsls	r4, r3, #4
 8004b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b24:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004b28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	464b      	mov	r3, r9
 8004b30:	1891      	adds	r1, r2, r2
 8004b32:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004b34:	415b      	adcs	r3, r3
 8004b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	eb12 0a01 	adds.w	sl, r2, r1
 8004b42:	4649      	mov	r1, r9
 8004b44:	eb43 0b01 	adc.w	fp, r3, r1
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b5c:	4692      	mov	sl, r2
 8004b5e:	469b      	mov	fp, r3
 8004b60:	4643      	mov	r3, r8
 8004b62:	eb1a 0303 	adds.w	r3, sl, r3
 8004b66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b6a:	464b      	mov	r3, r9
 8004b6c:	eb4b 0303 	adc.w	r3, fp, r3
 8004b70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b80:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	18db      	adds	r3, r3, r3
 8004b8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b8e:	4613      	mov	r3, r2
 8004b90:	eb42 0303 	adc.w	r3, r2, r3
 8004b94:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b9e:	f7fc f853 	bl	8000c48 <__aeabi_uldivmod>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	4b3b      	ldr	r3, [pc, #236]	@ (8004c98 <UART_SetConfig+0x2d4>)
 8004baa:	fba3 2301 	umull	r2, r3, r3, r1
 8004bae:	095b      	lsrs	r3, r3, #5
 8004bb0:	2264      	movs	r2, #100	@ 0x64
 8004bb2:	fb02 f303 	mul.w	r3, r2, r3
 8004bb6:	1acb      	subs	r3, r1, r3
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004bbe:	4b36      	ldr	r3, [pc, #216]	@ (8004c98 <UART_SetConfig+0x2d4>)
 8004bc0:	fba3 2302 	umull	r2, r3, r3, r2
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004bcc:	441c      	add	r4, r3
 8004bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bd8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004bdc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004be0:	4642      	mov	r2, r8
 8004be2:	464b      	mov	r3, r9
 8004be4:	1891      	adds	r1, r2, r2
 8004be6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004be8:	415b      	adcs	r3, r3
 8004bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004bf0:	4641      	mov	r1, r8
 8004bf2:	1851      	adds	r1, r2, r1
 8004bf4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004bf6:	4649      	mov	r1, r9
 8004bf8:	414b      	adcs	r3, r1
 8004bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004c08:	4659      	mov	r1, fp
 8004c0a:	00cb      	lsls	r3, r1, #3
 8004c0c:	4651      	mov	r1, sl
 8004c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c12:	4651      	mov	r1, sl
 8004c14:	00ca      	lsls	r2, r1, #3
 8004c16:	4610      	mov	r0, r2
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	4642      	mov	r2, r8
 8004c1e:	189b      	adds	r3, r3, r2
 8004c20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c24:	464b      	mov	r3, r9
 8004c26:	460a      	mov	r2, r1
 8004c28:	eb42 0303 	adc.w	r3, r2, r3
 8004c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004c40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c44:	460b      	mov	r3, r1
 8004c46:	18db      	adds	r3, r3, r3
 8004c48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	eb42 0303 	adc.w	r3, r2, r3
 8004c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c5a:	f7fb fff5 	bl	8000c48 <__aeabi_uldivmod>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4b0d      	ldr	r3, [pc, #52]	@ (8004c98 <UART_SetConfig+0x2d4>)
 8004c64:	fba3 1302 	umull	r1, r3, r3, r2
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	2164      	movs	r1, #100	@ 0x64
 8004c6c:	fb01 f303 	mul.w	r3, r1, r3
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	3332      	adds	r3, #50	@ 0x32
 8004c76:	4a08      	ldr	r2, [pc, #32]	@ (8004c98 <UART_SetConfig+0x2d4>)
 8004c78:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	f003 0207 	and.w	r2, r3, #7
 8004c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4422      	add	r2, r4
 8004c8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c8c:	e106      	b.n	8004e9c <UART_SetConfig+0x4d8>
 8004c8e:	bf00      	nop
 8004c90:	40011000 	.word	0x40011000
 8004c94:	40011400 	.word	0x40011400
 8004c98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ca6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004caa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004cae:	4642      	mov	r2, r8
 8004cb0:	464b      	mov	r3, r9
 8004cb2:	1891      	adds	r1, r2, r2
 8004cb4:	6239      	str	r1, [r7, #32]
 8004cb6:	415b      	adcs	r3, r3
 8004cb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cbe:	4641      	mov	r1, r8
 8004cc0:	1854      	adds	r4, r2, r1
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	eb43 0501 	adc.w	r5, r3, r1
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	00eb      	lsls	r3, r5, #3
 8004cd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cd6:	00e2      	lsls	r2, r4, #3
 8004cd8:	4614      	mov	r4, r2
 8004cda:	461d      	mov	r5, r3
 8004cdc:	4643      	mov	r3, r8
 8004cde:	18e3      	adds	r3, r4, r3
 8004ce0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ce4:	464b      	mov	r3, r9
 8004ce6:	eb45 0303 	adc.w	r3, r5, r3
 8004cea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cfa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	008b      	lsls	r3, r1, #2
 8004d0e:	4621      	mov	r1, r4
 8004d10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d14:	4621      	mov	r1, r4
 8004d16:	008a      	lsls	r2, r1, #2
 8004d18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004d1c:	f7fb ff94 	bl	8000c48 <__aeabi_uldivmod>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4b60      	ldr	r3, [pc, #384]	@ (8004ea8 <UART_SetConfig+0x4e4>)
 8004d26:	fba3 2302 	umull	r2, r3, r3, r2
 8004d2a:	095b      	lsrs	r3, r3, #5
 8004d2c:	011c      	lsls	r4, r3, #4
 8004d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004d40:	4642      	mov	r2, r8
 8004d42:	464b      	mov	r3, r9
 8004d44:	1891      	adds	r1, r2, r2
 8004d46:	61b9      	str	r1, [r7, #24]
 8004d48:	415b      	adcs	r3, r3
 8004d4a:	61fb      	str	r3, [r7, #28]
 8004d4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d50:	4641      	mov	r1, r8
 8004d52:	1851      	adds	r1, r2, r1
 8004d54:	6139      	str	r1, [r7, #16]
 8004d56:	4649      	mov	r1, r9
 8004d58:	414b      	adcs	r3, r1
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d68:	4659      	mov	r1, fp
 8004d6a:	00cb      	lsls	r3, r1, #3
 8004d6c:	4651      	mov	r1, sl
 8004d6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d72:	4651      	mov	r1, sl
 8004d74:	00ca      	lsls	r2, r1, #3
 8004d76:	4610      	mov	r0, r2
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	4642      	mov	r2, r8
 8004d7e:	189b      	adds	r3, r3, r2
 8004d80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d84:	464b      	mov	r3, r9
 8004d86:	460a      	mov	r2, r1
 8004d88:	eb42 0303 	adc.w	r3, r2, r3
 8004d8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004da8:	4649      	mov	r1, r9
 8004daa:	008b      	lsls	r3, r1, #2
 8004dac:	4641      	mov	r1, r8
 8004dae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004db2:	4641      	mov	r1, r8
 8004db4:	008a      	lsls	r2, r1, #2
 8004db6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004dba:	f7fb ff45 	bl	8000c48 <__aeabi_uldivmod>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4611      	mov	r1, r2
 8004dc4:	4b38      	ldr	r3, [pc, #224]	@ (8004ea8 <UART_SetConfig+0x4e4>)
 8004dc6:	fba3 2301 	umull	r2, r3, r3, r1
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	2264      	movs	r2, #100	@ 0x64
 8004dce:	fb02 f303 	mul.w	r3, r2, r3
 8004dd2:	1acb      	subs	r3, r1, r3
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	3332      	adds	r3, #50	@ 0x32
 8004dd8:	4a33      	ldr	r2, [pc, #204]	@ (8004ea8 <UART_SetConfig+0x4e4>)
 8004dda:	fba2 2303 	umull	r2, r3, r2, r3
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004de4:	441c      	add	r4, r3
 8004de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dea:	2200      	movs	r2, #0
 8004dec:	673b      	str	r3, [r7, #112]	@ 0x70
 8004dee:	677a      	str	r2, [r7, #116]	@ 0x74
 8004df0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004df4:	4642      	mov	r2, r8
 8004df6:	464b      	mov	r3, r9
 8004df8:	1891      	adds	r1, r2, r2
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	415b      	adcs	r3, r3
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e04:	4641      	mov	r1, r8
 8004e06:	1851      	adds	r1, r2, r1
 8004e08:	6039      	str	r1, [r7, #0]
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	414b      	adcs	r3, r1
 8004e0e:	607b      	str	r3, [r7, #4]
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e1c:	4659      	mov	r1, fp
 8004e1e:	00cb      	lsls	r3, r1, #3
 8004e20:	4651      	mov	r1, sl
 8004e22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e26:	4651      	mov	r1, sl
 8004e28:	00ca      	lsls	r2, r1, #3
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4603      	mov	r3, r0
 8004e30:	4642      	mov	r2, r8
 8004e32:	189b      	adds	r3, r3, r2
 8004e34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e36:	464b      	mov	r3, r9
 8004e38:	460a      	mov	r2, r1
 8004e3a:	eb42 0303 	adc.w	r3, r2, r3
 8004e3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e4a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e58:	4649      	mov	r1, r9
 8004e5a:	008b      	lsls	r3, r1, #2
 8004e5c:	4641      	mov	r1, r8
 8004e5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e62:	4641      	mov	r1, r8
 8004e64:	008a      	lsls	r2, r1, #2
 8004e66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e6a:	f7fb feed 	bl	8000c48 <__aeabi_uldivmod>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea8 <UART_SetConfig+0x4e4>)
 8004e74:	fba3 1302 	umull	r1, r3, r3, r2
 8004e78:	095b      	lsrs	r3, r3, #5
 8004e7a:	2164      	movs	r1, #100	@ 0x64
 8004e7c:	fb01 f303 	mul.w	r3, r1, r3
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	3332      	adds	r3, #50	@ 0x32
 8004e86:	4a08      	ldr	r2, [pc, #32]	@ (8004ea8 <UART_SetConfig+0x4e4>)
 8004e88:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8c:	095b      	lsrs	r3, r3, #5
 8004e8e:	f003 020f 	and.w	r2, r3, #15
 8004e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4422      	add	r2, r4
 8004e9a:	609a      	str	r2, [r3, #8]
}
 8004e9c:	bf00      	nop
 8004e9e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ea8:	51eb851f 	.word	0x51eb851f

08004eac <atoi>:
 8004eac:	220a      	movs	r2, #10
 8004eae:	2100      	movs	r1, #0
 8004eb0:	f001 b8c6 	b.w	8006040 <strtol>

08004eb4 <malloc>:
 8004eb4:	4b02      	ldr	r3, [pc, #8]	@ (8004ec0 <malloc+0xc>)
 8004eb6:	4601      	mov	r1, r0
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	f000 b82d 	b.w	8004f18 <_malloc_r>
 8004ebe:	bf00      	nop
 8004ec0:	20000194 	.word	0x20000194

08004ec4 <free>:
 8004ec4:	4b02      	ldr	r3, [pc, #8]	@ (8004ed0 <free+0xc>)
 8004ec6:	4601      	mov	r1, r0
 8004ec8:	6818      	ldr	r0, [r3, #0]
 8004eca:	f001 b9a9 	b.w	8006220 <_free_r>
 8004ece:	bf00      	nop
 8004ed0:	20000194 	.word	0x20000194

08004ed4 <sbrk_aligned>:
 8004ed4:	b570      	push	{r4, r5, r6, lr}
 8004ed6:	4e0f      	ldr	r6, [pc, #60]	@ (8004f14 <sbrk_aligned+0x40>)
 8004ed8:	460c      	mov	r4, r1
 8004eda:	6831      	ldr	r1, [r6, #0]
 8004edc:	4605      	mov	r5, r0
 8004ede:	b911      	cbnz	r1, 8004ee6 <sbrk_aligned+0x12>
 8004ee0:	f001 f938 	bl	8006154 <_sbrk_r>
 8004ee4:	6030      	str	r0, [r6, #0]
 8004ee6:	4621      	mov	r1, r4
 8004ee8:	4628      	mov	r0, r5
 8004eea:	f001 f933 	bl	8006154 <_sbrk_r>
 8004eee:	1c43      	adds	r3, r0, #1
 8004ef0:	d103      	bne.n	8004efa <sbrk_aligned+0x26>
 8004ef2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	bd70      	pop	{r4, r5, r6, pc}
 8004efa:	1cc4      	adds	r4, r0, #3
 8004efc:	f024 0403 	bic.w	r4, r4, #3
 8004f00:	42a0      	cmp	r0, r4
 8004f02:	d0f8      	beq.n	8004ef6 <sbrk_aligned+0x22>
 8004f04:	1a21      	subs	r1, r4, r0
 8004f06:	4628      	mov	r0, r5
 8004f08:	f001 f924 	bl	8006154 <_sbrk_r>
 8004f0c:	3001      	adds	r0, #1
 8004f0e:	d1f2      	bne.n	8004ef6 <sbrk_aligned+0x22>
 8004f10:	e7ef      	b.n	8004ef2 <sbrk_aligned+0x1e>
 8004f12:	bf00      	nop
 8004f14:	2000560c 	.word	0x2000560c

08004f18 <_malloc_r>:
 8004f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f1c:	1ccd      	adds	r5, r1, #3
 8004f1e:	f025 0503 	bic.w	r5, r5, #3
 8004f22:	3508      	adds	r5, #8
 8004f24:	2d0c      	cmp	r5, #12
 8004f26:	bf38      	it	cc
 8004f28:	250c      	movcc	r5, #12
 8004f2a:	2d00      	cmp	r5, #0
 8004f2c:	4606      	mov	r6, r0
 8004f2e:	db01      	blt.n	8004f34 <_malloc_r+0x1c>
 8004f30:	42a9      	cmp	r1, r5
 8004f32:	d904      	bls.n	8004f3e <_malloc_r+0x26>
 8004f34:	230c      	movs	r3, #12
 8004f36:	6033      	str	r3, [r6, #0]
 8004f38:	2000      	movs	r0, #0
 8004f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005014 <_malloc_r+0xfc>
 8004f42:	f000 f869 	bl	8005018 <__malloc_lock>
 8004f46:	f8d8 3000 	ldr.w	r3, [r8]
 8004f4a:	461c      	mov	r4, r3
 8004f4c:	bb44      	cbnz	r4, 8004fa0 <_malloc_r+0x88>
 8004f4e:	4629      	mov	r1, r5
 8004f50:	4630      	mov	r0, r6
 8004f52:	f7ff ffbf 	bl	8004ed4 <sbrk_aligned>
 8004f56:	1c43      	adds	r3, r0, #1
 8004f58:	4604      	mov	r4, r0
 8004f5a:	d158      	bne.n	800500e <_malloc_r+0xf6>
 8004f5c:	f8d8 4000 	ldr.w	r4, [r8]
 8004f60:	4627      	mov	r7, r4
 8004f62:	2f00      	cmp	r7, #0
 8004f64:	d143      	bne.n	8004fee <_malloc_r+0xd6>
 8004f66:	2c00      	cmp	r4, #0
 8004f68:	d04b      	beq.n	8005002 <_malloc_r+0xea>
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	4639      	mov	r1, r7
 8004f6e:	4630      	mov	r0, r6
 8004f70:	eb04 0903 	add.w	r9, r4, r3
 8004f74:	f001 f8ee 	bl	8006154 <_sbrk_r>
 8004f78:	4581      	cmp	r9, r0
 8004f7a:	d142      	bne.n	8005002 <_malloc_r+0xea>
 8004f7c:	6821      	ldr	r1, [r4, #0]
 8004f7e:	1a6d      	subs	r5, r5, r1
 8004f80:	4629      	mov	r1, r5
 8004f82:	4630      	mov	r0, r6
 8004f84:	f7ff ffa6 	bl	8004ed4 <sbrk_aligned>
 8004f88:	3001      	adds	r0, #1
 8004f8a:	d03a      	beq.n	8005002 <_malloc_r+0xea>
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	442b      	add	r3, r5
 8004f90:	6023      	str	r3, [r4, #0]
 8004f92:	f8d8 3000 	ldr.w	r3, [r8]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	bb62      	cbnz	r2, 8004ff4 <_malloc_r+0xdc>
 8004f9a:	f8c8 7000 	str.w	r7, [r8]
 8004f9e:	e00f      	b.n	8004fc0 <_malloc_r+0xa8>
 8004fa0:	6822      	ldr	r2, [r4, #0]
 8004fa2:	1b52      	subs	r2, r2, r5
 8004fa4:	d420      	bmi.n	8004fe8 <_malloc_r+0xd0>
 8004fa6:	2a0b      	cmp	r2, #11
 8004fa8:	d917      	bls.n	8004fda <_malloc_r+0xc2>
 8004faa:	1961      	adds	r1, r4, r5
 8004fac:	42a3      	cmp	r3, r4
 8004fae:	6025      	str	r5, [r4, #0]
 8004fb0:	bf18      	it	ne
 8004fb2:	6059      	strne	r1, [r3, #4]
 8004fb4:	6863      	ldr	r3, [r4, #4]
 8004fb6:	bf08      	it	eq
 8004fb8:	f8c8 1000 	streq.w	r1, [r8]
 8004fbc:	5162      	str	r2, [r4, r5]
 8004fbe:	604b      	str	r3, [r1, #4]
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	f000 f82f 	bl	8005024 <__malloc_unlock>
 8004fc6:	f104 000b 	add.w	r0, r4, #11
 8004fca:	1d23      	adds	r3, r4, #4
 8004fcc:	f020 0007 	bic.w	r0, r0, #7
 8004fd0:	1ac2      	subs	r2, r0, r3
 8004fd2:	bf1c      	itt	ne
 8004fd4:	1a1b      	subne	r3, r3, r0
 8004fd6:	50a3      	strne	r3, [r4, r2]
 8004fd8:	e7af      	b.n	8004f3a <_malloc_r+0x22>
 8004fda:	6862      	ldr	r2, [r4, #4]
 8004fdc:	42a3      	cmp	r3, r4
 8004fde:	bf0c      	ite	eq
 8004fe0:	f8c8 2000 	streq.w	r2, [r8]
 8004fe4:	605a      	strne	r2, [r3, #4]
 8004fe6:	e7eb      	b.n	8004fc0 <_malloc_r+0xa8>
 8004fe8:	4623      	mov	r3, r4
 8004fea:	6864      	ldr	r4, [r4, #4]
 8004fec:	e7ae      	b.n	8004f4c <_malloc_r+0x34>
 8004fee:	463c      	mov	r4, r7
 8004ff0:	687f      	ldr	r7, [r7, #4]
 8004ff2:	e7b6      	b.n	8004f62 <_malloc_r+0x4a>
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	42a3      	cmp	r3, r4
 8004ffa:	d1fb      	bne.n	8004ff4 <_malloc_r+0xdc>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	6053      	str	r3, [r2, #4]
 8005000:	e7de      	b.n	8004fc0 <_malloc_r+0xa8>
 8005002:	230c      	movs	r3, #12
 8005004:	6033      	str	r3, [r6, #0]
 8005006:	4630      	mov	r0, r6
 8005008:	f000 f80c 	bl	8005024 <__malloc_unlock>
 800500c:	e794      	b.n	8004f38 <_malloc_r+0x20>
 800500e:	6005      	str	r5, [r0, #0]
 8005010:	e7d6      	b.n	8004fc0 <_malloc_r+0xa8>
 8005012:	bf00      	nop
 8005014:	20005610 	.word	0x20005610

08005018 <__malloc_lock>:
 8005018:	4801      	ldr	r0, [pc, #4]	@ (8005020 <__malloc_lock+0x8>)
 800501a:	f001 b8e8 	b.w	80061ee <__retarget_lock_acquire_recursive>
 800501e:	bf00      	nop
 8005020:	20005754 	.word	0x20005754

08005024 <__malloc_unlock>:
 8005024:	4801      	ldr	r0, [pc, #4]	@ (800502c <__malloc_unlock+0x8>)
 8005026:	f001 b8e3 	b.w	80061f0 <__retarget_lock_release_recursive>
 800502a:	bf00      	nop
 800502c:	20005754 	.word	0x20005754

08005030 <siprintf>:
 8005030:	b40e      	push	{r1, r2, r3}
 8005032:	b500      	push	{lr}
 8005034:	b09c      	sub	sp, #112	@ 0x70
 8005036:	ab1d      	add	r3, sp, #116	@ 0x74
 8005038:	9002      	str	r0, [sp, #8]
 800503a:	9006      	str	r0, [sp, #24]
 800503c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005040:	4809      	ldr	r0, [pc, #36]	@ (8005068 <siprintf+0x38>)
 8005042:	9107      	str	r1, [sp, #28]
 8005044:	9104      	str	r1, [sp, #16]
 8005046:	4909      	ldr	r1, [pc, #36]	@ (800506c <siprintf+0x3c>)
 8005048:	f853 2b04 	ldr.w	r2, [r3], #4
 800504c:	9105      	str	r1, [sp, #20]
 800504e:	6800      	ldr	r0, [r0, #0]
 8005050:	9301      	str	r3, [sp, #4]
 8005052:	a902      	add	r1, sp, #8
 8005054:	f001 fcc2 	bl	80069dc <_svfiprintf_r>
 8005058:	9b02      	ldr	r3, [sp, #8]
 800505a:	2200      	movs	r2, #0
 800505c:	701a      	strb	r2, [r3, #0]
 800505e:	b01c      	add	sp, #112	@ 0x70
 8005060:	f85d eb04 	ldr.w	lr, [sp], #4
 8005064:	b003      	add	sp, #12
 8005066:	4770      	bx	lr
 8005068:	20000194 	.word	0x20000194
 800506c:	ffff0208 	.word	0xffff0208

08005070 <siscanf>:
 8005070:	b40e      	push	{r1, r2, r3}
 8005072:	b530      	push	{r4, r5, lr}
 8005074:	b09c      	sub	sp, #112	@ 0x70
 8005076:	ac1f      	add	r4, sp, #124	@ 0x7c
 8005078:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800507c:	f854 5b04 	ldr.w	r5, [r4], #4
 8005080:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005084:	9002      	str	r0, [sp, #8]
 8005086:	9006      	str	r0, [sp, #24]
 8005088:	f7fb f8c2 	bl	8000210 <strlen>
 800508c:	4b0b      	ldr	r3, [pc, #44]	@ (80050bc <siscanf+0x4c>)
 800508e:	9003      	str	r0, [sp, #12]
 8005090:	9007      	str	r0, [sp, #28]
 8005092:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005094:	480a      	ldr	r0, [pc, #40]	@ (80050c0 <siscanf+0x50>)
 8005096:	9401      	str	r4, [sp, #4]
 8005098:	2300      	movs	r3, #0
 800509a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800509c:	9314      	str	r3, [sp, #80]	@ 0x50
 800509e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80050a2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80050a6:	462a      	mov	r2, r5
 80050a8:	4623      	mov	r3, r4
 80050aa:	a902      	add	r1, sp, #8
 80050ac:	6800      	ldr	r0, [r0, #0]
 80050ae:	f001 fde9 	bl	8006c84 <__ssvfiscanf_r>
 80050b2:	b01c      	add	sp, #112	@ 0x70
 80050b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050b8:	b003      	add	sp, #12
 80050ba:	4770      	bx	lr
 80050bc:	080050e7 	.word	0x080050e7
 80050c0:	20000194 	.word	0x20000194

080050c4 <__sread>:
 80050c4:	b510      	push	{r4, lr}
 80050c6:	460c      	mov	r4, r1
 80050c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050cc:	f001 f830 	bl	8006130 <_read_r>
 80050d0:	2800      	cmp	r0, #0
 80050d2:	bfab      	itete	ge
 80050d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80050d6:	89a3      	ldrhlt	r3, [r4, #12]
 80050d8:	181b      	addge	r3, r3, r0
 80050da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80050de:	bfac      	ite	ge
 80050e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80050e2:	81a3      	strhlt	r3, [r4, #12]
 80050e4:	bd10      	pop	{r4, pc}

080050e6 <__seofread>:
 80050e6:	2000      	movs	r0, #0
 80050e8:	4770      	bx	lr

080050ea <__swrite>:
 80050ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050ee:	461f      	mov	r7, r3
 80050f0:	898b      	ldrh	r3, [r1, #12]
 80050f2:	05db      	lsls	r3, r3, #23
 80050f4:	4605      	mov	r5, r0
 80050f6:	460c      	mov	r4, r1
 80050f8:	4616      	mov	r6, r2
 80050fa:	d505      	bpl.n	8005108 <__swrite+0x1e>
 80050fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005100:	2302      	movs	r3, #2
 8005102:	2200      	movs	r2, #0
 8005104:	f001 f802 	bl	800610c <_lseek_r>
 8005108:	89a3      	ldrh	r3, [r4, #12]
 800510a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800510e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005112:	81a3      	strh	r3, [r4, #12]
 8005114:	4632      	mov	r2, r6
 8005116:	463b      	mov	r3, r7
 8005118:	4628      	mov	r0, r5
 800511a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800511e:	f001 b829 	b.w	8006174 <_write_r>

08005122 <__sseek>:
 8005122:	b510      	push	{r4, lr}
 8005124:	460c      	mov	r4, r1
 8005126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800512a:	f000 ffef 	bl	800610c <_lseek_r>
 800512e:	1c43      	adds	r3, r0, #1
 8005130:	89a3      	ldrh	r3, [r4, #12]
 8005132:	bf15      	itete	ne
 8005134:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005136:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800513a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800513e:	81a3      	strheq	r3, [r4, #12]
 8005140:	bf18      	it	ne
 8005142:	81a3      	strhne	r3, [r4, #12]
 8005144:	bd10      	pop	{r4, pc}

08005146 <__sclose>:
 8005146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800514a:	f000 bfcf 	b.w	80060ec <_close_r>
	...

08005150 <realloc>:
 8005150:	4b02      	ldr	r3, [pc, #8]	@ (800515c <realloc+0xc>)
 8005152:	460a      	mov	r2, r1
 8005154:	4601      	mov	r1, r0
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	f000 b8b8 	b.w	80052cc <_realloc_r>
 800515c:	20000194 	.word	0x20000194

08005160 <std>:
 8005160:	2300      	movs	r3, #0
 8005162:	b510      	push	{r4, lr}
 8005164:	4604      	mov	r4, r0
 8005166:	e9c0 3300 	strd	r3, r3, [r0]
 800516a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800516e:	6083      	str	r3, [r0, #8]
 8005170:	8181      	strh	r1, [r0, #12]
 8005172:	6643      	str	r3, [r0, #100]	@ 0x64
 8005174:	81c2      	strh	r2, [r0, #14]
 8005176:	6183      	str	r3, [r0, #24]
 8005178:	4619      	mov	r1, r3
 800517a:	2208      	movs	r2, #8
 800517c:	305c      	adds	r0, #92	@ 0x5c
 800517e:	f000 ffac 	bl	80060da <memset>
 8005182:	4b0d      	ldr	r3, [pc, #52]	@ (80051b8 <std+0x58>)
 8005184:	6263      	str	r3, [r4, #36]	@ 0x24
 8005186:	4b0d      	ldr	r3, [pc, #52]	@ (80051bc <std+0x5c>)
 8005188:	62a3      	str	r3, [r4, #40]	@ 0x28
 800518a:	4b0d      	ldr	r3, [pc, #52]	@ (80051c0 <std+0x60>)
 800518c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800518e:	4b0d      	ldr	r3, [pc, #52]	@ (80051c4 <std+0x64>)
 8005190:	6323      	str	r3, [r4, #48]	@ 0x30
 8005192:	4b0d      	ldr	r3, [pc, #52]	@ (80051c8 <std+0x68>)
 8005194:	6224      	str	r4, [r4, #32]
 8005196:	429c      	cmp	r4, r3
 8005198:	d006      	beq.n	80051a8 <std+0x48>
 800519a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800519e:	4294      	cmp	r4, r2
 80051a0:	d002      	beq.n	80051a8 <std+0x48>
 80051a2:	33d0      	adds	r3, #208	@ 0xd0
 80051a4:	429c      	cmp	r4, r3
 80051a6:	d105      	bne.n	80051b4 <std+0x54>
 80051a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80051ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051b0:	f001 b81c 	b.w	80061ec <__retarget_lock_init_recursive>
 80051b4:	bd10      	pop	{r4, pc}
 80051b6:	bf00      	nop
 80051b8:	080050c5 	.word	0x080050c5
 80051bc:	080050eb 	.word	0x080050eb
 80051c0:	08005123 	.word	0x08005123
 80051c4:	08005147 	.word	0x08005147
 80051c8:	20005614 	.word	0x20005614

080051cc <stdio_exit_handler>:
 80051cc:	4a02      	ldr	r2, [pc, #8]	@ (80051d8 <stdio_exit_handler+0xc>)
 80051ce:	4903      	ldr	r1, [pc, #12]	@ (80051dc <stdio_exit_handler+0x10>)
 80051d0:	4803      	ldr	r0, [pc, #12]	@ (80051e0 <stdio_exit_handler+0x14>)
 80051d2:	f000 bf3f 	b.w	8006054 <_fwalk_sglue>
 80051d6:	bf00      	nop
 80051d8:	2000001c 	.word	0x2000001c
 80051dc:	08007949 	.word	0x08007949
 80051e0:	20000198 	.word	0x20000198

080051e4 <cleanup_stdio>:
 80051e4:	6841      	ldr	r1, [r0, #4]
 80051e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005218 <cleanup_stdio+0x34>)
 80051e8:	4299      	cmp	r1, r3
 80051ea:	b510      	push	{r4, lr}
 80051ec:	4604      	mov	r4, r0
 80051ee:	d001      	beq.n	80051f4 <cleanup_stdio+0x10>
 80051f0:	f002 fbaa 	bl	8007948 <_fflush_r>
 80051f4:	68a1      	ldr	r1, [r4, #8]
 80051f6:	4b09      	ldr	r3, [pc, #36]	@ (800521c <cleanup_stdio+0x38>)
 80051f8:	4299      	cmp	r1, r3
 80051fa:	d002      	beq.n	8005202 <cleanup_stdio+0x1e>
 80051fc:	4620      	mov	r0, r4
 80051fe:	f002 fba3 	bl	8007948 <_fflush_r>
 8005202:	68e1      	ldr	r1, [r4, #12]
 8005204:	4b06      	ldr	r3, [pc, #24]	@ (8005220 <cleanup_stdio+0x3c>)
 8005206:	4299      	cmp	r1, r3
 8005208:	d004      	beq.n	8005214 <cleanup_stdio+0x30>
 800520a:	4620      	mov	r0, r4
 800520c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005210:	f002 bb9a 	b.w	8007948 <_fflush_r>
 8005214:	bd10      	pop	{r4, pc}
 8005216:	bf00      	nop
 8005218:	20005614 	.word	0x20005614
 800521c:	2000567c 	.word	0x2000567c
 8005220:	200056e4 	.word	0x200056e4

08005224 <global_stdio_init.part.0>:
 8005224:	b510      	push	{r4, lr}
 8005226:	4b0b      	ldr	r3, [pc, #44]	@ (8005254 <global_stdio_init.part.0+0x30>)
 8005228:	4c0b      	ldr	r4, [pc, #44]	@ (8005258 <global_stdio_init.part.0+0x34>)
 800522a:	4a0c      	ldr	r2, [pc, #48]	@ (800525c <global_stdio_init.part.0+0x38>)
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	4620      	mov	r0, r4
 8005230:	2200      	movs	r2, #0
 8005232:	2104      	movs	r1, #4
 8005234:	f7ff ff94 	bl	8005160 <std>
 8005238:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800523c:	2201      	movs	r2, #1
 800523e:	2109      	movs	r1, #9
 8005240:	f7ff ff8e 	bl	8005160 <std>
 8005244:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005248:	2202      	movs	r2, #2
 800524a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800524e:	2112      	movs	r1, #18
 8005250:	f7ff bf86 	b.w	8005160 <std>
 8005254:	2000574c 	.word	0x2000574c
 8005258:	20005614 	.word	0x20005614
 800525c:	080051cd 	.word	0x080051cd

08005260 <__sfp_lock_acquire>:
 8005260:	4801      	ldr	r0, [pc, #4]	@ (8005268 <__sfp_lock_acquire+0x8>)
 8005262:	f000 bfc4 	b.w	80061ee <__retarget_lock_acquire_recursive>
 8005266:	bf00      	nop
 8005268:	20005755 	.word	0x20005755

0800526c <__sfp_lock_release>:
 800526c:	4801      	ldr	r0, [pc, #4]	@ (8005274 <__sfp_lock_release+0x8>)
 800526e:	f000 bfbf 	b.w	80061f0 <__retarget_lock_release_recursive>
 8005272:	bf00      	nop
 8005274:	20005755 	.word	0x20005755

08005278 <__sinit>:
 8005278:	b510      	push	{r4, lr}
 800527a:	4604      	mov	r4, r0
 800527c:	f7ff fff0 	bl	8005260 <__sfp_lock_acquire>
 8005280:	6a23      	ldr	r3, [r4, #32]
 8005282:	b11b      	cbz	r3, 800528c <__sinit+0x14>
 8005284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005288:	f7ff bff0 	b.w	800526c <__sfp_lock_release>
 800528c:	4b04      	ldr	r3, [pc, #16]	@ (80052a0 <__sinit+0x28>)
 800528e:	6223      	str	r3, [r4, #32]
 8005290:	4b04      	ldr	r3, [pc, #16]	@ (80052a4 <__sinit+0x2c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1f5      	bne.n	8005284 <__sinit+0xc>
 8005298:	f7ff ffc4 	bl	8005224 <global_stdio_init.part.0>
 800529c:	e7f2      	b.n	8005284 <__sinit+0xc>
 800529e:	bf00      	nop
 80052a0:	080051e5 	.word	0x080051e5
 80052a4:	2000574c 	.word	0x2000574c

080052a8 <fiprintf>:
 80052a8:	b40e      	push	{r1, r2, r3}
 80052aa:	b503      	push	{r0, r1, lr}
 80052ac:	4601      	mov	r1, r0
 80052ae:	ab03      	add	r3, sp, #12
 80052b0:	4805      	ldr	r0, [pc, #20]	@ (80052c8 <fiprintf+0x20>)
 80052b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80052b6:	6800      	ldr	r0, [r0, #0]
 80052b8:	9301      	str	r3, [sp, #4]
 80052ba:	f001 fe81 	bl	8006fc0 <_vfiprintf_r>
 80052be:	b002      	add	sp, #8
 80052c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80052c4:	b003      	add	sp, #12
 80052c6:	4770      	bx	lr
 80052c8:	20000194 	.word	0x20000194

080052cc <_realloc_r>:
 80052cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052d0:	4680      	mov	r8, r0
 80052d2:	4615      	mov	r5, r2
 80052d4:	460c      	mov	r4, r1
 80052d6:	b921      	cbnz	r1, 80052e2 <_realloc_r+0x16>
 80052d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052dc:	4611      	mov	r1, r2
 80052de:	f7ff be1b 	b.w	8004f18 <_malloc_r>
 80052e2:	b92a      	cbnz	r2, 80052f0 <_realloc_r+0x24>
 80052e4:	f000 ff9c 	bl	8006220 <_free_r>
 80052e8:	2400      	movs	r4, #0
 80052ea:	4620      	mov	r0, r4
 80052ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052f0:	f003 f804 	bl	80082fc <_malloc_usable_size_r>
 80052f4:	4285      	cmp	r5, r0
 80052f6:	4606      	mov	r6, r0
 80052f8:	d802      	bhi.n	8005300 <_realloc_r+0x34>
 80052fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80052fe:	d8f4      	bhi.n	80052ea <_realloc_r+0x1e>
 8005300:	4629      	mov	r1, r5
 8005302:	4640      	mov	r0, r8
 8005304:	f7ff fe08 	bl	8004f18 <_malloc_r>
 8005308:	4607      	mov	r7, r0
 800530a:	2800      	cmp	r0, #0
 800530c:	d0ec      	beq.n	80052e8 <_realloc_r+0x1c>
 800530e:	42b5      	cmp	r5, r6
 8005310:	462a      	mov	r2, r5
 8005312:	4621      	mov	r1, r4
 8005314:	bf28      	it	cs
 8005316:	4632      	movcs	r2, r6
 8005318:	f000 ff6b 	bl	80061f2 <memcpy>
 800531c:	4621      	mov	r1, r4
 800531e:	4640      	mov	r0, r8
 8005320:	f000 ff7e 	bl	8006220 <_free_r>
 8005324:	463c      	mov	r4, r7
 8005326:	e7e0      	b.n	80052ea <_realloc_r+0x1e>

08005328 <sulp>:
 8005328:	b570      	push	{r4, r5, r6, lr}
 800532a:	4604      	mov	r4, r0
 800532c:	460d      	mov	r5, r1
 800532e:	ec45 4b10 	vmov	d0, r4, r5
 8005332:	4616      	mov	r6, r2
 8005334:	f002 fea4 	bl	8008080 <__ulp>
 8005338:	ec51 0b10 	vmov	r0, r1, d0
 800533c:	b17e      	cbz	r6, 800535e <sulp+0x36>
 800533e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005342:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005346:	2b00      	cmp	r3, #0
 8005348:	dd09      	ble.n	800535e <sulp+0x36>
 800534a:	051b      	lsls	r3, r3, #20
 800534c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005350:	2400      	movs	r4, #0
 8005352:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005356:	4622      	mov	r2, r4
 8005358:	462b      	mov	r3, r5
 800535a:	f7fb f97d 	bl	8000658 <__aeabi_dmul>
 800535e:	ec41 0b10 	vmov	d0, r0, r1
 8005362:	bd70      	pop	{r4, r5, r6, pc}
 8005364:	0000      	movs	r0, r0
	...

08005368 <_strtod_l>:
 8005368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800536c:	b09f      	sub	sp, #124	@ 0x7c
 800536e:	460c      	mov	r4, r1
 8005370:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005372:	2200      	movs	r2, #0
 8005374:	921a      	str	r2, [sp, #104]	@ 0x68
 8005376:	9005      	str	r0, [sp, #20]
 8005378:	f04f 0a00 	mov.w	sl, #0
 800537c:	f04f 0b00 	mov.w	fp, #0
 8005380:	460a      	mov	r2, r1
 8005382:	9219      	str	r2, [sp, #100]	@ 0x64
 8005384:	7811      	ldrb	r1, [r2, #0]
 8005386:	292b      	cmp	r1, #43	@ 0x2b
 8005388:	d04a      	beq.n	8005420 <_strtod_l+0xb8>
 800538a:	d838      	bhi.n	80053fe <_strtod_l+0x96>
 800538c:	290d      	cmp	r1, #13
 800538e:	d832      	bhi.n	80053f6 <_strtod_l+0x8e>
 8005390:	2908      	cmp	r1, #8
 8005392:	d832      	bhi.n	80053fa <_strtod_l+0x92>
 8005394:	2900      	cmp	r1, #0
 8005396:	d03b      	beq.n	8005410 <_strtod_l+0xa8>
 8005398:	2200      	movs	r2, #0
 800539a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800539c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800539e:	782a      	ldrb	r2, [r5, #0]
 80053a0:	2a30      	cmp	r2, #48	@ 0x30
 80053a2:	f040 80b3 	bne.w	800550c <_strtod_l+0x1a4>
 80053a6:	786a      	ldrb	r2, [r5, #1]
 80053a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80053ac:	2a58      	cmp	r2, #88	@ 0x58
 80053ae:	d16e      	bne.n	800548e <_strtod_l+0x126>
 80053b0:	9302      	str	r3, [sp, #8]
 80053b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053b4:	9301      	str	r3, [sp, #4]
 80053b6:	ab1a      	add	r3, sp, #104	@ 0x68
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	4a8e      	ldr	r2, [pc, #568]	@ (80055f4 <_strtod_l+0x28c>)
 80053bc:	9805      	ldr	r0, [sp, #20]
 80053be:	ab1b      	add	r3, sp, #108	@ 0x6c
 80053c0:	a919      	add	r1, sp, #100	@ 0x64
 80053c2:	f000 ffdf 	bl	8006384 <__gethex>
 80053c6:	f010 060f 	ands.w	r6, r0, #15
 80053ca:	4604      	mov	r4, r0
 80053cc:	d005      	beq.n	80053da <_strtod_l+0x72>
 80053ce:	2e06      	cmp	r6, #6
 80053d0:	d128      	bne.n	8005424 <_strtod_l+0xbc>
 80053d2:	3501      	adds	r5, #1
 80053d4:	2300      	movs	r3, #0
 80053d6:	9519      	str	r5, [sp, #100]	@ 0x64
 80053d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f040 858e 	bne.w	8005efe <_strtod_l+0xb96>
 80053e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053e4:	b1cb      	cbz	r3, 800541a <_strtod_l+0xb2>
 80053e6:	4652      	mov	r2, sl
 80053e8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80053ec:	ec43 2b10 	vmov	d0, r2, r3
 80053f0:	b01f      	add	sp, #124	@ 0x7c
 80053f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f6:	2920      	cmp	r1, #32
 80053f8:	d1ce      	bne.n	8005398 <_strtod_l+0x30>
 80053fa:	3201      	adds	r2, #1
 80053fc:	e7c1      	b.n	8005382 <_strtod_l+0x1a>
 80053fe:	292d      	cmp	r1, #45	@ 0x2d
 8005400:	d1ca      	bne.n	8005398 <_strtod_l+0x30>
 8005402:	2101      	movs	r1, #1
 8005404:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005406:	1c51      	adds	r1, r2, #1
 8005408:	9119      	str	r1, [sp, #100]	@ 0x64
 800540a:	7852      	ldrb	r2, [r2, #1]
 800540c:	2a00      	cmp	r2, #0
 800540e:	d1c5      	bne.n	800539c <_strtod_l+0x34>
 8005410:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005412:	9419      	str	r4, [sp, #100]	@ 0x64
 8005414:	2b00      	cmp	r3, #0
 8005416:	f040 8570 	bne.w	8005efa <_strtod_l+0xb92>
 800541a:	4652      	mov	r2, sl
 800541c:	465b      	mov	r3, fp
 800541e:	e7e5      	b.n	80053ec <_strtod_l+0x84>
 8005420:	2100      	movs	r1, #0
 8005422:	e7ef      	b.n	8005404 <_strtod_l+0x9c>
 8005424:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005426:	b13a      	cbz	r2, 8005438 <_strtod_l+0xd0>
 8005428:	2135      	movs	r1, #53	@ 0x35
 800542a:	a81c      	add	r0, sp, #112	@ 0x70
 800542c:	f002 ff22 	bl	8008274 <__copybits>
 8005430:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005432:	9805      	ldr	r0, [sp, #20]
 8005434:	f002 faf0 	bl	8007a18 <_Bfree>
 8005438:	3e01      	subs	r6, #1
 800543a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800543c:	2e04      	cmp	r6, #4
 800543e:	d806      	bhi.n	800544e <_strtod_l+0xe6>
 8005440:	e8df f006 	tbb	[pc, r6]
 8005444:	201d0314 	.word	0x201d0314
 8005448:	14          	.byte	0x14
 8005449:	00          	.byte	0x00
 800544a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800544e:	05e1      	lsls	r1, r4, #23
 8005450:	bf48      	it	mi
 8005452:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005456:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800545a:	0d1b      	lsrs	r3, r3, #20
 800545c:	051b      	lsls	r3, r3, #20
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1bb      	bne.n	80053da <_strtod_l+0x72>
 8005462:	f000 fe99 	bl	8006198 <__errno>
 8005466:	2322      	movs	r3, #34	@ 0x22
 8005468:	6003      	str	r3, [r0, #0]
 800546a:	e7b6      	b.n	80053da <_strtod_l+0x72>
 800546c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005470:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005474:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005478:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800547c:	e7e7      	b.n	800544e <_strtod_l+0xe6>
 800547e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80055fc <_strtod_l+0x294>
 8005482:	e7e4      	b.n	800544e <_strtod_l+0xe6>
 8005484:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005488:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800548c:	e7df      	b.n	800544e <_strtod_l+0xe6>
 800548e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	9219      	str	r2, [sp, #100]	@ 0x64
 8005494:	785b      	ldrb	r3, [r3, #1]
 8005496:	2b30      	cmp	r3, #48	@ 0x30
 8005498:	d0f9      	beq.n	800548e <_strtod_l+0x126>
 800549a:	2b00      	cmp	r3, #0
 800549c:	d09d      	beq.n	80053da <_strtod_l+0x72>
 800549e:	2301      	movs	r3, #1
 80054a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80054a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80054a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80054a6:	2300      	movs	r3, #0
 80054a8:	9308      	str	r3, [sp, #32]
 80054aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80054ac:	461f      	mov	r7, r3
 80054ae:	220a      	movs	r2, #10
 80054b0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80054b2:	7805      	ldrb	r5, [r0, #0]
 80054b4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80054b8:	b2d9      	uxtb	r1, r3
 80054ba:	2909      	cmp	r1, #9
 80054bc:	d928      	bls.n	8005510 <_strtod_l+0x1a8>
 80054be:	494e      	ldr	r1, [pc, #312]	@ (80055f8 <_strtod_l+0x290>)
 80054c0:	2201      	movs	r2, #1
 80054c2:	f000 fde5 	bl	8006090 <strncmp>
 80054c6:	2800      	cmp	r0, #0
 80054c8:	d032      	beq.n	8005530 <_strtod_l+0x1c8>
 80054ca:	2000      	movs	r0, #0
 80054cc:	462a      	mov	r2, r5
 80054ce:	4681      	mov	r9, r0
 80054d0:	463d      	mov	r5, r7
 80054d2:	4603      	mov	r3, r0
 80054d4:	2a65      	cmp	r2, #101	@ 0x65
 80054d6:	d001      	beq.n	80054dc <_strtod_l+0x174>
 80054d8:	2a45      	cmp	r2, #69	@ 0x45
 80054da:	d114      	bne.n	8005506 <_strtod_l+0x19e>
 80054dc:	b91d      	cbnz	r5, 80054e6 <_strtod_l+0x17e>
 80054de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054e0:	4302      	orrs	r2, r0
 80054e2:	d095      	beq.n	8005410 <_strtod_l+0xa8>
 80054e4:	2500      	movs	r5, #0
 80054e6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80054e8:	1c62      	adds	r2, r4, #1
 80054ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80054ec:	7862      	ldrb	r2, [r4, #1]
 80054ee:	2a2b      	cmp	r2, #43	@ 0x2b
 80054f0:	d077      	beq.n	80055e2 <_strtod_l+0x27a>
 80054f2:	2a2d      	cmp	r2, #45	@ 0x2d
 80054f4:	d07b      	beq.n	80055ee <_strtod_l+0x286>
 80054f6:	f04f 0c00 	mov.w	ip, #0
 80054fa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80054fe:	2909      	cmp	r1, #9
 8005500:	f240 8082 	bls.w	8005608 <_strtod_l+0x2a0>
 8005504:	9419      	str	r4, [sp, #100]	@ 0x64
 8005506:	f04f 0800 	mov.w	r8, #0
 800550a:	e0a2      	b.n	8005652 <_strtod_l+0x2ea>
 800550c:	2300      	movs	r3, #0
 800550e:	e7c7      	b.n	80054a0 <_strtod_l+0x138>
 8005510:	2f08      	cmp	r7, #8
 8005512:	bfd5      	itete	le
 8005514:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005516:	9908      	ldrgt	r1, [sp, #32]
 8005518:	fb02 3301 	mlale	r3, r2, r1, r3
 800551c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005520:	f100 0001 	add.w	r0, r0, #1
 8005524:	bfd4      	ite	le
 8005526:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005528:	9308      	strgt	r3, [sp, #32]
 800552a:	3701      	adds	r7, #1
 800552c:	9019      	str	r0, [sp, #100]	@ 0x64
 800552e:	e7bf      	b.n	80054b0 <_strtod_l+0x148>
 8005530:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	9219      	str	r2, [sp, #100]	@ 0x64
 8005536:	785a      	ldrb	r2, [r3, #1]
 8005538:	b37f      	cbz	r7, 800559a <_strtod_l+0x232>
 800553a:	4681      	mov	r9, r0
 800553c:	463d      	mov	r5, r7
 800553e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005542:	2b09      	cmp	r3, #9
 8005544:	d912      	bls.n	800556c <_strtod_l+0x204>
 8005546:	2301      	movs	r3, #1
 8005548:	e7c4      	b.n	80054d4 <_strtod_l+0x16c>
 800554a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005550:	785a      	ldrb	r2, [r3, #1]
 8005552:	3001      	adds	r0, #1
 8005554:	2a30      	cmp	r2, #48	@ 0x30
 8005556:	d0f8      	beq.n	800554a <_strtod_l+0x1e2>
 8005558:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800555c:	2b08      	cmp	r3, #8
 800555e:	f200 84d3 	bhi.w	8005f08 <_strtod_l+0xba0>
 8005562:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005564:	930c      	str	r3, [sp, #48]	@ 0x30
 8005566:	4681      	mov	r9, r0
 8005568:	2000      	movs	r0, #0
 800556a:	4605      	mov	r5, r0
 800556c:	3a30      	subs	r2, #48	@ 0x30
 800556e:	f100 0301 	add.w	r3, r0, #1
 8005572:	d02a      	beq.n	80055ca <_strtod_l+0x262>
 8005574:	4499      	add	r9, r3
 8005576:	eb00 0c05 	add.w	ip, r0, r5
 800557a:	462b      	mov	r3, r5
 800557c:	210a      	movs	r1, #10
 800557e:	4563      	cmp	r3, ip
 8005580:	d10d      	bne.n	800559e <_strtod_l+0x236>
 8005582:	1c69      	adds	r1, r5, #1
 8005584:	4401      	add	r1, r0
 8005586:	4428      	add	r0, r5
 8005588:	2808      	cmp	r0, #8
 800558a:	dc16      	bgt.n	80055ba <_strtod_l+0x252>
 800558c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800558e:	230a      	movs	r3, #10
 8005590:	fb03 2300 	mla	r3, r3, r0, r2
 8005594:	930a      	str	r3, [sp, #40]	@ 0x28
 8005596:	2300      	movs	r3, #0
 8005598:	e018      	b.n	80055cc <_strtod_l+0x264>
 800559a:	4638      	mov	r0, r7
 800559c:	e7da      	b.n	8005554 <_strtod_l+0x1ec>
 800559e:	2b08      	cmp	r3, #8
 80055a0:	f103 0301 	add.w	r3, r3, #1
 80055a4:	dc03      	bgt.n	80055ae <_strtod_l+0x246>
 80055a6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80055a8:	434e      	muls	r6, r1
 80055aa:	960a      	str	r6, [sp, #40]	@ 0x28
 80055ac:	e7e7      	b.n	800557e <_strtod_l+0x216>
 80055ae:	2b10      	cmp	r3, #16
 80055b0:	bfde      	ittt	le
 80055b2:	9e08      	ldrle	r6, [sp, #32]
 80055b4:	434e      	mulle	r6, r1
 80055b6:	9608      	strle	r6, [sp, #32]
 80055b8:	e7e1      	b.n	800557e <_strtod_l+0x216>
 80055ba:	280f      	cmp	r0, #15
 80055bc:	dceb      	bgt.n	8005596 <_strtod_l+0x22e>
 80055be:	9808      	ldr	r0, [sp, #32]
 80055c0:	230a      	movs	r3, #10
 80055c2:	fb03 2300 	mla	r3, r3, r0, r2
 80055c6:	9308      	str	r3, [sp, #32]
 80055c8:	e7e5      	b.n	8005596 <_strtod_l+0x22e>
 80055ca:	4629      	mov	r1, r5
 80055cc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80055ce:	1c50      	adds	r0, r2, #1
 80055d0:	9019      	str	r0, [sp, #100]	@ 0x64
 80055d2:	7852      	ldrb	r2, [r2, #1]
 80055d4:	4618      	mov	r0, r3
 80055d6:	460d      	mov	r5, r1
 80055d8:	e7b1      	b.n	800553e <_strtod_l+0x1d6>
 80055da:	f04f 0900 	mov.w	r9, #0
 80055de:	2301      	movs	r3, #1
 80055e0:	e77d      	b.n	80054de <_strtod_l+0x176>
 80055e2:	f04f 0c00 	mov.w	ip, #0
 80055e6:	1ca2      	adds	r2, r4, #2
 80055e8:	9219      	str	r2, [sp, #100]	@ 0x64
 80055ea:	78a2      	ldrb	r2, [r4, #2]
 80055ec:	e785      	b.n	80054fa <_strtod_l+0x192>
 80055ee:	f04f 0c01 	mov.w	ip, #1
 80055f2:	e7f8      	b.n	80055e6 <_strtod_l+0x27e>
 80055f4:	08009308 	.word	0x08009308
 80055f8:	080092e4 	.word	0x080092e4
 80055fc:	7ff00000 	.word	0x7ff00000
 8005600:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005602:	1c51      	adds	r1, r2, #1
 8005604:	9119      	str	r1, [sp, #100]	@ 0x64
 8005606:	7852      	ldrb	r2, [r2, #1]
 8005608:	2a30      	cmp	r2, #48	@ 0x30
 800560a:	d0f9      	beq.n	8005600 <_strtod_l+0x298>
 800560c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005610:	2908      	cmp	r1, #8
 8005612:	f63f af78 	bhi.w	8005506 <_strtod_l+0x19e>
 8005616:	3a30      	subs	r2, #48	@ 0x30
 8005618:	920e      	str	r2, [sp, #56]	@ 0x38
 800561a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800561c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800561e:	f04f 080a 	mov.w	r8, #10
 8005622:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005624:	1c56      	adds	r6, r2, #1
 8005626:	9619      	str	r6, [sp, #100]	@ 0x64
 8005628:	7852      	ldrb	r2, [r2, #1]
 800562a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800562e:	f1be 0f09 	cmp.w	lr, #9
 8005632:	d939      	bls.n	80056a8 <_strtod_l+0x340>
 8005634:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005636:	1a76      	subs	r6, r6, r1
 8005638:	2e08      	cmp	r6, #8
 800563a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800563e:	dc03      	bgt.n	8005648 <_strtod_l+0x2e0>
 8005640:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005642:	4588      	cmp	r8, r1
 8005644:	bfa8      	it	ge
 8005646:	4688      	movge	r8, r1
 8005648:	f1bc 0f00 	cmp.w	ip, #0
 800564c:	d001      	beq.n	8005652 <_strtod_l+0x2ea>
 800564e:	f1c8 0800 	rsb	r8, r8, #0
 8005652:	2d00      	cmp	r5, #0
 8005654:	d14e      	bne.n	80056f4 <_strtod_l+0x38c>
 8005656:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005658:	4308      	orrs	r0, r1
 800565a:	f47f aebe 	bne.w	80053da <_strtod_l+0x72>
 800565e:	2b00      	cmp	r3, #0
 8005660:	f47f aed6 	bne.w	8005410 <_strtod_l+0xa8>
 8005664:	2a69      	cmp	r2, #105	@ 0x69
 8005666:	d028      	beq.n	80056ba <_strtod_l+0x352>
 8005668:	dc25      	bgt.n	80056b6 <_strtod_l+0x34e>
 800566a:	2a49      	cmp	r2, #73	@ 0x49
 800566c:	d025      	beq.n	80056ba <_strtod_l+0x352>
 800566e:	2a4e      	cmp	r2, #78	@ 0x4e
 8005670:	f47f aece 	bne.w	8005410 <_strtod_l+0xa8>
 8005674:	499b      	ldr	r1, [pc, #620]	@ (80058e4 <_strtod_l+0x57c>)
 8005676:	a819      	add	r0, sp, #100	@ 0x64
 8005678:	f001 f8a6 	bl	80067c8 <__match>
 800567c:	2800      	cmp	r0, #0
 800567e:	f43f aec7 	beq.w	8005410 <_strtod_l+0xa8>
 8005682:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	2b28      	cmp	r3, #40	@ 0x28
 8005688:	d12e      	bne.n	80056e8 <_strtod_l+0x380>
 800568a:	4997      	ldr	r1, [pc, #604]	@ (80058e8 <_strtod_l+0x580>)
 800568c:	aa1c      	add	r2, sp, #112	@ 0x70
 800568e:	a819      	add	r0, sp, #100	@ 0x64
 8005690:	f001 f8ae 	bl	80067f0 <__hexnan>
 8005694:	2805      	cmp	r0, #5
 8005696:	d127      	bne.n	80056e8 <_strtod_l+0x380>
 8005698:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800569a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800569e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80056a2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80056a6:	e698      	b.n	80053da <_strtod_l+0x72>
 80056a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80056aa:	fb08 2101 	mla	r1, r8, r1, r2
 80056ae:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80056b2:	920e      	str	r2, [sp, #56]	@ 0x38
 80056b4:	e7b5      	b.n	8005622 <_strtod_l+0x2ba>
 80056b6:	2a6e      	cmp	r2, #110	@ 0x6e
 80056b8:	e7da      	b.n	8005670 <_strtod_l+0x308>
 80056ba:	498c      	ldr	r1, [pc, #560]	@ (80058ec <_strtod_l+0x584>)
 80056bc:	a819      	add	r0, sp, #100	@ 0x64
 80056be:	f001 f883 	bl	80067c8 <__match>
 80056c2:	2800      	cmp	r0, #0
 80056c4:	f43f aea4 	beq.w	8005410 <_strtod_l+0xa8>
 80056c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80056ca:	4989      	ldr	r1, [pc, #548]	@ (80058f0 <_strtod_l+0x588>)
 80056cc:	3b01      	subs	r3, #1
 80056ce:	a819      	add	r0, sp, #100	@ 0x64
 80056d0:	9319      	str	r3, [sp, #100]	@ 0x64
 80056d2:	f001 f879 	bl	80067c8 <__match>
 80056d6:	b910      	cbnz	r0, 80056de <_strtod_l+0x376>
 80056d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80056da:	3301      	adds	r3, #1
 80056dc:	9319      	str	r3, [sp, #100]	@ 0x64
 80056de:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8005900 <_strtod_l+0x598>
 80056e2:	f04f 0a00 	mov.w	sl, #0
 80056e6:	e678      	b.n	80053da <_strtod_l+0x72>
 80056e8:	4882      	ldr	r0, [pc, #520]	@ (80058f4 <_strtod_l+0x58c>)
 80056ea:	f000 fd91 	bl	8006210 <nan>
 80056ee:	ec5b ab10 	vmov	sl, fp, d0
 80056f2:	e672      	b.n	80053da <_strtod_l+0x72>
 80056f4:	eba8 0309 	sub.w	r3, r8, r9
 80056f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80056fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80056fc:	2f00      	cmp	r7, #0
 80056fe:	bf08      	it	eq
 8005700:	462f      	moveq	r7, r5
 8005702:	2d10      	cmp	r5, #16
 8005704:	462c      	mov	r4, r5
 8005706:	bfa8      	it	ge
 8005708:	2410      	movge	r4, #16
 800570a:	f7fa ff2b 	bl	8000564 <__aeabi_ui2d>
 800570e:	2d09      	cmp	r5, #9
 8005710:	4682      	mov	sl, r0
 8005712:	468b      	mov	fp, r1
 8005714:	dc13      	bgt.n	800573e <_strtod_l+0x3d6>
 8005716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005718:	2b00      	cmp	r3, #0
 800571a:	f43f ae5e 	beq.w	80053da <_strtod_l+0x72>
 800571e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005720:	dd78      	ble.n	8005814 <_strtod_l+0x4ac>
 8005722:	2b16      	cmp	r3, #22
 8005724:	dc5f      	bgt.n	80057e6 <_strtod_l+0x47e>
 8005726:	4974      	ldr	r1, [pc, #464]	@ (80058f8 <_strtod_l+0x590>)
 8005728:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800572c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005730:	4652      	mov	r2, sl
 8005732:	465b      	mov	r3, fp
 8005734:	f7fa ff90 	bl	8000658 <__aeabi_dmul>
 8005738:	4682      	mov	sl, r0
 800573a:	468b      	mov	fp, r1
 800573c:	e64d      	b.n	80053da <_strtod_l+0x72>
 800573e:	4b6e      	ldr	r3, [pc, #440]	@ (80058f8 <_strtod_l+0x590>)
 8005740:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005744:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005748:	f7fa ff86 	bl	8000658 <__aeabi_dmul>
 800574c:	4682      	mov	sl, r0
 800574e:	9808      	ldr	r0, [sp, #32]
 8005750:	468b      	mov	fp, r1
 8005752:	f7fa ff07 	bl	8000564 <__aeabi_ui2d>
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	4650      	mov	r0, sl
 800575c:	4659      	mov	r1, fp
 800575e:	f7fa fdc5 	bl	80002ec <__adddf3>
 8005762:	2d0f      	cmp	r5, #15
 8005764:	4682      	mov	sl, r0
 8005766:	468b      	mov	fp, r1
 8005768:	ddd5      	ble.n	8005716 <_strtod_l+0x3ae>
 800576a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800576c:	1b2c      	subs	r4, r5, r4
 800576e:	441c      	add	r4, r3
 8005770:	2c00      	cmp	r4, #0
 8005772:	f340 8096 	ble.w	80058a2 <_strtod_l+0x53a>
 8005776:	f014 030f 	ands.w	r3, r4, #15
 800577a:	d00a      	beq.n	8005792 <_strtod_l+0x42a>
 800577c:	495e      	ldr	r1, [pc, #376]	@ (80058f8 <_strtod_l+0x590>)
 800577e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005782:	4652      	mov	r2, sl
 8005784:	465b      	mov	r3, fp
 8005786:	e9d1 0100 	ldrd	r0, r1, [r1]
 800578a:	f7fa ff65 	bl	8000658 <__aeabi_dmul>
 800578e:	4682      	mov	sl, r0
 8005790:	468b      	mov	fp, r1
 8005792:	f034 040f 	bics.w	r4, r4, #15
 8005796:	d073      	beq.n	8005880 <_strtod_l+0x518>
 8005798:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800579c:	dd48      	ble.n	8005830 <_strtod_l+0x4c8>
 800579e:	2400      	movs	r4, #0
 80057a0:	46a0      	mov	r8, r4
 80057a2:	940a      	str	r4, [sp, #40]	@ 0x28
 80057a4:	46a1      	mov	r9, r4
 80057a6:	9a05      	ldr	r2, [sp, #20]
 80057a8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8005900 <_strtod_l+0x598>
 80057ac:	2322      	movs	r3, #34	@ 0x22
 80057ae:	6013      	str	r3, [r2, #0]
 80057b0:	f04f 0a00 	mov.w	sl, #0
 80057b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f43f ae0f 	beq.w	80053da <_strtod_l+0x72>
 80057bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80057be:	9805      	ldr	r0, [sp, #20]
 80057c0:	f002 f92a 	bl	8007a18 <_Bfree>
 80057c4:	9805      	ldr	r0, [sp, #20]
 80057c6:	4649      	mov	r1, r9
 80057c8:	f002 f926 	bl	8007a18 <_Bfree>
 80057cc:	9805      	ldr	r0, [sp, #20]
 80057ce:	4641      	mov	r1, r8
 80057d0:	f002 f922 	bl	8007a18 <_Bfree>
 80057d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80057d6:	9805      	ldr	r0, [sp, #20]
 80057d8:	f002 f91e 	bl	8007a18 <_Bfree>
 80057dc:	9805      	ldr	r0, [sp, #20]
 80057de:	4621      	mov	r1, r4
 80057e0:	f002 f91a 	bl	8007a18 <_Bfree>
 80057e4:	e5f9      	b.n	80053da <_strtod_l+0x72>
 80057e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80057ec:	4293      	cmp	r3, r2
 80057ee:	dbbc      	blt.n	800576a <_strtod_l+0x402>
 80057f0:	4c41      	ldr	r4, [pc, #260]	@ (80058f8 <_strtod_l+0x590>)
 80057f2:	f1c5 050f 	rsb	r5, r5, #15
 80057f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80057fa:	4652      	mov	r2, sl
 80057fc:	465b      	mov	r3, fp
 80057fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005802:	f7fa ff29 	bl	8000658 <__aeabi_dmul>
 8005806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005808:	1b5d      	subs	r5, r3, r5
 800580a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800580e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005812:	e78f      	b.n	8005734 <_strtod_l+0x3cc>
 8005814:	3316      	adds	r3, #22
 8005816:	dba8      	blt.n	800576a <_strtod_l+0x402>
 8005818:	4b37      	ldr	r3, [pc, #220]	@ (80058f8 <_strtod_l+0x590>)
 800581a:	eba9 0808 	sub.w	r8, r9, r8
 800581e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005822:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005826:	4650      	mov	r0, sl
 8005828:	4659      	mov	r1, fp
 800582a:	f7fb f83f 	bl	80008ac <__aeabi_ddiv>
 800582e:	e783      	b.n	8005738 <_strtod_l+0x3d0>
 8005830:	4b32      	ldr	r3, [pc, #200]	@ (80058fc <_strtod_l+0x594>)
 8005832:	9308      	str	r3, [sp, #32]
 8005834:	2300      	movs	r3, #0
 8005836:	1124      	asrs	r4, r4, #4
 8005838:	4650      	mov	r0, sl
 800583a:	4659      	mov	r1, fp
 800583c:	461e      	mov	r6, r3
 800583e:	2c01      	cmp	r4, #1
 8005840:	dc21      	bgt.n	8005886 <_strtod_l+0x51e>
 8005842:	b10b      	cbz	r3, 8005848 <_strtod_l+0x4e0>
 8005844:	4682      	mov	sl, r0
 8005846:	468b      	mov	fp, r1
 8005848:	492c      	ldr	r1, [pc, #176]	@ (80058fc <_strtod_l+0x594>)
 800584a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800584e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005852:	4652      	mov	r2, sl
 8005854:	465b      	mov	r3, fp
 8005856:	e9d1 0100 	ldrd	r0, r1, [r1]
 800585a:	f7fa fefd 	bl	8000658 <__aeabi_dmul>
 800585e:	4b28      	ldr	r3, [pc, #160]	@ (8005900 <_strtod_l+0x598>)
 8005860:	460a      	mov	r2, r1
 8005862:	400b      	ands	r3, r1
 8005864:	4927      	ldr	r1, [pc, #156]	@ (8005904 <_strtod_l+0x59c>)
 8005866:	428b      	cmp	r3, r1
 8005868:	4682      	mov	sl, r0
 800586a:	d898      	bhi.n	800579e <_strtod_l+0x436>
 800586c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005870:	428b      	cmp	r3, r1
 8005872:	bf86      	itte	hi
 8005874:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8005908 <_strtod_l+0x5a0>
 8005878:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800587c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005880:	2300      	movs	r3, #0
 8005882:	9308      	str	r3, [sp, #32]
 8005884:	e07a      	b.n	800597c <_strtod_l+0x614>
 8005886:	07e2      	lsls	r2, r4, #31
 8005888:	d505      	bpl.n	8005896 <_strtod_l+0x52e>
 800588a:	9b08      	ldr	r3, [sp, #32]
 800588c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005890:	f7fa fee2 	bl	8000658 <__aeabi_dmul>
 8005894:	2301      	movs	r3, #1
 8005896:	9a08      	ldr	r2, [sp, #32]
 8005898:	3208      	adds	r2, #8
 800589a:	3601      	adds	r6, #1
 800589c:	1064      	asrs	r4, r4, #1
 800589e:	9208      	str	r2, [sp, #32]
 80058a0:	e7cd      	b.n	800583e <_strtod_l+0x4d6>
 80058a2:	d0ed      	beq.n	8005880 <_strtod_l+0x518>
 80058a4:	4264      	negs	r4, r4
 80058a6:	f014 020f 	ands.w	r2, r4, #15
 80058aa:	d00a      	beq.n	80058c2 <_strtod_l+0x55a>
 80058ac:	4b12      	ldr	r3, [pc, #72]	@ (80058f8 <_strtod_l+0x590>)
 80058ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058b2:	4650      	mov	r0, sl
 80058b4:	4659      	mov	r1, fp
 80058b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ba:	f7fa fff7 	bl	80008ac <__aeabi_ddiv>
 80058be:	4682      	mov	sl, r0
 80058c0:	468b      	mov	fp, r1
 80058c2:	1124      	asrs	r4, r4, #4
 80058c4:	d0dc      	beq.n	8005880 <_strtod_l+0x518>
 80058c6:	2c1f      	cmp	r4, #31
 80058c8:	dd20      	ble.n	800590c <_strtod_l+0x5a4>
 80058ca:	2400      	movs	r4, #0
 80058cc:	46a0      	mov	r8, r4
 80058ce:	940a      	str	r4, [sp, #40]	@ 0x28
 80058d0:	46a1      	mov	r9, r4
 80058d2:	9a05      	ldr	r2, [sp, #20]
 80058d4:	2322      	movs	r3, #34	@ 0x22
 80058d6:	f04f 0a00 	mov.w	sl, #0
 80058da:	f04f 0b00 	mov.w	fp, #0
 80058de:	6013      	str	r3, [r2, #0]
 80058e0:	e768      	b.n	80057b4 <_strtod_l+0x44c>
 80058e2:	bf00      	nop
 80058e4:	080092ef 	.word	0x080092ef
 80058e8:	080092f4 	.word	0x080092f4
 80058ec:	080092e6 	.word	0x080092e6
 80058f0:	080092e9 	.word	0x080092e9
 80058f4:	080096bb 	.word	0x080096bb
 80058f8:	080095b8 	.word	0x080095b8
 80058fc:	08009590 	.word	0x08009590
 8005900:	7ff00000 	.word	0x7ff00000
 8005904:	7ca00000 	.word	0x7ca00000
 8005908:	7fefffff 	.word	0x7fefffff
 800590c:	f014 0310 	ands.w	r3, r4, #16
 8005910:	bf18      	it	ne
 8005912:	236a      	movne	r3, #106	@ 0x6a
 8005914:	4ea9      	ldr	r6, [pc, #676]	@ (8005bbc <_strtod_l+0x854>)
 8005916:	9308      	str	r3, [sp, #32]
 8005918:	4650      	mov	r0, sl
 800591a:	4659      	mov	r1, fp
 800591c:	2300      	movs	r3, #0
 800591e:	07e2      	lsls	r2, r4, #31
 8005920:	d504      	bpl.n	800592c <_strtod_l+0x5c4>
 8005922:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005926:	f7fa fe97 	bl	8000658 <__aeabi_dmul>
 800592a:	2301      	movs	r3, #1
 800592c:	1064      	asrs	r4, r4, #1
 800592e:	f106 0608 	add.w	r6, r6, #8
 8005932:	d1f4      	bne.n	800591e <_strtod_l+0x5b6>
 8005934:	b10b      	cbz	r3, 800593a <_strtod_l+0x5d2>
 8005936:	4682      	mov	sl, r0
 8005938:	468b      	mov	fp, r1
 800593a:	9b08      	ldr	r3, [sp, #32]
 800593c:	b1b3      	cbz	r3, 800596c <_strtod_l+0x604>
 800593e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005942:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005946:	2b00      	cmp	r3, #0
 8005948:	4659      	mov	r1, fp
 800594a:	dd0f      	ble.n	800596c <_strtod_l+0x604>
 800594c:	2b1f      	cmp	r3, #31
 800594e:	dd55      	ble.n	80059fc <_strtod_l+0x694>
 8005950:	2b34      	cmp	r3, #52	@ 0x34
 8005952:	bfde      	ittt	le
 8005954:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8005958:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800595c:	4093      	lslle	r3, r2
 800595e:	f04f 0a00 	mov.w	sl, #0
 8005962:	bfcc      	ite	gt
 8005964:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005968:	ea03 0b01 	andle.w	fp, r3, r1
 800596c:	2200      	movs	r2, #0
 800596e:	2300      	movs	r3, #0
 8005970:	4650      	mov	r0, sl
 8005972:	4659      	mov	r1, fp
 8005974:	f7fb f8d8 	bl	8000b28 <__aeabi_dcmpeq>
 8005978:	2800      	cmp	r0, #0
 800597a:	d1a6      	bne.n	80058ca <_strtod_l+0x562>
 800597c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005982:	9805      	ldr	r0, [sp, #20]
 8005984:	462b      	mov	r3, r5
 8005986:	463a      	mov	r2, r7
 8005988:	f002 f8ae 	bl	8007ae8 <__s2b>
 800598c:	900a      	str	r0, [sp, #40]	@ 0x28
 800598e:	2800      	cmp	r0, #0
 8005990:	f43f af05 	beq.w	800579e <_strtod_l+0x436>
 8005994:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005996:	2a00      	cmp	r2, #0
 8005998:	eba9 0308 	sub.w	r3, r9, r8
 800599c:	bfa8      	it	ge
 800599e:	2300      	movge	r3, #0
 80059a0:	9312      	str	r3, [sp, #72]	@ 0x48
 80059a2:	2400      	movs	r4, #0
 80059a4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80059a8:	9316      	str	r3, [sp, #88]	@ 0x58
 80059aa:	46a0      	mov	r8, r4
 80059ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059ae:	9805      	ldr	r0, [sp, #20]
 80059b0:	6859      	ldr	r1, [r3, #4]
 80059b2:	f001 fff1 	bl	8007998 <_Balloc>
 80059b6:	4681      	mov	r9, r0
 80059b8:	2800      	cmp	r0, #0
 80059ba:	f43f aef4 	beq.w	80057a6 <_strtod_l+0x43e>
 80059be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059c0:	691a      	ldr	r2, [r3, #16]
 80059c2:	3202      	adds	r2, #2
 80059c4:	f103 010c 	add.w	r1, r3, #12
 80059c8:	0092      	lsls	r2, r2, #2
 80059ca:	300c      	adds	r0, #12
 80059cc:	f000 fc11 	bl	80061f2 <memcpy>
 80059d0:	ec4b ab10 	vmov	d0, sl, fp
 80059d4:	9805      	ldr	r0, [sp, #20]
 80059d6:	aa1c      	add	r2, sp, #112	@ 0x70
 80059d8:	a91b      	add	r1, sp, #108	@ 0x6c
 80059da:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80059de:	f002 fbbf 	bl	8008160 <__d2b>
 80059e2:	901a      	str	r0, [sp, #104]	@ 0x68
 80059e4:	2800      	cmp	r0, #0
 80059e6:	f43f aede 	beq.w	80057a6 <_strtod_l+0x43e>
 80059ea:	9805      	ldr	r0, [sp, #20]
 80059ec:	2101      	movs	r1, #1
 80059ee:	f002 f911 	bl	8007c14 <__i2b>
 80059f2:	4680      	mov	r8, r0
 80059f4:	b948      	cbnz	r0, 8005a0a <_strtod_l+0x6a2>
 80059f6:	f04f 0800 	mov.w	r8, #0
 80059fa:	e6d4      	b.n	80057a6 <_strtod_l+0x43e>
 80059fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a00:	fa02 f303 	lsl.w	r3, r2, r3
 8005a04:	ea03 0a0a 	and.w	sl, r3, sl
 8005a08:	e7b0      	b.n	800596c <_strtod_l+0x604>
 8005a0a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005a0c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005a0e:	2d00      	cmp	r5, #0
 8005a10:	bfab      	itete	ge
 8005a12:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005a14:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005a16:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005a18:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005a1a:	bfac      	ite	ge
 8005a1c:	18ef      	addge	r7, r5, r3
 8005a1e:	1b5e      	sublt	r6, r3, r5
 8005a20:	9b08      	ldr	r3, [sp, #32]
 8005a22:	1aed      	subs	r5, r5, r3
 8005a24:	4415      	add	r5, r2
 8005a26:	4b66      	ldr	r3, [pc, #408]	@ (8005bc0 <_strtod_l+0x858>)
 8005a28:	3d01      	subs	r5, #1
 8005a2a:	429d      	cmp	r5, r3
 8005a2c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005a30:	da50      	bge.n	8005ad4 <_strtod_l+0x76c>
 8005a32:	1b5b      	subs	r3, r3, r5
 8005a34:	2b1f      	cmp	r3, #31
 8005a36:	eba2 0203 	sub.w	r2, r2, r3
 8005a3a:	f04f 0101 	mov.w	r1, #1
 8005a3e:	dc3d      	bgt.n	8005abc <_strtod_l+0x754>
 8005a40:	fa01 f303 	lsl.w	r3, r1, r3
 8005a44:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005a46:	2300      	movs	r3, #0
 8005a48:	9310      	str	r3, [sp, #64]	@ 0x40
 8005a4a:	18bd      	adds	r5, r7, r2
 8005a4c:	9b08      	ldr	r3, [sp, #32]
 8005a4e:	42af      	cmp	r7, r5
 8005a50:	4416      	add	r6, r2
 8005a52:	441e      	add	r6, r3
 8005a54:	463b      	mov	r3, r7
 8005a56:	bfa8      	it	ge
 8005a58:	462b      	movge	r3, r5
 8005a5a:	42b3      	cmp	r3, r6
 8005a5c:	bfa8      	it	ge
 8005a5e:	4633      	movge	r3, r6
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	bfc2      	ittt	gt
 8005a64:	1aed      	subgt	r5, r5, r3
 8005a66:	1af6      	subgt	r6, r6, r3
 8005a68:	1aff      	subgt	r7, r7, r3
 8005a6a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	dd16      	ble.n	8005a9e <_strtod_l+0x736>
 8005a70:	4641      	mov	r1, r8
 8005a72:	9805      	ldr	r0, [sp, #20]
 8005a74:	461a      	mov	r2, r3
 8005a76:	f002 f98d 	bl	8007d94 <__pow5mult>
 8005a7a:	4680      	mov	r8, r0
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	d0ba      	beq.n	80059f6 <_strtod_l+0x68e>
 8005a80:	4601      	mov	r1, r0
 8005a82:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005a84:	9805      	ldr	r0, [sp, #20]
 8005a86:	f002 f8db 	bl	8007c40 <__multiply>
 8005a8a:	900e      	str	r0, [sp, #56]	@ 0x38
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	f43f ae8a 	beq.w	80057a6 <_strtod_l+0x43e>
 8005a92:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005a94:	9805      	ldr	r0, [sp, #20]
 8005a96:	f001 ffbf 	bl	8007a18 <_Bfree>
 8005a9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a9e:	2d00      	cmp	r5, #0
 8005aa0:	dc1d      	bgt.n	8005ade <_strtod_l+0x776>
 8005aa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	dd23      	ble.n	8005af0 <_strtod_l+0x788>
 8005aa8:	4649      	mov	r1, r9
 8005aaa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005aac:	9805      	ldr	r0, [sp, #20]
 8005aae:	f002 f971 	bl	8007d94 <__pow5mult>
 8005ab2:	4681      	mov	r9, r0
 8005ab4:	b9e0      	cbnz	r0, 8005af0 <_strtod_l+0x788>
 8005ab6:	f04f 0900 	mov.w	r9, #0
 8005aba:	e674      	b.n	80057a6 <_strtod_l+0x43e>
 8005abc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005ac0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005ac4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005ac8:	35e2      	adds	r5, #226	@ 0xe2
 8005aca:	fa01 f305 	lsl.w	r3, r1, r5
 8005ace:	9310      	str	r3, [sp, #64]	@ 0x40
 8005ad0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005ad2:	e7ba      	b.n	8005a4a <_strtod_l+0x6e2>
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	9310      	str	r3, [sp, #64]	@ 0x40
 8005ad8:	2301      	movs	r3, #1
 8005ada:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005adc:	e7b5      	b.n	8005a4a <_strtod_l+0x6e2>
 8005ade:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005ae0:	9805      	ldr	r0, [sp, #20]
 8005ae2:	462a      	mov	r2, r5
 8005ae4:	f002 f9b0 	bl	8007e48 <__lshift>
 8005ae8:	901a      	str	r0, [sp, #104]	@ 0x68
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d1d9      	bne.n	8005aa2 <_strtod_l+0x73a>
 8005aee:	e65a      	b.n	80057a6 <_strtod_l+0x43e>
 8005af0:	2e00      	cmp	r6, #0
 8005af2:	dd07      	ble.n	8005b04 <_strtod_l+0x79c>
 8005af4:	4649      	mov	r1, r9
 8005af6:	9805      	ldr	r0, [sp, #20]
 8005af8:	4632      	mov	r2, r6
 8005afa:	f002 f9a5 	bl	8007e48 <__lshift>
 8005afe:	4681      	mov	r9, r0
 8005b00:	2800      	cmp	r0, #0
 8005b02:	d0d8      	beq.n	8005ab6 <_strtod_l+0x74e>
 8005b04:	2f00      	cmp	r7, #0
 8005b06:	dd08      	ble.n	8005b1a <_strtod_l+0x7b2>
 8005b08:	4641      	mov	r1, r8
 8005b0a:	9805      	ldr	r0, [sp, #20]
 8005b0c:	463a      	mov	r2, r7
 8005b0e:	f002 f99b 	bl	8007e48 <__lshift>
 8005b12:	4680      	mov	r8, r0
 8005b14:	2800      	cmp	r0, #0
 8005b16:	f43f ae46 	beq.w	80057a6 <_strtod_l+0x43e>
 8005b1a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005b1c:	9805      	ldr	r0, [sp, #20]
 8005b1e:	464a      	mov	r2, r9
 8005b20:	f002 fa1a 	bl	8007f58 <__mdiff>
 8005b24:	4604      	mov	r4, r0
 8005b26:	2800      	cmp	r0, #0
 8005b28:	f43f ae3d 	beq.w	80057a6 <_strtod_l+0x43e>
 8005b2c:	68c3      	ldr	r3, [r0, #12]
 8005b2e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005b30:	2300      	movs	r3, #0
 8005b32:	60c3      	str	r3, [r0, #12]
 8005b34:	4641      	mov	r1, r8
 8005b36:	f002 f9f3 	bl	8007f20 <__mcmp>
 8005b3a:	2800      	cmp	r0, #0
 8005b3c:	da46      	bge.n	8005bcc <_strtod_l+0x864>
 8005b3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b40:	ea53 030a 	orrs.w	r3, r3, sl
 8005b44:	d16c      	bne.n	8005c20 <_strtod_l+0x8b8>
 8005b46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d168      	bne.n	8005c20 <_strtod_l+0x8b8>
 8005b4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005b52:	0d1b      	lsrs	r3, r3, #20
 8005b54:	051b      	lsls	r3, r3, #20
 8005b56:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005b5a:	d961      	bls.n	8005c20 <_strtod_l+0x8b8>
 8005b5c:	6963      	ldr	r3, [r4, #20]
 8005b5e:	b913      	cbnz	r3, 8005b66 <_strtod_l+0x7fe>
 8005b60:	6923      	ldr	r3, [r4, #16]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	dd5c      	ble.n	8005c20 <_strtod_l+0x8b8>
 8005b66:	4621      	mov	r1, r4
 8005b68:	2201      	movs	r2, #1
 8005b6a:	9805      	ldr	r0, [sp, #20]
 8005b6c:	f002 f96c 	bl	8007e48 <__lshift>
 8005b70:	4641      	mov	r1, r8
 8005b72:	4604      	mov	r4, r0
 8005b74:	f002 f9d4 	bl	8007f20 <__mcmp>
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	dd51      	ble.n	8005c20 <_strtod_l+0x8b8>
 8005b7c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005b80:	9a08      	ldr	r2, [sp, #32]
 8005b82:	0d1b      	lsrs	r3, r3, #20
 8005b84:	051b      	lsls	r3, r3, #20
 8005b86:	2a00      	cmp	r2, #0
 8005b88:	d06b      	beq.n	8005c62 <_strtod_l+0x8fa>
 8005b8a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005b8e:	d868      	bhi.n	8005c62 <_strtod_l+0x8fa>
 8005b90:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005b94:	f67f ae9d 	bls.w	80058d2 <_strtod_l+0x56a>
 8005b98:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc4 <_strtod_l+0x85c>)
 8005b9a:	4650      	mov	r0, sl
 8005b9c:	4659      	mov	r1, fp
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f7fa fd5a 	bl	8000658 <__aeabi_dmul>
 8005ba4:	4b08      	ldr	r3, [pc, #32]	@ (8005bc8 <_strtod_l+0x860>)
 8005ba6:	400b      	ands	r3, r1
 8005ba8:	4682      	mov	sl, r0
 8005baa:	468b      	mov	fp, r1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f47f ae05 	bne.w	80057bc <_strtod_l+0x454>
 8005bb2:	9a05      	ldr	r2, [sp, #20]
 8005bb4:	2322      	movs	r3, #34	@ 0x22
 8005bb6:	6013      	str	r3, [r2, #0]
 8005bb8:	e600      	b.n	80057bc <_strtod_l+0x454>
 8005bba:	bf00      	nop
 8005bbc:	08009320 	.word	0x08009320
 8005bc0:	fffffc02 	.word	0xfffffc02
 8005bc4:	39500000 	.word	0x39500000
 8005bc8:	7ff00000 	.word	0x7ff00000
 8005bcc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005bd0:	d165      	bne.n	8005c9e <_strtod_l+0x936>
 8005bd2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005bd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005bd8:	b35a      	cbz	r2, 8005c32 <_strtod_l+0x8ca>
 8005bda:	4a9f      	ldr	r2, [pc, #636]	@ (8005e58 <_strtod_l+0xaf0>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d12b      	bne.n	8005c38 <_strtod_l+0x8d0>
 8005be0:	9b08      	ldr	r3, [sp, #32]
 8005be2:	4651      	mov	r1, sl
 8005be4:	b303      	cbz	r3, 8005c28 <_strtod_l+0x8c0>
 8005be6:	4b9d      	ldr	r3, [pc, #628]	@ (8005e5c <_strtod_l+0xaf4>)
 8005be8:	465a      	mov	r2, fp
 8005bea:	4013      	ands	r3, r2
 8005bec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005bf0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005bf4:	d81b      	bhi.n	8005c2e <_strtod_l+0x8c6>
 8005bf6:	0d1b      	lsrs	r3, r3, #20
 8005bf8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	4299      	cmp	r1, r3
 8005c02:	d119      	bne.n	8005c38 <_strtod_l+0x8d0>
 8005c04:	4b96      	ldr	r3, [pc, #600]	@ (8005e60 <_strtod_l+0xaf8>)
 8005c06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d102      	bne.n	8005c12 <_strtod_l+0x8aa>
 8005c0c:	3101      	adds	r1, #1
 8005c0e:	f43f adca 	beq.w	80057a6 <_strtod_l+0x43e>
 8005c12:	4b92      	ldr	r3, [pc, #584]	@ (8005e5c <_strtod_l+0xaf4>)
 8005c14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c16:	401a      	ands	r2, r3
 8005c18:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005c1c:	f04f 0a00 	mov.w	sl, #0
 8005c20:	9b08      	ldr	r3, [sp, #32]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1b8      	bne.n	8005b98 <_strtod_l+0x830>
 8005c26:	e5c9      	b.n	80057bc <_strtod_l+0x454>
 8005c28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c2c:	e7e8      	b.n	8005c00 <_strtod_l+0x898>
 8005c2e:	4613      	mov	r3, r2
 8005c30:	e7e6      	b.n	8005c00 <_strtod_l+0x898>
 8005c32:	ea53 030a 	orrs.w	r3, r3, sl
 8005c36:	d0a1      	beq.n	8005b7c <_strtod_l+0x814>
 8005c38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005c3a:	b1db      	cbz	r3, 8005c74 <_strtod_l+0x90c>
 8005c3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c3e:	4213      	tst	r3, r2
 8005c40:	d0ee      	beq.n	8005c20 <_strtod_l+0x8b8>
 8005c42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c44:	9a08      	ldr	r2, [sp, #32]
 8005c46:	4650      	mov	r0, sl
 8005c48:	4659      	mov	r1, fp
 8005c4a:	b1bb      	cbz	r3, 8005c7c <_strtod_l+0x914>
 8005c4c:	f7ff fb6c 	bl	8005328 <sulp>
 8005c50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c54:	ec53 2b10 	vmov	r2, r3, d0
 8005c58:	f7fa fb48 	bl	80002ec <__adddf3>
 8005c5c:	4682      	mov	sl, r0
 8005c5e:	468b      	mov	fp, r1
 8005c60:	e7de      	b.n	8005c20 <_strtod_l+0x8b8>
 8005c62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005c66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005c6a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005c6e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8005c72:	e7d5      	b.n	8005c20 <_strtod_l+0x8b8>
 8005c74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005c76:	ea13 0f0a 	tst.w	r3, sl
 8005c7a:	e7e1      	b.n	8005c40 <_strtod_l+0x8d8>
 8005c7c:	f7ff fb54 	bl	8005328 <sulp>
 8005c80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c84:	ec53 2b10 	vmov	r2, r3, d0
 8005c88:	f7fa fb2e 	bl	80002e8 <__aeabi_dsub>
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2300      	movs	r3, #0
 8005c90:	4682      	mov	sl, r0
 8005c92:	468b      	mov	fp, r1
 8005c94:	f7fa ff48 	bl	8000b28 <__aeabi_dcmpeq>
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	d0c1      	beq.n	8005c20 <_strtod_l+0x8b8>
 8005c9c:	e619      	b.n	80058d2 <_strtod_l+0x56a>
 8005c9e:	4641      	mov	r1, r8
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f002 fab5 	bl	8008210 <__ratio>
 8005ca6:	ec57 6b10 	vmov	r6, r7, d0
 8005caa:	2200      	movs	r2, #0
 8005cac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005cb0:	4630      	mov	r0, r6
 8005cb2:	4639      	mov	r1, r7
 8005cb4:	f7fa ff4c 	bl	8000b50 <__aeabi_dcmple>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	d06f      	beq.n	8005d9c <_strtod_l+0xa34>
 8005cbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d17a      	bne.n	8005db8 <_strtod_l+0xa50>
 8005cc2:	f1ba 0f00 	cmp.w	sl, #0
 8005cc6:	d158      	bne.n	8005d7a <_strtod_l+0xa12>
 8005cc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d15a      	bne.n	8005d88 <_strtod_l+0xa20>
 8005cd2:	4b64      	ldr	r3, [pc, #400]	@ (8005e64 <_strtod_l+0xafc>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	4639      	mov	r1, r7
 8005cda:	f7fa ff2f 	bl	8000b3c <__aeabi_dcmplt>
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	d159      	bne.n	8005d96 <_strtod_l+0xa2e>
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	4639      	mov	r1, r7
 8005ce6:	4b60      	ldr	r3, [pc, #384]	@ (8005e68 <_strtod_l+0xb00>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f7fa fcb5 	bl	8000658 <__aeabi_dmul>
 8005cee:	4606      	mov	r6, r0
 8005cf0:	460f      	mov	r7, r1
 8005cf2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005cf6:	9606      	str	r6, [sp, #24]
 8005cf8:	9307      	str	r3, [sp, #28]
 8005cfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005cfe:	4d57      	ldr	r5, [pc, #348]	@ (8005e5c <_strtod_l+0xaf4>)
 8005d00:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005d04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d06:	401d      	ands	r5, r3
 8005d08:	4b58      	ldr	r3, [pc, #352]	@ (8005e6c <_strtod_l+0xb04>)
 8005d0a:	429d      	cmp	r5, r3
 8005d0c:	f040 80b2 	bne.w	8005e74 <_strtod_l+0xb0c>
 8005d10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d12:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005d16:	ec4b ab10 	vmov	d0, sl, fp
 8005d1a:	f002 f9b1 	bl	8008080 <__ulp>
 8005d1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d22:	ec51 0b10 	vmov	r0, r1, d0
 8005d26:	f7fa fc97 	bl	8000658 <__aeabi_dmul>
 8005d2a:	4652      	mov	r2, sl
 8005d2c:	465b      	mov	r3, fp
 8005d2e:	f7fa fadd 	bl	80002ec <__adddf3>
 8005d32:	460b      	mov	r3, r1
 8005d34:	4949      	ldr	r1, [pc, #292]	@ (8005e5c <_strtod_l+0xaf4>)
 8005d36:	4a4e      	ldr	r2, [pc, #312]	@ (8005e70 <_strtod_l+0xb08>)
 8005d38:	4019      	ands	r1, r3
 8005d3a:	4291      	cmp	r1, r2
 8005d3c:	4682      	mov	sl, r0
 8005d3e:	d942      	bls.n	8005dc6 <_strtod_l+0xa5e>
 8005d40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005d42:	4b47      	ldr	r3, [pc, #284]	@ (8005e60 <_strtod_l+0xaf8>)
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d103      	bne.n	8005d50 <_strtod_l+0x9e8>
 8005d48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	f43f ad2b 	beq.w	80057a6 <_strtod_l+0x43e>
 8005d50:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8005e60 <_strtod_l+0xaf8>
 8005d54:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8005d58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005d5a:	9805      	ldr	r0, [sp, #20]
 8005d5c:	f001 fe5c 	bl	8007a18 <_Bfree>
 8005d60:	9805      	ldr	r0, [sp, #20]
 8005d62:	4649      	mov	r1, r9
 8005d64:	f001 fe58 	bl	8007a18 <_Bfree>
 8005d68:	9805      	ldr	r0, [sp, #20]
 8005d6a:	4641      	mov	r1, r8
 8005d6c:	f001 fe54 	bl	8007a18 <_Bfree>
 8005d70:	9805      	ldr	r0, [sp, #20]
 8005d72:	4621      	mov	r1, r4
 8005d74:	f001 fe50 	bl	8007a18 <_Bfree>
 8005d78:	e618      	b.n	80059ac <_strtod_l+0x644>
 8005d7a:	f1ba 0f01 	cmp.w	sl, #1
 8005d7e:	d103      	bne.n	8005d88 <_strtod_l+0xa20>
 8005d80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f43f ada5 	beq.w	80058d2 <_strtod_l+0x56a>
 8005d88:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8005e38 <_strtod_l+0xad0>
 8005d8c:	4f35      	ldr	r7, [pc, #212]	@ (8005e64 <_strtod_l+0xafc>)
 8005d8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005d92:	2600      	movs	r6, #0
 8005d94:	e7b1      	b.n	8005cfa <_strtod_l+0x992>
 8005d96:	4f34      	ldr	r7, [pc, #208]	@ (8005e68 <_strtod_l+0xb00>)
 8005d98:	2600      	movs	r6, #0
 8005d9a:	e7aa      	b.n	8005cf2 <_strtod_l+0x98a>
 8005d9c:	4b32      	ldr	r3, [pc, #200]	@ (8005e68 <_strtod_l+0xb00>)
 8005d9e:	4630      	mov	r0, r6
 8005da0:	4639      	mov	r1, r7
 8005da2:	2200      	movs	r2, #0
 8005da4:	f7fa fc58 	bl	8000658 <__aeabi_dmul>
 8005da8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005daa:	4606      	mov	r6, r0
 8005dac:	460f      	mov	r7, r1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d09f      	beq.n	8005cf2 <_strtod_l+0x98a>
 8005db2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005db6:	e7a0      	b.n	8005cfa <_strtod_l+0x992>
 8005db8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8005e40 <_strtod_l+0xad8>
 8005dbc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005dc0:	ec57 6b17 	vmov	r6, r7, d7
 8005dc4:	e799      	b.n	8005cfa <_strtod_l+0x992>
 8005dc6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005dca:	9b08      	ldr	r3, [sp, #32]
 8005dcc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1c1      	bne.n	8005d58 <_strtod_l+0x9f0>
 8005dd4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005dd8:	0d1b      	lsrs	r3, r3, #20
 8005dda:	051b      	lsls	r3, r3, #20
 8005ddc:	429d      	cmp	r5, r3
 8005dde:	d1bb      	bne.n	8005d58 <_strtod_l+0x9f0>
 8005de0:	4630      	mov	r0, r6
 8005de2:	4639      	mov	r1, r7
 8005de4:	f7fa ff48 	bl	8000c78 <__aeabi_d2lz>
 8005de8:	f7fa fc08 	bl	80005fc <__aeabi_l2d>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4630      	mov	r0, r6
 8005df2:	4639      	mov	r1, r7
 8005df4:	f7fa fa78 	bl	80002e8 <__aeabi_dsub>
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005e00:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005e04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e06:	ea46 060a 	orr.w	r6, r6, sl
 8005e0a:	431e      	orrs	r6, r3
 8005e0c:	d06f      	beq.n	8005eee <_strtod_l+0xb86>
 8005e0e:	a30e      	add	r3, pc, #56	@ (adr r3, 8005e48 <_strtod_l+0xae0>)
 8005e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e14:	f7fa fe92 	bl	8000b3c <__aeabi_dcmplt>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	f47f accf 	bne.w	80057bc <_strtod_l+0x454>
 8005e1e:	a30c      	add	r3, pc, #48	@ (adr r3, 8005e50 <_strtod_l+0xae8>)
 8005e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e28:	f7fa fea6 	bl	8000b78 <__aeabi_dcmpgt>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	d093      	beq.n	8005d58 <_strtod_l+0x9f0>
 8005e30:	e4c4      	b.n	80057bc <_strtod_l+0x454>
 8005e32:	bf00      	nop
 8005e34:	f3af 8000 	nop.w
 8005e38:	00000000 	.word	0x00000000
 8005e3c:	bff00000 	.word	0xbff00000
 8005e40:	00000000 	.word	0x00000000
 8005e44:	3ff00000 	.word	0x3ff00000
 8005e48:	94a03595 	.word	0x94a03595
 8005e4c:	3fdfffff 	.word	0x3fdfffff
 8005e50:	35afe535 	.word	0x35afe535
 8005e54:	3fe00000 	.word	0x3fe00000
 8005e58:	000fffff 	.word	0x000fffff
 8005e5c:	7ff00000 	.word	0x7ff00000
 8005e60:	7fefffff 	.word	0x7fefffff
 8005e64:	3ff00000 	.word	0x3ff00000
 8005e68:	3fe00000 	.word	0x3fe00000
 8005e6c:	7fe00000 	.word	0x7fe00000
 8005e70:	7c9fffff 	.word	0x7c9fffff
 8005e74:	9b08      	ldr	r3, [sp, #32]
 8005e76:	b323      	cbz	r3, 8005ec2 <_strtod_l+0xb5a>
 8005e78:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005e7c:	d821      	bhi.n	8005ec2 <_strtod_l+0xb5a>
 8005e7e:	a328      	add	r3, pc, #160	@ (adr r3, 8005f20 <_strtod_l+0xbb8>)
 8005e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e84:	4630      	mov	r0, r6
 8005e86:	4639      	mov	r1, r7
 8005e88:	f7fa fe62 	bl	8000b50 <__aeabi_dcmple>
 8005e8c:	b1a0      	cbz	r0, 8005eb8 <_strtod_l+0xb50>
 8005e8e:	4639      	mov	r1, r7
 8005e90:	4630      	mov	r0, r6
 8005e92:	f7fa feb9 	bl	8000c08 <__aeabi_d2uiz>
 8005e96:	2801      	cmp	r0, #1
 8005e98:	bf38      	it	cc
 8005e9a:	2001      	movcc	r0, #1
 8005e9c:	f7fa fb62 	bl	8000564 <__aeabi_ui2d>
 8005ea0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ea2:	4606      	mov	r6, r0
 8005ea4:	460f      	mov	r7, r1
 8005ea6:	b9fb      	cbnz	r3, 8005ee8 <_strtod_l+0xb80>
 8005ea8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005eac:	9014      	str	r0, [sp, #80]	@ 0x50
 8005eae:	9315      	str	r3, [sp, #84]	@ 0x54
 8005eb0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005eb4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005eb8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005eba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8005ebe:	1b5b      	subs	r3, r3, r5
 8005ec0:	9311      	str	r3, [sp, #68]	@ 0x44
 8005ec2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005ec6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005eca:	f002 f8d9 	bl	8008080 <__ulp>
 8005ece:	4650      	mov	r0, sl
 8005ed0:	ec53 2b10 	vmov	r2, r3, d0
 8005ed4:	4659      	mov	r1, fp
 8005ed6:	f7fa fbbf 	bl	8000658 <__aeabi_dmul>
 8005eda:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005ede:	f7fa fa05 	bl	80002ec <__adddf3>
 8005ee2:	4682      	mov	sl, r0
 8005ee4:	468b      	mov	fp, r1
 8005ee6:	e770      	b.n	8005dca <_strtod_l+0xa62>
 8005ee8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005eec:	e7e0      	b.n	8005eb0 <_strtod_l+0xb48>
 8005eee:	a30e      	add	r3, pc, #56	@ (adr r3, 8005f28 <_strtod_l+0xbc0>)
 8005ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef4:	f7fa fe22 	bl	8000b3c <__aeabi_dcmplt>
 8005ef8:	e798      	b.n	8005e2c <_strtod_l+0xac4>
 8005efa:	2300      	movs	r3, #0
 8005efc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005efe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005f00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f02:	6013      	str	r3, [r2, #0]
 8005f04:	f7ff ba6d 	b.w	80053e2 <_strtod_l+0x7a>
 8005f08:	2a65      	cmp	r2, #101	@ 0x65
 8005f0a:	f43f ab66 	beq.w	80055da <_strtod_l+0x272>
 8005f0e:	2a45      	cmp	r2, #69	@ 0x45
 8005f10:	f43f ab63 	beq.w	80055da <_strtod_l+0x272>
 8005f14:	2301      	movs	r3, #1
 8005f16:	f7ff bb9e 	b.w	8005656 <_strtod_l+0x2ee>
 8005f1a:	bf00      	nop
 8005f1c:	f3af 8000 	nop.w
 8005f20:	ffc00000 	.word	0xffc00000
 8005f24:	41dfffff 	.word	0x41dfffff
 8005f28:	94a03595 	.word	0x94a03595
 8005f2c:	3fcfffff 	.word	0x3fcfffff

08005f30 <strtod>:
 8005f30:	460a      	mov	r2, r1
 8005f32:	4601      	mov	r1, r0
 8005f34:	4802      	ldr	r0, [pc, #8]	@ (8005f40 <strtod+0x10>)
 8005f36:	4b03      	ldr	r3, [pc, #12]	@ (8005f44 <strtod+0x14>)
 8005f38:	6800      	ldr	r0, [r0, #0]
 8005f3a:	f7ff ba15 	b.w	8005368 <_strtod_l>
 8005f3e:	bf00      	nop
 8005f40:	20000194 	.word	0x20000194
 8005f44:	20000028 	.word	0x20000028

08005f48 <_strtol_l.constprop.0>:
 8005f48:	2b24      	cmp	r3, #36	@ 0x24
 8005f4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f4e:	4686      	mov	lr, r0
 8005f50:	4690      	mov	r8, r2
 8005f52:	d801      	bhi.n	8005f58 <_strtol_l.constprop.0+0x10>
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d106      	bne.n	8005f66 <_strtol_l.constprop.0+0x1e>
 8005f58:	f000 f91e 	bl	8006198 <__errno>
 8005f5c:	2316      	movs	r3, #22
 8005f5e:	6003      	str	r3, [r0, #0]
 8005f60:	2000      	movs	r0, #0
 8005f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f66:	4834      	ldr	r0, [pc, #208]	@ (8006038 <_strtol_l.constprop.0+0xf0>)
 8005f68:	460d      	mov	r5, r1
 8005f6a:	462a      	mov	r2, r5
 8005f6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f70:	5d06      	ldrb	r6, [r0, r4]
 8005f72:	f016 0608 	ands.w	r6, r6, #8
 8005f76:	d1f8      	bne.n	8005f6a <_strtol_l.constprop.0+0x22>
 8005f78:	2c2d      	cmp	r4, #45	@ 0x2d
 8005f7a:	d12d      	bne.n	8005fd8 <_strtol_l.constprop.0+0x90>
 8005f7c:	782c      	ldrb	r4, [r5, #0]
 8005f7e:	2601      	movs	r6, #1
 8005f80:	1c95      	adds	r5, r2, #2
 8005f82:	f033 0210 	bics.w	r2, r3, #16
 8005f86:	d109      	bne.n	8005f9c <_strtol_l.constprop.0+0x54>
 8005f88:	2c30      	cmp	r4, #48	@ 0x30
 8005f8a:	d12a      	bne.n	8005fe2 <_strtol_l.constprop.0+0x9a>
 8005f8c:	782a      	ldrb	r2, [r5, #0]
 8005f8e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005f92:	2a58      	cmp	r2, #88	@ 0x58
 8005f94:	d125      	bne.n	8005fe2 <_strtol_l.constprop.0+0x9a>
 8005f96:	786c      	ldrb	r4, [r5, #1]
 8005f98:	2310      	movs	r3, #16
 8005f9a:	3502      	adds	r5, #2
 8005f9c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005fa0:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	fbbc f9f3 	udiv	r9, ip, r3
 8005faa:	4610      	mov	r0, r2
 8005fac:	fb03 ca19 	mls	sl, r3, r9, ip
 8005fb0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005fb4:	2f09      	cmp	r7, #9
 8005fb6:	d81b      	bhi.n	8005ff0 <_strtol_l.constprop.0+0xa8>
 8005fb8:	463c      	mov	r4, r7
 8005fba:	42a3      	cmp	r3, r4
 8005fbc:	dd27      	ble.n	800600e <_strtol_l.constprop.0+0xc6>
 8005fbe:	1c57      	adds	r7, r2, #1
 8005fc0:	d007      	beq.n	8005fd2 <_strtol_l.constprop.0+0x8a>
 8005fc2:	4581      	cmp	r9, r0
 8005fc4:	d320      	bcc.n	8006008 <_strtol_l.constprop.0+0xc0>
 8005fc6:	d101      	bne.n	8005fcc <_strtol_l.constprop.0+0x84>
 8005fc8:	45a2      	cmp	sl, r4
 8005fca:	db1d      	blt.n	8006008 <_strtol_l.constprop.0+0xc0>
 8005fcc:	fb00 4003 	mla	r0, r0, r3, r4
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005fd6:	e7eb      	b.n	8005fb0 <_strtol_l.constprop.0+0x68>
 8005fd8:	2c2b      	cmp	r4, #43	@ 0x2b
 8005fda:	bf04      	itt	eq
 8005fdc:	782c      	ldrbeq	r4, [r5, #0]
 8005fde:	1c95      	addeq	r5, r2, #2
 8005fe0:	e7cf      	b.n	8005f82 <_strtol_l.constprop.0+0x3a>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1da      	bne.n	8005f9c <_strtol_l.constprop.0+0x54>
 8005fe6:	2c30      	cmp	r4, #48	@ 0x30
 8005fe8:	bf0c      	ite	eq
 8005fea:	2308      	moveq	r3, #8
 8005fec:	230a      	movne	r3, #10
 8005fee:	e7d5      	b.n	8005f9c <_strtol_l.constprop.0+0x54>
 8005ff0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005ff4:	2f19      	cmp	r7, #25
 8005ff6:	d801      	bhi.n	8005ffc <_strtol_l.constprop.0+0xb4>
 8005ff8:	3c37      	subs	r4, #55	@ 0x37
 8005ffa:	e7de      	b.n	8005fba <_strtol_l.constprop.0+0x72>
 8005ffc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006000:	2f19      	cmp	r7, #25
 8006002:	d804      	bhi.n	800600e <_strtol_l.constprop.0+0xc6>
 8006004:	3c57      	subs	r4, #87	@ 0x57
 8006006:	e7d8      	b.n	8005fba <_strtol_l.constprop.0+0x72>
 8006008:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800600c:	e7e1      	b.n	8005fd2 <_strtol_l.constprop.0+0x8a>
 800600e:	1c53      	adds	r3, r2, #1
 8006010:	d108      	bne.n	8006024 <_strtol_l.constprop.0+0xdc>
 8006012:	2322      	movs	r3, #34	@ 0x22
 8006014:	f8ce 3000 	str.w	r3, [lr]
 8006018:	4660      	mov	r0, ip
 800601a:	f1b8 0f00 	cmp.w	r8, #0
 800601e:	d0a0      	beq.n	8005f62 <_strtol_l.constprop.0+0x1a>
 8006020:	1e69      	subs	r1, r5, #1
 8006022:	e006      	b.n	8006032 <_strtol_l.constprop.0+0xea>
 8006024:	b106      	cbz	r6, 8006028 <_strtol_l.constprop.0+0xe0>
 8006026:	4240      	negs	r0, r0
 8006028:	f1b8 0f00 	cmp.w	r8, #0
 800602c:	d099      	beq.n	8005f62 <_strtol_l.constprop.0+0x1a>
 800602e:	2a00      	cmp	r2, #0
 8006030:	d1f6      	bne.n	8006020 <_strtol_l.constprop.0+0xd8>
 8006032:	f8c8 1000 	str.w	r1, [r8]
 8006036:	e794      	b.n	8005f62 <_strtol_l.constprop.0+0x1a>
 8006038:	08009351 	.word	0x08009351

0800603c <_strtol_r>:
 800603c:	f7ff bf84 	b.w	8005f48 <_strtol_l.constprop.0>

08006040 <strtol>:
 8006040:	4613      	mov	r3, r2
 8006042:	460a      	mov	r2, r1
 8006044:	4601      	mov	r1, r0
 8006046:	4802      	ldr	r0, [pc, #8]	@ (8006050 <strtol+0x10>)
 8006048:	6800      	ldr	r0, [r0, #0]
 800604a:	f7ff bf7d 	b.w	8005f48 <_strtol_l.constprop.0>
 800604e:	bf00      	nop
 8006050:	20000194 	.word	0x20000194

08006054 <_fwalk_sglue>:
 8006054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006058:	4607      	mov	r7, r0
 800605a:	4688      	mov	r8, r1
 800605c:	4614      	mov	r4, r2
 800605e:	2600      	movs	r6, #0
 8006060:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006064:	f1b9 0901 	subs.w	r9, r9, #1
 8006068:	d505      	bpl.n	8006076 <_fwalk_sglue+0x22>
 800606a:	6824      	ldr	r4, [r4, #0]
 800606c:	2c00      	cmp	r4, #0
 800606e:	d1f7      	bne.n	8006060 <_fwalk_sglue+0xc>
 8006070:	4630      	mov	r0, r6
 8006072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006076:	89ab      	ldrh	r3, [r5, #12]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d907      	bls.n	800608c <_fwalk_sglue+0x38>
 800607c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006080:	3301      	adds	r3, #1
 8006082:	d003      	beq.n	800608c <_fwalk_sglue+0x38>
 8006084:	4629      	mov	r1, r5
 8006086:	4638      	mov	r0, r7
 8006088:	47c0      	blx	r8
 800608a:	4306      	orrs	r6, r0
 800608c:	3568      	adds	r5, #104	@ 0x68
 800608e:	e7e9      	b.n	8006064 <_fwalk_sglue+0x10>

08006090 <strncmp>:
 8006090:	b510      	push	{r4, lr}
 8006092:	b16a      	cbz	r2, 80060b0 <strncmp+0x20>
 8006094:	3901      	subs	r1, #1
 8006096:	1884      	adds	r4, r0, r2
 8006098:	f810 2b01 	ldrb.w	r2, [r0], #1
 800609c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d103      	bne.n	80060ac <strncmp+0x1c>
 80060a4:	42a0      	cmp	r0, r4
 80060a6:	d001      	beq.n	80060ac <strncmp+0x1c>
 80060a8:	2a00      	cmp	r2, #0
 80060aa:	d1f5      	bne.n	8006098 <strncmp+0x8>
 80060ac:	1ad0      	subs	r0, r2, r3
 80060ae:	bd10      	pop	{r4, pc}
 80060b0:	4610      	mov	r0, r2
 80060b2:	e7fc      	b.n	80060ae <strncmp+0x1e>

080060b4 <strncpy>:
 80060b4:	b510      	push	{r4, lr}
 80060b6:	3901      	subs	r1, #1
 80060b8:	4603      	mov	r3, r0
 80060ba:	b132      	cbz	r2, 80060ca <strncpy+0x16>
 80060bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80060c0:	f803 4b01 	strb.w	r4, [r3], #1
 80060c4:	3a01      	subs	r2, #1
 80060c6:	2c00      	cmp	r4, #0
 80060c8:	d1f7      	bne.n	80060ba <strncpy+0x6>
 80060ca:	441a      	add	r2, r3
 80060cc:	2100      	movs	r1, #0
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d100      	bne.n	80060d4 <strncpy+0x20>
 80060d2:	bd10      	pop	{r4, pc}
 80060d4:	f803 1b01 	strb.w	r1, [r3], #1
 80060d8:	e7f9      	b.n	80060ce <strncpy+0x1a>

080060da <memset>:
 80060da:	4402      	add	r2, r0
 80060dc:	4603      	mov	r3, r0
 80060de:	4293      	cmp	r3, r2
 80060e0:	d100      	bne.n	80060e4 <memset+0xa>
 80060e2:	4770      	bx	lr
 80060e4:	f803 1b01 	strb.w	r1, [r3], #1
 80060e8:	e7f9      	b.n	80060de <memset+0x4>
	...

080060ec <_close_r>:
 80060ec:	b538      	push	{r3, r4, r5, lr}
 80060ee:	4d06      	ldr	r5, [pc, #24]	@ (8006108 <_close_r+0x1c>)
 80060f0:	2300      	movs	r3, #0
 80060f2:	4604      	mov	r4, r0
 80060f4:	4608      	mov	r0, r1
 80060f6:	602b      	str	r3, [r5, #0]
 80060f8:	f7fd f9d7 	bl	80034aa <_close>
 80060fc:	1c43      	adds	r3, r0, #1
 80060fe:	d102      	bne.n	8006106 <_close_r+0x1a>
 8006100:	682b      	ldr	r3, [r5, #0]
 8006102:	b103      	cbz	r3, 8006106 <_close_r+0x1a>
 8006104:	6023      	str	r3, [r4, #0]
 8006106:	bd38      	pop	{r3, r4, r5, pc}
 8006108:	20005750 	.word	0x20005750

0800610c <_lseek_r>:
 800610c:	b538      	push	{r3, r4, r5, lr}
 800610e:	4d07      	ldr	r5, [pc, #28]	@ (800612c <_lseek_r+0x20>)
 8006110:	4604      	mov	r4, r0
 8006112:	4608      	mov	r0, r1
 8006114:	4611      	mov	r1, r2
 8006116:	2200      	movs	r2, #0
 8006118:	602a      	str	r2, [r5, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	f7fd f9ec 	bl	80034f8 <_lseek>
 8006120:	1c43      	adds	r3, r0, #1
 8006122:	d102      	bne.n	800612a <_lseek_r+0x1e>
 8006124:	682b      	ldr	r3, [r5, #0]
 8006126:	b103      	cbz	r3, 800612a <_lseek_r+0x1e>
 8006128:	6023      	str	r3, [r4, #0]
 800612a:	bd38      	pop	{r3, r4, r5, pc}
 800612c:	20005750 	.word	0x20005750

08006130 <_read_r>:
 8006130:	b538      	push	{r3, r4, r5, lr}
 8006132:	4d07      	ldr	r5, [pc, #28]	@ (8006150 <_read_r+0x20>)
 8006134:	4604      	mov	r4, r0
 8006136:	4608      	mov	r0, r1
 8006138:	4611      	mov	r1, r2
 800613a:	2200      	movs	r2, #0
 800613c:	602a      	str	r2, [r5, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	f7fd f97a 	bl	8003438 <_read>
 8006144:	1c43      	adds	r3, r0, #1
 8006146:	d102      	bne.n	800614e <_read_r+0x1e>
 8006148:	682b      	ldr	r3, [r5, #0]
 800614a:	b103      	cbz	r3, 800614e <_read_r+0x1e>
 800614c:	6023      	str	r3, [r4, #0]
 800614e:	bd38      	pop	{r3, r4, r5, pc}
 8006150:	20005750 	.word	0x20005750

08006154 <_sbrk_r>:
 8006154:	b538      	push	{r3, r4, r5, lr}
 8006156:	4d06      	ldr	r5, [pc, #24]	@ (8006170 <_sbrk_r+0x1c>)
 8006158:	2300      	movs	r3, #0
 800615a:	4604      	mov	r4, r0
 800615c:	4608      	mov	r0, r1
 800615e:	602b      	str	r3, [r5, #0]
 8006160:	f7fd f9d8 	bl	8003514 <_sbrk>
 8006164:	1c43      	adds	r3, r0, #1
 8006166:	d102      	bne.n	800616e <_sbrk_r+0x1a>
 8006168:	682b      	ldr	r3, [r5, #0]
 800616a:	b103      	cbz	r3, 800616e <_sbrk_r+0x1a>
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	bd38      	pop	{r3, r4, r5, pc}
 8006170:	20005750 	.word	0x20005750

08006174 <_write_r>:
 8006174:	b538      	push	{r3, r4, r5, lr}
 8006176:	4d07      	ldr	r5, [pc, #28]	@ (8006194 <_write_r+0x20>)
 8006178:	4604      	mov	r4, r0
 800617a:	4608      	mov	r0, r1
 800617c:	4611      	mov	r1, r2
 800617e:	2200      	movs	r2, #0
 8006180:	602a      	str	r2, [r5, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	f7fd f975 	bl	8003472 <_write>
 8006188:	1c43      	adds	r3, r0, #1
 800618a:	d102      	bne.n	8006192 <_write_r+0x1e>
 800618c:	682b      	ldr	r3, [r5, #0]
 800618e:	b103      	cbz	r3, 8006192 <_write_r+0x1e>
 8006190:	6023      	str	r3, [r4, #0]
 8006192:	bd38      	pop	{r3, r4, r5, pc}
 8006194:	20005750 	.word	0x20005750

08006198 <__errno>:
 8006198:	4b01      	ldr	r3, [pc, #4]	@ (80061a0 <__errno+0x8>)
 800619a:	6818      	ldr	r0, [r3, #0]
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	20000194 	.word	0x20000194

080061a4 <__libc_init_array>:
 80061a4:	b570      	push	{r4, r5, r6, lr}
 80061a6:	4d0d      	ldr	r5, [pc, #52]	@ (80061dc <__libc_init_array+0x38>)
 80061a8:	4c0d      	ldr	r4, [pc, #52]	@ (80061e0 <__libc_init_array+0x3c>)
 80061aa:	1b64      	subs	r4, r4, r5
 80061ac:	10a4      	asrs	r4, r4, #2
 80061ae:	2600      	movs	r6, #0
 80061b0:	42a6      	cmp	r6, r4
 80061b2:	d109      	bne.n	80061c8 <__libc_init_array+0x24>
 80061b4:	4d0b      	ldr	r5, [pc, #44]	@ (80061e4 <__libc_init_array+0x40>)
 80061b6:	4c0c      	ldr	r4, [pc, #48]	@ (80061e8 <__libc_init_array+0x44>)
 80061b8:	f002 fb10 	bl	80087dc <_init>
 80061bc:	1b64      	subs	r4, r4, r5
 80061be:	10a4      	asrs	r4, r4, #2
 80061c0:	2600      	movs	r6, #0
 80061c2:	42a6      	cmp	r6, r4
 80061c4:	d105      	bne.n	80061d2 <__libc_init_array+0x2e>
 80061c6:	bd70      	pop	{r4, r5, r6, pc}
 80061c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80061cc:	4798      	blx	r3
 80061ce:	3601      	adds	r6, #1
 80061d0:	e7ee      	b.n	80061b0 <__libc_init_array+0xc>
 80061d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80061d6:	4798      	blx	r3
 80061d8:	3601      	adds	r6, #1
 80061da:	e7f2      	b.n	80061c2 <__libc_init_array+0x1e>
 80061dc:	080096c4 	.word	0x080096c4
 80061e0:	080096c4 	.word	0x080096c4
 80061e4:	080096c4 	.word	0x080096c4
 80061e8:	080096c8 	.word	0x080096c8

080061ec <__retarget_lock_init_recursive>:
 80061ec:	4770      	bx	lr

080061ee <__retarget_lock_acquire_recursive>:
 80061ee:	4770      	bx	lr

080061f0 <__retarget_lock_release_recursive>:
 80061f0:	4770      	bx	lr

080061f2 <memcpy>:
 80061f2:	440a      	add	r2, r1
 80061f4:	4291      	cmp	r1, r2
 80061f6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80061fa:	d100      	bne.n	80061fe <memcpy+0xc>
 80061fc:	4770      	bx	lr
 80061fe:	b510      	push	{r4, lr}
 8006200:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006204:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006208:	4291      	cmp	r1, r2
 800620a:	d1f9      	bne.n	8006200 <memcpy+0xe>
 800620c:	bd10      	pop	{r4, pc}
	...

08006210 <nan>:
 8006210:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006218 <nan+0x8>
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	00000000 	.word	0x00000000
 800621c:	7ff80000 	.word	0x7ff80000

08006220 <_free_r>:
 8006220:	b538      	push	{r3, r4, r5, lr}
 8006222:	4605      	mov	r5, r0
 8006224:	2900      	cmp	r1, #0
 8006226:	d041      	beq.n	80062ac <_free_r+0x8c>
 8006228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800622c:	1f0c      	subs	r4, r1, #4
 800622e:	2b00      	cmp	r3, #0
 8006230:	bfb8      	it	lt
 8006232:	18e4      	addlt	r4, r4, r3
 8006234:	f7fe fef0 	bl	8005018 <__malloc_lock>
 8006238:	4a1d      	ldr	r2, [pc, #116]	@ (80062b0 <_free_r+0x90>)
 800623a:	6813      	ldr	r3, [r2, #0]
 800623c:	b933      	cbnz	r3, 800624c <_free_r+0x2c>
 800623e:	6063      	str	r3, [r4, #4]
 8006240:	6014      	str	r4, [r2, #0]
 8006242:	4628      	mov	r0, r5
 8006244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006248:	f7fe beec 	b.w	8005024 <__malloc_unlock>
 800624c:	42a3      	cmp	r3, r4
 800624e:	d908      	bls.n	8006262 <_free_r+0x42>
 8006250:	6820      	ldr	r0, [r4, #0]
 8006252:	1821      	adds	r1, r4, r0
 8006254:	428b      	cmp	r3, r1
 8006256:	bf01      	itttt	eq
 8006258:	6819      	ldreq	r1, [r3, #0]
 800625a:	685b      	ldreq	r3, [r3, #4]
 800625c:	1809      	addeq	r1, r1, r0
 800625e:	6021      	streq	r1, [r4, #0]
 8006260:	e7ed      	b.n	800623e <_free_r+0x1e>
 8006262:	461a      	mov	r2, r3
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	b10b      	cbz	r3, 800626c <_free_r+0x4c>
 8006268:	42a3      	cmp	r3, r4
 800626a:	d9fa      	bls.n	8006262 <_free_r+0x42>
 800626c:	6811      	ldr	r1, [r2, #0]
 800626e:	1850      	adds	r0, r2, r1
 8006270:	42a0      	cmp	r0, r4
 8006272:	d10b      	bne.n	800628c <_free_r+0x6c>
 8006274:	6820      	ldr	r0, [r4, #0]
 8006276:	4401      	add	r1, r0
 8006278:	1850      	adds	r0, r2, r1
 800627a:	4283      	cmp	r3, r0
 800627c:	6011      	str	r1, [r2, #0]
 800627e:	d1e0      	bne.n	8006242 <_free_r+0x22>
 8006280:	6818      	ldr	r0, [r3, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	6053      	str	r3, [r2, #4]
 8006286:	4408      	add	r0, r1
 8006288:	6010      	str	r0, [r2, #0]
 800628a:	e7da      	b.n	8006242 <_free_r+0x22>
 800628c:	d902      	bls.n	8006294 <_free_r+0x74>
 800628e:	230c      	movs	r3, #12
 8006290:	602b      	str	r3, [r5, #0]
 8006292:	e7d6      	b.n	8006242 <_free_r+0x22>
 8006294:	6820      	ldr	r0, [r4, #0]
 8006296:	1821      	adds	r1, r4, r0
 8006298:	428b      	cmp	r3, r1
 800629a:	bf04      	itt	eq
 800629c:	6819      	ldreq	r1, [r3, #0]
 800629e:	685b      	ldreq	r3, [r3, #4]
 80062a0:	6063      	str	r3, [r4, #4]
 80062a2:	bf04      	itt	eq
 80062a4:	1809      	addeq	r1, r1, r0
 80062a6:	6021      	streq	r1, [r4, #0]
 80062a8:	6054      	str	r4, [r2, #4]
 80062aa:	e7ca      	b.n	8006242 <_free_r+0x22>
 80062ac:	bd38      	pop	{r3, r4, r5, pc}
 80062ae:	bf00      	nop
 80062b0:	20005610 	.word	0x20005610

080062b4 <rshift>:
 80062b4:	6903      	ldr	r3, [r0, #16]
 80062b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80062ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062be:	ea4f 1261 	mov.w	r2, r1, asr #5
 80062c2:	f100 0414 	add.w	r4, r0, #20
 80062c6:	dd45      	ble.n	8006354 <rshift+0xa0>
 80062c8:	f011 011f 	ands.w	r1, r1, #31
 80062cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80062d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80062d4:	d10c      	bne.n	80062f0 <rshift+0x3c>
 80062d6:	f100 0710 	add.w	r7, r0, #16
 80062da:	4629      	mov	r1, r5
 80062dc:	42b1      	cmp	r1, r6
 80062de:	d334      	bcc.n	800634a <rshift+0x96>
 80062e0:	1a9b      	subs	r3, r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	1eea      	subs	r2, r5, #3
 80062e6:	4296      	cmp	r6, r2
 80062e8:	bf38      	it	cc
 80062ea:	2300      	movcc	r3, #0
 80062ec:	4423      	add	r3, r4
 80062ee:	e015      	b.n	800631c <rshift+0x68>
 80062f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80062f4:	f1c1 0820 	rsb	r8, r1, #32
 80062f8:	40cf      	lsrs	r7, r1
 80062fa:	f105 0e04 	add.w	lr, r5, #4
 80062fe:	46a1      	mov	r9, r4
 8006300:	4576      	cmp	r6, lr
 8006302:	46f4      	mov	ip, lr
 8006304:	d815      	bhi.n	8006332 <rshift+0x7e>
 8006306:	1a9a      	subs	r2, r3, r2
 8006308:	0092      	lsls	r2, r2, #2
 800630a:	3a04      	subs	r2, #4
 800630c:	3501      	adds	r5, #1
 800630e:	42ae      	cmp	r6, r5
 8006310:	bf38      	it	cc
 8006312:	2200      	movcc	r2, #0
 8006314:	18a3      	adds	r3, r4, r2
 8006316:	50a7      	str	r7, [r4, r2]
 8006318:	b107      	cbz	r7, 800631c <rshift+0x68>
 800631a:	3304      	adds	r3, #4
 800631c:	1b1a      	subs	r2, r3, r4
 800631e:	42a3      	cmp	r3, r4
 8006320:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006324:	bf08      	it	eq
 8006326:	2300      	moveq	r3, #0
 8006328:	6102      	str	r2, [r0, #16]
 800632a:	bf08      	it	eq
 800632c:	6143      	streq	r3, [r0, #20]
 800632e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006332:	f8dc c000 	ldr.w	ip, [ip]
 8006336:	fa0c fc08 	lsl.w	ip, ip, r8
 800633a:	ea4c 0707 	orr.w	r7, ip, r7
 800633e:	f849 7b04 	str.w	r7, [r9], #4
 8006342:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006346:	40cf      	lsrs	r7, r1
 8006348:	e7da      	b.n	8006300 <rshift+0x4c>
 800634a:	f851 cb04 	ldr.w	ip, [r1], #4
 800634e:	f847 cf04 	str.w	ip, [r7, #4]!
 8006352:	e7c3      	b.n	80062dc <rshift+0x28>
 8006354:	4623      	mov	r3, r4
 8006356:	e7e1      	b.n	800631c <rshift+0x68>

08006358 <__hexdig_fun>:
 8006358:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800635c:	2b09      	cmp	r3, #9
 800635e:	d802      	bhi.n	8006366 <__hexdig_fun+0xe>
 8006360:	3820      	subs	r0, #32
 8006362:	b2c0      	uxtb	r0, r0
 8006364:	4770      	bx	lr
 8006366:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800636a:	2b05      	cmp	r3, #5
 800636c:	d801      	bhi.n	8006372 <__hexdig_fun+0x1a>
 800636e:	3847      	subs	r0, #71	@ 0x47
 8006370:	e7f7      	b.n	8006362 <__hexdig_fun+0xa>
 8006372:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006376:	2b05      	cmp	r3, #5
 8006378:	d801      	bhi.n	800637e <__hexdig_fun+0x26>
 800637a:	3827      	subs	r0, #39	@ 0x27
 800637c:	e7f1      	b.n	8006362 <__hexdig_fun+0xa>
 800637e:	2000      	movs	r0, #0
 8006380:	4770      	bx	lr
	...

08006384 <__gethex>:
 8006384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006388:	b085      	sub	sp, #20
 800638a:	468a      	mov	sl, r1
 800638c:	9302      	str	r3, [sp, #8]
 800638e:	680b      	ldr	r3, [r1, #0]
 8006390:	9001      	str	r0, [sp, #4]
 8006392:	4690      	mov	r8, r2
 8006394:	1c9c      	adds	r4, r3, #2
 8006396:	46a1      	mov	r9, r4
 8006398:	f814 0b01 	ldrb.w	r0, [r4], #1
 800639c:	2830      	cmp	r0, #48	@ 0x30
 800639e:	d0fa      	beq.n	8006396 <__gethex+0x12>
 80063a0:	eba9 0303 	sub.w	r3, r9, r3
 80063a4:	f1a3 0b02 	sub.w	fp, r3, #2
 80063a8:	f7ff ffd6 	bl	8006358 <__hexdig_fun>
 80063ac:	4605      	mov	r5, r0
 80063ae:	2800      	cmp	r0, #0
 80063b0:	d168      	bne.n	8006484 <__gethex+0x100>
 80063b2:	49a0      	ldr	r1, [pc, #640]	@ (8006634 <__gethex+0x2b0>)
 80063b4:	2201      	movs	r2, #1
 80063b6:	4648      	mov	r0, r9
 80063b8:	f7ff fe6a 	bl	8006090 <strncmp>
 80063bc:	4607      	mov	r7, r0
 80063be:	2800      	cmp	r0, #0
 80063c0:	d167      	bne.n	8006492 <__gethex+0x10e>
 80063c2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80063c6:	4626      	mov	r6, r4
 80063c8:	f7ff ffc6 	bl	8006358 <__hexdig_fun>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	d062      	beq.n	8006496 <__gethex+0x112>
 80063d0:	4623      	mov	r3, r4
 80063d2:	7818      	ldrb	r0, [r3, #0]
 80063d4:	2830      	cmp	r0, #48	@ 0x30
 80063d6:	4699      	mov	r9, r3
 80063d8:	f103 0301 	add.w	r3, r3, #1
 80063dc:	d0f9      	beq.n	80063d2 <__gethex+0x4e>
 80063de:	f7ff ffbb 	bl	8006358 <__hexdig_fun>
 80063e2:	fab0 f580 	clz	r5, r0
 80063e6:	096d      	lsrs	r5, r5, #5
 80063e8:	f04f 0b01 	mov.w	fp, #1
 80063ec:	464a      	mov	r2, r9
 80063ee:	4616      	mov	r6, r2
 80063f0:	3201      	adds	r2, #1
 80063f2:	7830      	ldrb	r0, [r6, #0]
 80063f4:	f7ff ffb0 	bl	8006358 <__hexdig_fun>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	d1f8      	bne.n	80063ee <__gethex+0x6a>
 80063fc:	498d      	ldr	r1, [pc, #564]	@ (8006634 <__gethex+0x2b0>)
 80063fe:	2201      	movs	r2, #1
 8006400:	4630      	mov	r0, r6
 8006402:	f7ff fe45 	bl	8006090 <strncmp>
 8006406:	2800      	cmp	r0, #0
 8006408:	d13f      	bne.n	800648a <__gethex+0x106>
 800640a:	b944      	cbnz	r4, 800641e <__gethex+0x9a>
 800640c:	1c74      	adds	r4, r6, #1
 800640e:	4622      	mov	r2, r4
 8006410:	4616      	mov	r6, r2
 8006412:	3201      	adds	r2, #1
 8006414:	7830      	ldrb	r0, [r6, #0]
 8006416:	f7ff ff9f 	bl	8006358 <__hexdig_fun>
 800641a:	2800      	cmp	r0, #0
 800641c:	d1f8      	bne.n	8006410 <__gethex+0x8c>
 800641e:	1ba4      	subs	r4, r4, r6
 8006420:	00a7      	lsls	r7, r4, #2
 8006422:	7833      	ldrb	r3, [r6, #0]
 8006424:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006428:	2b50      	cmp	r3, #80	@ 0x50
 800642a:	d13e      	bne.n	80064aa <__gethex+0x126>
 800642c:	7873      	ldrb	r3, [r6, #1]
 800642e:	2b2b      	cmp	r3, #43	@ 0x2b
 8006430:	d033      	beq.n	800649a <__gethex+0x116>
 8006432:	2b2d      	cmp	r3, #45	@ 0x2d
 8006434:	d034      	beq.n	80064a0 <__gethex+0x11c>
 8006436:	1c71      	adds	r1, r6, #1
 8006438:	2400      	movs	r4, #0
 800643a:	7808      	ldrb	r0, [r1, #0]
 800643c:	f7ff ff8c 	bl	8006358 <__hexdig_fun>
 8006440:	1e43      	subs	r3, r0, #1
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b18      	cmp	r3, #24
 8006446:	d830      	bhi.n	80064aa <__gethex+0x126>
 8006448:	f1a0 0210 	sub.w	r2, r0, #16
 800644c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006450:	f7ff ff82 	bl	8006358 <__hexdig_fun>
 8006454:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8006458:	fa5f fc8c 	uxtb.w	ip, ip
 800645c:	f1bc 0f18 	cmp.w	ip, #24
 8006460:	f04f 030a 	mov.w	r3, #10
 8006464:	d91e      	bls.n	80064a4 <__gethex+0x120>
 8006466:	b104      	cbz	r4, 800646a <__gethex+0xe6>
 8006468:	4252      	negs	r2, r2
 800646a:	4417      	add	r7, r2
 800646c:	f8ca 1000 	str.w	r1, [sl]
 8006470:	b1ed      	cbz	r5, 80064ae <__gethex+0x12a>
 8006472:	f1bb 0f00 	cmp.w	fp, #0
 8006476:	bf0c      	ite	eq
 8006478:	2506      	moveq	r5, #6
 800647a:	2500      	movne	r5, #0
 800647c:	4628      	mov	r0, r5
 800647e:	b005      	add	sp, #20
 8006480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006484:	2500      	movs	r5, #0
 8006486:	462c      	mov	r4, r5
 8006488:	e7b0      	b.n	80063ec <__gethex+0x68>
 800648a:	2c00      	cmp	r4, #0
 800648c:	d1c7      	bne.n	800641e <__gethex+0x9a>
 800648e:	4627      	mov	r7, r4
 8006490:	e7c7      	b.n	8006422 <__gethex+0x9e>
 8006492:	464e      	mov	r6, r9
 8006494:	462f      	mov	r7, r5
 8006496:	2501      	movs	r5, #1
 8006498:	e7c3      	b.n	8006422 <__gethex+0x9e>
 800649a:	2400      	movs	r4, #0
 800649c:	1cb1      	adds	r1, r6, #2
 800649e:	e7cc      	b.n	800643a <__gethex+0xb6>
 80064a0:	2401      	movs	r4, #1
 80064a2:	e7fb      	b.n	800649c <__gethex+0x118>
 80064a4:	fb03 0002 	mla	r0, r3, r2, r0
 80064a8:	e7ce      	b.n	8006448 <__gethex+0xc4>
 80064aa:	4631      	mov	r1, r6
 80064ac:	e7de      	b.n	800646c <__gethex+0xe8>
 80064ae:	eba6 0309 	sub.w	r3, r6, r9
 80064b2:	3b01      	subs	r3, #1
 80064b4:	4629      	mov	r1, r5
 80064b6:	2b07      	cmp	r3, #7
 80064b8:	dc0a      	bgt.n	80064d0 <__gethex+0x14c>
 80064ba:	9801      	ldr	r0, [sp, #4]
 80064bc:	f001 fa6c 	bl	8007998 <_Balloc>
 80064c0:	4604      	mov	r4, r0
 80064c2:	b940      	cbnz	r0, 80064d6 <__gethex+0x152>
 80064c4:	4b5c      	ldr	r3, [pc, #368]	@ (8006638 <__gethex+0x2b4>)
 80064c6:	4602      	mov	r2, r0
 80064c8:	21e4      	movs	r1, #228	@ 0xe4
 80064ca:	485c      	ldr	r0, [pc, #368]	@ (800663c <__gethex+0x2b8>)
 80064cc:	f002 f908 	bl	80086e0 <__assert_func>
 80064d0:	3101      	adds	r1, #1
 80064d2:	105b      	asrs	r3, r3, #1
 80064d4:	e7ef      	b.n	80064b6 <__gethex+0x132>
 80064d6:	f100 0a14 	add.w	sl, r0, #20
 80064da:	2300      	movs	r3, #0
 80064dc:	4655      	mov	r5, sl
 80064de:	469b      	mov	fp, r3
 80064e0:	45b1      	cmp	r9, r6
 80064e2:	d337      	bcc.n	8006554 <__gethex+0x1d0>
 80064e4:	f845 bb04 	str.w	fp, [r5], #4
 80064e8:	eba5 050a 	sub.w	r5, r5, sl
 80064ec:	10ad      	asrs	r5, r5, #2
 80064ee:	6125      	str	r5, [r4, #16]
 80064f0:	4658      	mov	r0, fp
 80064f2:	f001 fb43 	bl	8007b7c <__hi0bits>
 80064f6:	016d      	lsls	r5, r5, #5
 80064f8:	f8d8 6000 	ldr.w	r6, [r8]
 80064fc:	1a2d      	subs	r5, r5, r0
 80064fe:	42b5      	cmp	r5, r6
 8006500:	dd54      	ble.n	80065ac <__gethex+0x228>
 8006502:	1bad      	subs	r5, r5, r6
 8006504:	4629      	mov	r1, r5
 8006506:	4620      	mov	r0, r4
 8006508:	f001 fed7 	bl	80082ba <__any_on>
 800650c:	4681      	mov	r9, r0
 800650e:	b178      	cbz	r0, 8006530 <__gethex+0x1ac>
 8006510:	1e6b      	subs	r3, r5, #1
 8006512:	1159      	asrs	r1, r3, #5
 8006514:	f003 021f 	and.w	r2, r3, #31
 8006518:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800651c:	f04f 0901 	mov.w	r9, #1
 8006520:	fa09 f202 	lsl.w	r2, r9, r2
 8006524:	420a      	tst	r2, r1
 8006526:	d003      	beq.n	8006530 <__gethex+0x1ac>
 8006528:	454b      	cmp	r3, r9
 800652a:	dc36      	bgt.n	800659a <__gethex+0x216>
 800652c:	f04f 0902 	mov.w	r9, #2
 8006530:	4629      	mov	r1, r5
 8006532:	4620      	mov	r0, r4
 8006534:	f7ff febe 	bl	80062b4 <rshift>
 8006538:	442f      	add	r7, r5
 800653a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800653e:	42bb      	cmp	r3, r7
 8006540:	da42      	bge.n	80065c8 <__gethex+0x244>
 8006542:	9801      	ldr	r0, [sp, #4]
 8006544:	4621      	mov	r1, r4
 8006546:	f001 fa67 	bl	8007a18 <_Bfree>
 800654a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800654c:	2300      	movs	r3, #0
 800654e:	6013      	str	r3, [r2, #0]
 8006550:	25a3      	movs	r5, #163	@ 0xa3
 8006552:	e793      	b.n	800647c <__gethex+0xf8>
 8006554:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8006558:	2a2e      	cmp	r2, #46	@ 0x2e
 800655a:	d012      	beq.n	8006582 <__gethex+0x1fe>
 800655c:	2b20      	cmp	r3, #32
 800655e:	d104      	bne.n	800656a <__gethex+0x1e6>
 8006560:	f845 bb04 	str.w	fp, [r5], #4
 8006564:	f04f 0b00 	mov.w	fp, #0
 8006568:	465b      	mov	r3, fp
 800656a:	7830      	ldrb	r0, [r6, #0]
 800656c:	9303      	str	r3, [sp, #12]
 800656e:	f7ff fef3 	bl	8006358 <__hexdig_fun>
 8006572:	9b03      	ldr	r3, [sp, #12]
 8006574:	f000 000f 	and.w	r0, r0, #15
 8006578:	4098      	lsls	r0, r3
 800657a:	ea4b 0b00 	orr.w	fp, fp, r0
 800657e:	3304      	adds	r3, #4
 8006580:	e7ae      	b.n	80064e0 <__gethex+0x15c>
 8006582:	45b1      	cmp	r9, r6
 8006584:	d8ea      	bhi.n	800655c <__gethex+0x1d8>
 8006586:	492b      	ldr	r1, [pc, #172]	@ (8006634 <__gethex+0x2b0>)
 8006588:	9303      	str	r3, [sp, #12]
 800658a:	2201      	movs	r2, #1
 800658c:	4630      	mov	r0, r6
 800658e:	f7ff fd7f 	bl	8006090 <strncmp>
 8006592:	9b03      	ldr	r3, [sp, #12]
 8006594:	2800      	cmp	r0, #0
 8006596:	d1e1      	bne.n	800655c <__gethex+0x1d8>
 8006598:	e7a2      	b.n	80064e0 <__gethex+0x15c>
 800659a:	1ea9      	subs	r1, r5, #2
 800659c:	4620      	mov	r0, r4
 800659e:	f001 fe8c 	bl	80082ba <__any_on>
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d0c2      	beq.n	800652c <__gethex+0x1a8>
 80065a6:	f04f 0903 	mov.w	r9, #3
 80065aa:	e7c1      	b.n	8006530 <__gethex+0x1ac>
 80065ac:	da09      	bge.n	80065c2 <__gethex+0x23e>
 80065ae:	1b75      	subs	r5, r6, r5
 80065b0:	4621      	mov	r1, r4
 80065b2:	9801      	ldr	r0, [sp, #4]
 80065b4:	462a      	mov	r2, r5
 80065b6:	f001 fc47 	bl	8007e48 <__lshift>
 80065ba:	1b7f      	subs	r7, r7, r5
 80065bc:	4604      	mov	r4, r0
 80065be:	f100 0a14 	add.w	sl, r0, #20
 80065c2:	f04f 0900 	mov.w	r9, #0
 80065c6:	e7b8      	b.n	800653a <__gethex+0x1b6>
 80065c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80065cc:	42bd      	cmp	r5, r7
 80065ce:	dd6f      	ble.n	80066b0 <__gethex+0x32c>
 80065d0:	1bed      	subs	r5, r5, r7
 80065d2:	42ae      	cmp	r6, r5
 80065d4:	dc34      	bgt.n	8006640 <__gethex+0x2bc>
 80065d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d022      	beq.n	8006624 <__gethex+0x2a0>
 80065de:	2b03      	cmp	r3, #3
 80065e0:	d024      	beq.n	800662c <__gethex+0x2a8>
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d115      	bne.n	8006612 <__gethex+0x28e>
 80065e6:	42ae      	cmp	r6, r5
 80065e8:	d113      	bne.n	8006612 <__gethex+0x28e>
 80065ea:	2e01      	cmp	r6, #1
 80065ec:	d10b      	bne.n	8006606 <__gethex+0x282>
 80065ee:	9a02      	ldr	r2, [sp, #8]
 80065f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	2301      	movs	r3, #1
 80065f8:	6123      	str	r3, [r4, #16]
 80065fa:	f8ca 3000 	str.w	r3, [sl]
 80065fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006600:	2562      	movs	r5, #98	@ 0x62
 8006602:	601c      	str	r4, [r3, #0]
 8006604:	e73a      	b.n	800647c <__gethex+0xf8>
 8006606:	1e71      	subs	r1, r6, #1
 8006608:	4620      	mov	r0, r4
 800660a:	f001 fe56 	bl	80082ba <__any_on>
 800660e:	2800      	cmp	r0, #0
 8006610:	d1ed      	bne.n	80065ee <__gethex+0x26a>
 8006612:	9801      	ldr	r0, [sp, #4]
 8006614:	4621      	mov	r1, r4
 8006616:	f001 f9ff 	bl	8007a18 <_Bfree>
 800661a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800661c:	2300      	movs	r3, #0
 800661e:	6013      	str	r3, [r2, #0]
 8006620:	2550      	movs	r5, #80	@ 0x50
 8006622:	e72b      	b.n	800647c <__gethex+0xf8>
 8006624:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1f3      	bne.n	8006612 <__gethex+0x28e>
 800662a:	e7e0      	b.n	80065ee <__gethex+0x26a>
 800662c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1dd      	bne.n	80065ee <__gethex+0x26a>
 8006632:	e7ee      	b.n	8006612 <__gethex+0x28e>
 8006634:	080092e4 	.word	0x080092e4
 8006638:	08009451 	.word	0x08009451
 800663c:	08009462 	.word	0x08009462
 8006640:	1e6f      	subs	r7, r5, #1
 8006642:	f1b9 0f00 	cmp.w	r9, #0
 8006646:	d130      	bne.n	80066aa <__gethex+0x326>
 8006648:	b127      	cbz	r7, 8006654 <__gethex+0x2d0>
 800664a:	4639      	mov	r1, r7
 800664c:	4620      	mov	r0, r4
 800664e:	f001 fe34 	bl	80082ba <__any_on>
 8006652:	4681      	mov	r9, r0
 8006654:	117a      	asrs	r2, r7, #5
 8006656:	2301      	movs	r3, #1
 8006658:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800665c:	f007 071f 	and.w	r7, r7, #31
 8006660:	40bb      	lsls	r3, r7
 8006662:	4213      	tst	r3, r2
 8006664:	4629      	mov	r1, r5
 8006666:	4620      	mov	r0, r4
 8006668:	bf18      	it	ne
 800666a:	f049 0902 	orrne.w	r9, r9, #2
 800666e:	f7ff fe21 	bl	80062b4 <rshift>
 8006672:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8006676:	1b76      	subs	r6, r6, r5
 8006678:	2502      	movs	r5, #2
 800667a:	f1b9 0f00 	cmp.w	r9, #0
 800667e:	d047      	beq.n	8006710 <__gethex+0x38c>
 8006680:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006684:	2b02      	cmp	r3, #2
 8006686:	d015      	beq.n	80066b4 <__gethex+0x330>
 8006688:	2b03      	cmp	r3, #3
 800668a:	d017      	beq.n	80066bc <__gethex+0x338>
 800668c:	2b01      	cmp	r3, #1
 800668e:	d109      	bne.n	80066a4 <__gethex+0x320>
 8006690:	f019 0f02 	tst.w	r9, #2
 8006694:	d006      	beq.n	80066a4 <__gethex+0x320>
 8006696:	f8da 3000 	ldr.w	r3, [sl]
 800669a:	ea49 0903 	orr.w	r9, r9, r3
 800669e:	f019 0f01 	tst.w	r9, #1
 80066a2:	d10e      	bne.n	80066c2 <__gethex+0x33e>
 80066a4:	f045 0510 	orr.w	r5, r5, #16
 80066a8:	e032      	b.n	8006710 <__gethex+0x38c>
 80066aa:	f04f 0901 	mov.w	r9, #1
 80066ae:	e7d1      	b.n	8006654 <__gethex+0x2d0>
 80066b0:	2501      	movs	r5, #1
 80066b2:	e7e2      	b.n	800667a <__gethex+0x2f6>
 80066b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066b6:	f1c3 0301 	rsb	r3, r3, #1
 80066ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80066bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d0f0      	beq.n	80066a4 <__gethex+0x320>
 80066c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80066c6:	f104 0314 	add.w	r3, r4, #20
 80066ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80066ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80066d2:	f04f 0c00 	mov.w	ip, #0
 80066d6:	4618      	mov	r0, r3
 80066d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80066dc:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80066e0:	d01b      	beq.n	800671a <__gethex+0x396>
 80066e2:	3201      	adds	r2, #1
 80066e4:	6002      	str	r2, [r0, #0]
 80066e6:	2d02      	cmp	r5, #2
 80066e8:	f104 0314 	add.w	r3, r4, #20
 80066ec:	d13c      	bne.n	8006768 <__gethex+0x3e4>
 80066ee:	f8d8 2000 	ldr.w	r2, [r8]
 80066f2:	3a01      	subs	r2, #1
 80066f4:	42b2      	cmp	r2, r6
 80066f6:	d109      	bne.n	800670c <__gethex+0x388>
 80066f8:	1171      	asrs	r1, r6, #5
 80066fa:	2201      	movs	r2, #1
 80066fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006700:	f006 061f 	and.w	r6, r6, #31
 8006704:	fa02 f606 	lsl.w	r6, r2, r6
 8006708:	421e      	tst	r6, r3
 800670a:	d13a      	bne.n	8006782 <__gethex+0x3fe>
 800670c:	f045 0520 	orr.w	r5, r5, #32
 8006710:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006712:	601c      	str	r4, [r3, #0]
 8006714:	9b02      	ldr	r3, [sp, #8]
 8006716:	601f      	str	r7, [r3, #0]
 8006718:	e6b0      	b.n	800647c <__gethex+0xf8>
 800671a:	4299      	cmp	r1, r3
 800671c:	f843 cc04 	str.w	ip, [r3, #-4]
 8006720:	d8d9      	bhi.n	80066d6 <__gethex+0x352>
 8006722:	68a3      	ldr	r3, [r4, #8]
 8006724:	459b      	cmp	fp, r3
 8006726:	db17      	blt.n	8006758 <__gethex+0x3d4>
 8006728:	6861      	ldr	r1, [r4, #4]
 800672a:	9801      	ldr	r0, [sp, #4]
 800672c:	3101      	adds	r1, #1
 800672e:	f001 f933 	bl	8007998 <_Balloc>
 8006732:	4681      	mov	r9, r0
 8006734:	b918      	cbnz	r0, 800673e <__gethex+0x3ba>
 8006736:	4b1a      	ldr	r3, [pc, #104]	@ (80067a0 <__gethex+0x41c>)
 8006738:	4602      	mov	r2, r0
 800673a:	2184      	movs	r1, #132	@ 0x84
 800673c:	e6c5      	b.n	80064ca <__gethex+0x146>
 800673e:	6922      	ldr	r2, [r4, #16]
 8006740:	3202      	adds	r2, #2
 8006742:	f104 010c 	add.w	r1, r4, #12
 8006746:	0092      	lsls	r2, r2, #2
 8006748:	300c      	adds	r0, #12
 800674a:	f7ff fd52 	bl	80061f2 <memcpy>
 800674e:	4621      	mov	r1, r4
 8006750:	9801      	ldr	r0, [sp, #4]
 8006752:	f001 f961 	bl	8007a18 <_Bfree>
 8006756:	464c      	mov	r4, r9
 8006758:	6923      	ldr	r3, [r4, #16]
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006760:	6122      	str	r2, [r4, #16]
 8006762:	2201      	movs	r2, #1
 8006764:	615a      	str	r2, [r3, #20]
 8006766:	e7be      	b.n	80066e6 <__gethex+0x362>
 8006768:	6922      	ldr	r2, [r4, #16]
 800676a:	455a      	cmp	r2, fp
 800676c:	dd0b      	ble.n	8006786 <__gethex+0x402>
 800676e:	2101      	movs	r1, #1
 8006770:	4620      	mov	r0, r4
 8006772:	f7ff fd9f 	bl	80062b4 <rshift>
 8006776:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800677a:	3701      	adds	r7, #1
 800677c:	42bb      	cmp	r3, r7
 800677e:	f6ff aee0 	blt.w	8006542 <__gethex+0x1be>
 8006782:	2501      	movs	r5, #1
 8006784:	e7c2      	b.n	800670c <__gethex+0x388>
 8006786:	f016 061f 	ands.w	r6, r6, #31
 800678a:	d0fa      	beq.n	8006782 <__gethex+0x3fe>
 800678c:	4453      	add	r3, sl
 800678e:	f1c6 0620 	rsb	r6, r6, #32
 8006792:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006796:	f001 f9f1 	bl	8007b7c <__hi0bits>
 800679a:	42b0      	cmp	r0, r6
 800679c:	dbe7      	blt.n	800676e <__gethex+0x3ea>
 800679e:	e7f0      	b.n	8006782 <__gethex+0x3fe>
 80067a0:	08009451 	.word	0x08009451

080067a4 <L_shift>:
 80067a4:	f1c2 0208 	rsb	r2, r2, #8
 80067a8:	0092      	lsls	r2, r2, #2
 80067aa:	b570      	push	{r4, r5, r6, lr}
 80067ac:	f1c2 0620 	rsb	r6, r2, #32
 80067b0:	6843      	ldr	r3, [r0, #4]
 80067b2:	6804      	ldr	r4, [r0, #0]
 80067b4:	fa03 f506 	lsl.w	r5, r3, r6
 80067b8:	432c      	orrs	r4, r5
 80067ba:	40d3      	lsrs	r3, r2
 80067bc:	6004      	str	r4, [r0, #0]
 80067be:	f840 3f04 	str.w	r3, [r0, #4]!
 80067c2:	4288      	cmp	r0, r1
 80067c4:	d3f4      	bcc.n	80067b0 <L_shift+0xc>
 80067c6:	bd70      	pop	{r4, r5, r6, pc}

080067c8 <__match>:
 80067c8:	b530      	push	{r4, r5, lr}
 80067ca:	6803      	ldr	r3, [r0, #0]
 80067cc:	3301      	adds	r3, #1
 80067ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067d2:	b914      	cbnz	r4, 80067da <__match+0x12>
 80067d4:	6003      	str	r3, [r0, #0]
 80067d6:	2001      	movs	r0, #1
 80067d8:	bd30      	pop	{r4, r5, pc}
 80067da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067de:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80067e2:	2d19      	cmp	r5, #25
 80067e4:	bf98      	it	ls
 80067e6:	3220      	addls	r2, #32
 80067e8:	42a2      	cmp	r2, r4
 80067ea:	d0f0      	beq.n	80067ce <__match+0x6>
 80067ec:	2000      	movs	r0, #0
 80067ee:	e7f3      	b.n	80067d8 <__match+0x10>

080067f0 <__hexnan>:
 80067f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f4:	680b      	ldr	r3, [r1, #0]
 80067f6:	6801      	ldr	r1, [r0, #0]
 80067f8:	115e      	asrs	r6, r3, #5
 80067fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80067fe:	f013 031f 	ands.w	r3, r3, #31
 8006802:	b087      	sub	sp, #28
 8006804:	bf18      	it	ne
 8006806:	3604      	addne	r6, #4
 8006808:	2500      	movs	r5, #0
 800680a:	1f37      	subs	r7, r6, #4
 800680c:	4682      	mov	sl, r0
 800680e:	4690      	mov	r8, r2
 8006810:	9301      	str	r3, [sp, #4]
 8006812:	f846 5c04 	str.w	r5, [r6, #-4]
 8006816:	46b9      	mov	r9, r7
 8006818:	463c      	mov	r4, r7
 800681a:	9502      	str	r5, [sp, #8]
 800681c:	46ab      	mov	fp, r5
 800681e:	784a      	ldrb	r2, [r1, #1]
 8006820:	1c4b      	adds	r3, r1, #1
 8006822:	9303      	str	r3, [sp, #12]
 8006824:	b342      	cbz	r2, 8006878 <__hexnan+0x88>
 8006826:	4610      	mov	r0, r2
 8006828:	9105      	str	r1, [sp, #20]
 800682a:	9204      	str	r2, [sp, #16]
 800682c:	f7ff fd94 	bl	8006358 <__hexdig_fun>
 8006830:	2800      	cmp	r0, #0
 8006832:	d151      	bne.n	80068d8 <__hexnan+0xe8>
 8006834:	9a04      	ldr	r2, [sp, #16]
 8006836:	9905      	ldr	r1, [sp, #20]
 8006838:	2a20      	cmp	r2, #32
 800683a:	d818      	bhi.n	800686e <__hexnan+0x7e>
 800683c:	9b02      	ldr	r3, [sp, #8]
 800683e:	459b      	cmp	fp, r3
 8006840:	dd13      	ble.n	800686a <__hexnan+0x7a>
 8006842:	454c      	cmp	r4, r9
 8006844:	d206      	bcs.n	8006854 <__hexnan+0x64>
 8006846:	2d07      	cmp	r5, #7
 8006848:	dc04      	bgt.n	8006854 <__hexnan+0x64>
 800684a:	462a      	mov	r2, r5
 800684c:	4649      	mov	r1, r9
 800684e:	4620      	mov	r0, r4
 8006850:	f7ff ffa8 	bl	80067a4 <L_shift>
 8006854:	4544      	cmp	r4, r8
 8006856:	d952      	bls.n	80068fe <__hexnan+0x10e>
 8006858:	2300      	movs	r3, #0
 800685a:	f1a4 0904 	sub.w	r9, r4, #4
 800685e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006862:	f8cd b008 	str.w	fp, [sp, #8]
 8006866:	464c      	mov	r4, r9
 8006868:	461d      	mov	r5, r3
 800686a:	9903      	ldr	r1, [sp, #12]
 800686c:	e7d7      	b.n	800681e <__hexnan+0x2e>
 800686e:	2a29      	cmp	r2, #41	@ 0x29
 8006870:	d157      	bne.n	8006922 <__hexnan+0x132>
 8006872:	3102      	adds	r1, #2
 8006874:	f8ca 1000 	str.w	r1, [sl]
 8006878:	f1bb 0f00 	cmp.w	fp, #0
 800687c:	d051      	beq.n	8006922 <__hexnan+0x132>
 800687e:	454c      	cmp	r4, r9
 8006880:	d206      	bcs.n	8006890 <__hexnan+0xa0>
 8006882:	2d07      	cmp	r5, #7
 8006884:	dc04      	bgt.n	8006890 <__hexnan+0xa0>
 8006886:	462a      	mov	r2, r5
 8006888:	4649      	mov	r1, r9
 800688a:	4620      	mov	r0, r4
 800688c:	f7ff ff8a 	bl	80067a4 <L_shift>
 8006890:	4544      	cmp	r4, r8
 8006892:	d936      	bls.n	8006902 <__hexnan+0x112>
 8006894:	f1a8 0204 	sub.w	r2, r8, #4
 8006898:	4623      	mov	r3, r4
 800689a:	f853 1b04 	ldr.w	r1, [r3], #4
 800689e:	f842 1f04 	str.w	r1, [r2, #4]!
 80068a2:	429f      	cmp	r7, r3
 80068a4:	d2f9      	bcs.n	800689a <__hexnan+0xaa>
 80068a6:	1b3b      	subs	r3, r7, r4
 80068a8:	f023 0303 	bic.w	r3, r3, #3
 80068ac:	3304      	adds	r3, #4
 80068ae:	3401      	adds	r4, #1
 80068b0:	3e03      	subs	r6, #3
 80068b2:	42b4      	cmp	r4, r6
 80068b4:	bf88      	it	hi
 80068b6:	2304      	movhi	r3, #4
 80068b8:	4443      	add	r3, r8
 80068ba:	2200      	movs	r2, #0
 80068bc:	f843 2b04 	str.w	r2, [r3], #4
 80068c0:	429f      	cmp	r7, r3
 80068c2:	d2fb      	bcs.n	80068bc <__hexnan+0xcc>
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	b91b      	cbnz	r3, 80068d0 <__hexnan+0xe0>
 80068c8:	4547      	cmp	r7, r8
 80068ca:	d128      	bne.n	800691e <__hexnan+0x12e>
 80068cc:	2301      	movs	r3, #1
 80068ce:	603b      	str	r3, [r7, #0]
 80068d0:	2005      	movs	r0, #5
 80068d2:	b007      	add	sp, #28
 80068d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068d8:	3501      	adds	r5, #1
 80068da:	2d08      	cmp	r5, #8
 80068dc:	f10b 0b01 	add.w	fp, fp, #1
 80068e0:	dd06      	ble.n	80068f0 <__hexnan+0x100>
 80068e2:	4544      	cmp	r4, r8
 80068e4:	d9c1      	bls.n	800686a <__hexnan+0x7a>
 80068e6:	2300      	movs	r3, #0
 80068e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80068ec:	2501      	movs	r5, #1
 80068ee:	3c04      	subs	r4, #4
 80068f0:	6822      	ldr	r2, [r4, #0]
 80068f2:	f000 000f 	and.w	r0, r0, #15
 80068f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80068fa:	6020      	str	r0, [r4, #0]
 80068fc:	e7b5      	b.n	800686a <__hexnan+0x7a>
 80068fe:	2508      	movs	r5, #8
 8006900:	e7b3      	b.n	800686a <__hexnan+0x7a>
 8006902:	9b01      	ldr	r3, [sp, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d0dd      	beq.n	80068c4 <__hexnan+0xd4>
 8006908:	f1c3 0320 	rsb	r3, r3, #32
 800690c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006910:	40da      	lsrs	r2, r3
 8006912:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006916:	4013      	ands	r3, r2
 8006918:	f846 3c04 	str.w	r3, [r6, #-4]
 800691c:	e7d2      	b.n	80068c4 <__hexnan+0xd4>
 800691e:	3f04      	subs	r7, #4
 8006920:	e7d0      	b.n	80068c4 <__hexnan+0xd4>
 8006922:	2004      	movs	r0, #4
 8006924:	e7d5      	b.n	80068d2 <__hexnan+0xe2>

08006926 <__ssputs_r>:
 8006926:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800692a:	688e      	ldr	r6, [r1, #8]
 800692c:	461f      	mov	r7, r3
 800692e:	42be      	cmp	r6, r7
 8006930:	680b      	ldr	r3, [r1, #0]
 8006932:	4682      	mov	sl, r0
 8006934:	460c      	mov	r4, r1
 8006936:	4690      	mov	r8, r2
 8006938:	d82d      	bhi.n	8006996 <__ssputs_r+0x70>
 800693a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800693e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006942:	d026      	beq.n	8006992 <__ssputs_r+0x6c>
 8006944:	6965      	ldr	r5, [r4, #20]
 8006946:	6909      	ldr	r1, [r1, #16]
 8006948:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800694c:	eba3 0901 	sub.w	r9, r3, r1
 8006950:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006954:	1c7b      	adds	r3, r7, #1
 8006956:	444b      	add	r3, r9
 8006958:	106d      	asrs	r5, r5, #1
 800695a:	429d      	cmp	r5, r3
 800695c:	bf38      	it	cc
 800695e:	461d      	movcc	r5, r3
 8006960:	0553      	lsls	r3, r2, #21
 8006962:	d527      	bpl.n	80069b4 <__ssputs_r+0x8e>
 8006964:	4629      	mov	r1, r5
 8006966:	f7fe fad7 	bl	8004f18 <_malloc_r>
 800696a:	4606      	mov	r6, r0
 800696c:	b360      	cbz	r0, 80069c8 <__ssputs_r+0xa2>
 800696e:	6921      	ldr	r1, [r4, #16]
 8006970:	464a      	mov	r2, r9
 8006972:	f7ff fc3e 	bl	80061f2 <memcpy>
 8006976:	89a3      	ldrh	r3, [r4, #12]
 8006978:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800697c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006980:	81a3      	strh	r3, [r4, #12]
 8006982:	6126      	str	r6, [r4, #16]
 8006984:	6165      	str	r5, [r4, #20]
 8006986:	444e      	add	r6, r9
 8006988:	eba5 0509 	sub.w	r5, r5, r9
 800698c:	6026      	str	r6, [r4, #0]
 800698e:	60a5      	str	r5, [r4, #8]
 8006990:	463e      	mov	r6, r7
 8006992:	42be      	cmp	r6, r7
 8006994:	d900      	bls.n	8006998 <__ssputs_r+0x72>
 8006996:	463e      	mov	r6, r7
 8006998:	6820      	ldr	r0, [r4, #0]
 800699a:	4632      	mov	r2, r6
 800699c:	4641      	mov	r1, r8
 800699e:	f001 fe62 	bl	8008666 <memmove>
 80069a2:	68a3      	ldr	r3, [r4, #8]
 80069a4:	1b9b      	subs	r3, r3, r6
 80069a6:	60a3      	str	r3, [r4, #8]
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	4433      	add	r3, r6
 80069ac:	6023      	str	r3, [r4, #0]
 80069ae:	2000      	movs	r0, #0
 80069b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b4:	462a      	mov	r2, r5
 80069b6:	f7fe fc89 	bl	80052cc <_realloc_r>
 80069ba:	4606      	mov	r6, r0
 80069bc:	2800      	cmp	r0, #0
 80069be:	d1e0      	bne.n	8006982 <__ssputs_r+0x5c>
 80069c0:	6921      	ldr	r1, [r4, #16]
 80069c2:	4650      	mov	r0, sl
 80069c4:	f7ff fc2c 	bl	8006220 <_free_r>
 80069c8:	230c      	movs	r3, #12
 80069ca:	f8ca 3000 	str.w	r3, [sl]
 80069ce:	89a3      	ldrh	r3, [r4, #12]
 80069d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069d4:	81a3      	strh	r3, [r4, #12]
 80069d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069da:	e7e9      	b.n	80069b0 <__ssputs_r+0x8a>

080069dc <_svfiprintf_r>:
 80069dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e0:	4698      	mov	r8, r3
 80069e2:	898b      	ldrh	r3, [r1, #12]
 80069e4:	061b      	lsls	r3, r3, #24
 80069e6:	b09d      	sub	sp, #116	@ 0x74
 80069e8:	4607      	mov	r7, r0
 80069ea:	460d      	mov	r5, r1
 80069ec:	4614      	mov	r4, r2
 80069ee:	d510      	bpl.n	8006a12 <_svfiprintf_r+0x36>
 80069f0:	690b      	ldr	r3, [r1, #16]
 80069f2:	b973      	cbnz	r3, 8006a12 <_svfiprintf_r+0x36>
 80069f4:	2140      	movs	r1, #64	@ 0x40
 80069f6:	f7fe fa8f 	bl	8004f18 <_malloc_r>
 80069fa:	6028      	str	r0, [r5, #0]
 80069fc:	6128      	str	r0, [r5, #16]
 80069fe:	b930      	cbnz	r0, 8006a0e <_svfiprintf_r+0x32>
 8006a00:	230c      	movs	r3, #12
 8006a02:	603b      	str	r3, [r7, #0]
 8006a04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a08:	b01d      	add	sp, #116	@ 0x74
 8006a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a0e:	2340      	movs	r3, #64	@ 0x40
 8006a10:	616b      	str	r3, [r5, #20]
 8006a12:	2300      	movs	r3, #0
 8006a14:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a16:	2320      	movs	r3, #32
 8006a18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a20:	2330      	movs	r3, #48	@ 0x30
 8006a22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006bc0 <_svfiprintf_r+0x1e4>
 8006a26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a2a:	f04f 0901 	mov.w	r9, #1
 8006a2e:	4623      	mov	r3, r4
 8006a30:	469a      	mov	sl, r3
 8006a32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a36:	b10a      	cbz	r2, 8006a3c <_svfiprintf_r+0x60>
 8006a38:	2a25      	cmp	r2, #37	@ 0x25
 8006a3a:	d1f9      	bne.n	8006a30 <_svfiprintf_r+0x54>
 8006a3c:	ebba 0b04 	subs.w	fp, sl, r4
 8006a40:	d00b      	beq.n	8006a5a <_svfiprintf_r+0x7e>
 8006a42:	465b      	mov	r3, fp
 8006a44:	4622      	mov	r2, r4
 8006a46:	4629      	mov	r1, r5
 8006a48:	4638      	mov	r0, r7
 8006a4a:	f7ff ff6c 	bl	8006926 <__ssputs_r>
 8006a4e:	3001      	adds	r0, #1
 8006a50:	f000 80a7 	beq.w	8006ba2 <_svfiprintf_r+0x1c6>
 8006a54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a56:	445a      	add	r2, fp
 8006a58:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 809f 	beq.w	8006ba2 <_svfiprintf_r+0x1c6>
 8006a64:	2300      	movs	r3, #0
 8006a66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a6e:	f10a 0a01 	add.w	sl, sl, #1
 8006a72:	9304      	str	r3, [sp, #16]
 8006a74:	9307      	str	r3, [sp, #28]
 8006a76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a7c:	4654      	mov	r4, sl
 8006a7e:	2205      	movs	r2, #5
 8006a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a84:	484e      	ldr	r0, [pc, #312]	@ (8006bc0 <_svfiprintf_r+0x1e4>)
 8006a86:	f7f9 fbdb 	bl	8000240 <memchr>
 8006a8a:	9a04      	ldr	r2, [sp, #16]
 8006a8c:	b9d8      	cbnz	r0, 8006ac6 <_svfiprintf_r+0xea>
 8006a8e:	06d0      	lsls	r0, r2, #27
 8006a90:	bf44      	itt	mi
 8006a92:	2320      	movmi	r3, #32
 8006a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a98:	0711      	lsls	r1, r2, #28
 8006a9a:	bf44      	itt	mi
 8006a9c:	232b      	movmi	r3, #43	@ 0x2b
 8006a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8006aa6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006aa8:	d015      	beq.n	8006ad6 <_svfiprintf_r+0xfa>
 8006aaa:	9a07      	ldr	r2, [sp, #28]
 8006aac:	4654      	mov	r4, sl
 8006aae:	2000      	movs	r0, #0
 8006ab0:	f04f 0c0a 	mov.w	ip, #10
 8006ab4:	4621      	mov	r1, r4
 8006ab6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006aba:	3b30      	subs	r3, #48	@ 0x30
 8006abc:	2b09      	cmp	r3, #9
 8006abe:	d94b      	bls.n	8006b58 <_svfiprintf_r+0x17c>
 8006ac0:	b1b0      	cbz	r0, 8006af0 <_svfiprintf_r+0x114>
 8006ac2:	9207      	str	r2, [sp, #28]
 8006ac4:	e014      	b.n	8006af0 <_svfiprintf_r+0x114>
 8006ac6:	eba0 0308 	sub.w	r3, r0, r8
 8006aca:	fa09 f303 	lsl.w	r3, r9, r3
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	9304      	str	r3, [sp, #16]
 8006ad2:	46a2      	mov	sl, r4
 8006ad4:	e7d2      	b.n	8006a7c <_svfiprintf_r+0xa0>
 8006ad6:	9b03      	ldr	r3, [sp, #12]
 8006ad8:	1d19      	adds	r1, r3, #4
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	9103      	str	r1, [sp, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	bfbb      	ittet	lt
 8006ae2:	425b      	neglt	r3, r3
 8006ae4:	f042 0202 	orrlt.w	r2, r2, #2
 8006ae8:	9307      	strge	r3, [sp, #28]
 8006aea:	9307      	strlt	r3, [sp, #28]
 8006aec:	bfb8      	it	lt
 8006aee:	9204      	strlt	r2, [sp, #16]
 8006af0:	7823      	ldrb	r3, [r4, #0]
 8006af2:	2b2e      	cmp	r3, #46	@ 0x2e
 8006af4:	d10a      	bne.n	8006b0c <_svfiprintf_r+0x130>
 8006af6:	7863      	ldrb	r3, [r4, #1]
 8006af8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006afa:	d132      	bne.n	8006b62 <_svfiprintf_r+0x186>
 8006afc:	9b03      	ldr	r3, [sp, #12]
 8006afe:	1d1a      	adds	r2, r3, #4
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	9203      	str	r2, [sp, #12]
 8006b04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b08:	3402      	adds	r4, #2
 8006b0a:	9305      	str	r3, [sp, #20]
 8006b0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006bd0 <_svfiprintf_r+0x1f4>
 8006b10:	7821      	ldrb	r1, [r4, #0]
 8006b12:	2203      	movs	r2, #3
 8006b14:	4650      	mov	r0, sl
 8006b16:	f7f9 fb93 	bl	8000240 <memchr>
 8006b1a:	b138      	cbz	r0, 8006b2c <_svfiprintf_r+0x150>
 8006b1c:	9b04      	ldr	r3, [sp, #16]
 8006b1e:	eba0 000a 	sub.w	r0, r0, sl
 8006b22:	2240      	movs	r2, #64	@ 0x40
 8006b24:	4082      	lsls	r2, r0
 8006b26:	4313      	orrs	r3, r2
 8006b28:	3401      	adds	r4, #1
 8006b2a:	9304      	str	r3, [sp, #16]
 8006b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b30:	4824      	ldr	r0, [pc, #144]	@ (8006bc4 <_svfiprintf_r+0x1e8>)
 8006b32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b36:	2206      	movs	r2, #6
 8006b38:	f7f9 fb82 	bl	8000240 <memchr>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	d036      	beq.n	8006bae <_svfiprintf_r+0x1d2>
 8006b40:	4b21      	ldr	r3, [pc, #132]	@ (8006bc8 <_svfiprintf_r+0x1ec>)
 8006b42:	bb1b      	cbnz	r3, 8006b8c <_svfiprintf_r+0x1b0>
 8006b44:	9b03      	ldr	r3, [sp, #12]
 8006b46:	3307      	adds	r3, #7
 8006b48:	f023 0307 	bic.w	r3, r3, #7
 8006b4c:	3308      	adds	r3, #8
 8006b4e:	9303      	str	r3, [sp, #12]
 8006b50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b52:	4433      	add	r3, r6
 8006b54:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b56:	e76a      	b.n	8006a2e <_svfiprintf_r+0x52>
 8006b58:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b5c:	460c      	mov	r4, r1
 8006b5e:	2001      	movs	r0, #1
 8006b60:	e7a8      	b.n	8006ab4 <_svfiprintf_r+0xd8>
 8006b62:	2300      	movs	r3, #0
 8006b64:	3401      	adds	r4, #1
 8006b66:	9305      	str	r3, [sp, #20]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	f04f 0c0a 	mov.w	ip, #10
 8006b6e:	4620      	mov	r0, r4
 8006b70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b74:	3a30      	subs	r2, #48	@ 0x30
 8006b76:	2a09      	cmp	r2, #9
 8006b78:	d903      	bls.n	8006b82 <_svfiprintf_r+0x1a6>
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d0c6      	beq.n	8006b0c <_svfiprintf_r+0x130>
 8006b7e:	9105      	str	r1, [sp, #20]
 8006b80:	e7c4      	b.n	8006b0c <_svfiprintf_r+0x130>
 8006b82:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b86:	4604      	mov	r4, r0
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e7f0      	b.n	8006b6e <_svfiprintf_r+0x192>
 8006b8c:	ab03      	add	r3, sp, #12
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	462a      	mov	r2, r5
 8006b92:	4b0e      	ldr	r3, [pc, #56]	@ (8006bcc <_svfiprintf_r+0x1f0>)
 8006b94:	a904      	add	r1, sp, #16
 8006b96:	4638      	mov	r0, r7
 8006b98:	f3af 8000 	nop.w
 8006b9c:	1c42      	adds	r2, r0, #1
 8006b9e:	4606      	mov	r6, r0
 8006ba0:	d1d6      	bne.n	8006b50 <_svfiprintf_r+0x174>
 8006ba2:	89ab      	ldrh	r3, [r5, #12]
 8006ba4:	065b      	lsls	r3, r3, #25
 8006ba6:	f53f af2d 	bmi.w	8006a04 <_svfiprintf_r+0x28>
 8006baa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006bac:	e72c      	b.n	8006a08 <_svfiprintf_r+0x2c>
 8006bae:	ab03      	add	r3, sp, #12
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	462a      	mov	r2, r5
 8006bb4:	4b05      	ldr	r3, [pc, #20]	@ (8006bcc <_svfiprintf_r+0x1f0>)
 8006bb6:	a904      	add	r1, sp, #16
 8006bb8:	4638      	mov	r0, r7
 8006bba:	f000 fb99 	bl	80072f0 <_printf_i>
 8006bbe:	e7ed      	b.n	8006b9c <_svfiprintf_r+0x1c0>
 8006bc0:	080094c2 	.word	0x080094c2
 8006bc4:	080094cc 	.word	0x080094cc
 8006bc8:	00000000 	.word	0x00000000
 8006bcc:	08006927 	.word	0x08006927
 8006bd0:	080094c8 	.word	0x080094c8

08006bd4 <_sungetc_r>:
 8006bd4:	b538      	push	{r3, r4, r5, lr}
 8006bd6:	1c4b      	adds	r3, r1, #1
 8006bd8:	4614      	mov	r4, r2
 8006bda:	d103      	bne.n	8006be4 <_sungetc_r+0x10>
 8006bdc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006be0:	4628      	mov	r0, r5
 8006be2:	bd38      	pop	{r3, r4, r5, pc}
 8006be4:	8993      	ldrh	r3, [r2, #12]
 8006be6:	f023 0320 	bic.w	r3, r3, #32
 8006bea:	8193      	strh	r3, [r2, #12]
 8006bec:	6853      	ldr	r3, [r2, #4]
 8006bee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006bf0:	b2cd      	uxtb	r5, r1
 8006bf2:	b18a      	cbz	r2, 8006c18 <_sungetc_r+0x44>
 8006bf4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	dd08      	ble.n	8006c0c <_sungetc_r+0x38>
 8006bfa:	6823      	ldr	r3, [r4, #0]
 8006bfc:	1e5a      	subs	r2, r3, #1
 8006bfe:	6022      	str	r2, [r4, #0]
 8006c00:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006c04:	6863      	ldr	r3, [r4, #4]
 8006c06:	3301      	adds	r3, #1
 8006c08:	6063      	str	r3, [r4, #4]
 8006c0a:	e7e9      	b.n	8006be0 <_sungetc_r+0xc>
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	f001 fb7d 	bl	800830c <__submore>
 8006c12:	2800      	cmp	r0, #0
 8006c14:	d0f1      	beq.n	8006bfa <_sungetc_r+0x26>
 8006c16:	e7e1      	b.n	8006bdc <_sungetc_r+0x8>
 8006c18:	6921      	ldr	r1, [r4, #16]
 8006c1a:	6822      	ldr	r2, [r4, #0]
 8006c1c:	b141      	cbz	r1, 8006c30 <_sungetc_r+0x5c>
 8006c1e:	4291      	cmp	r1, r2
 8006c20:	d206      	bcs.n	8006c30 <_sungetc_r+0x5c>
 8006c22:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8006c26:	42a9      	cmp	r1, r5
 8006c28:	d102      	bne.n	8006c30 <_sungetc_r+0x5c>
 8006c2a:	3a01      	subs	r2, #1
 8006c2c:	6022      	str	r2, [r4, #0]
 8006c2e:	e7ea      	b.n	8006c06 <_sungetc_r+0x32>
 8006c30:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8006c34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c38:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006c3e:	4623      	mov	r3, r4
 8006c40:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006c44:	6023      	str	r3, [r4, #0]
 8006c46:	2301      	movs	r3, #1
 8006c48:	e7de      	b.n	8006c08 <_sungetc_r+0x34>

08006c4a <__ssrefill_r>:
 8006c4a:	b510      	push	{r4, lr}
 8006c4c:	460c      	mov	r4, r1
 8006c4e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006c50:	b169      	cbz	r1, 8006c6e <__ssrefill_r+0x24>
 8006c52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c56:	4299      	cmp	r1, r3
 8006c58:	d001      	beq.n	8006c5e <__ssrefill_r+0x14>
 8006c5a:	f7ff fae1 	bl	8006220 <_free_r>
 8006c5e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006c60:	6063      	str	r3, [r4, #4]
 8006c62:	2000      	movs	r0, #0
 8006c64:	6360      	str	r0, [r4, #52]	@ 0x34
 8006c66:	b113      	cbz	r3, 8006c6e <__ssrefill_r+0x24>
 8006c68:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006c6a:	6023      	str	r3, [r4, #0]
 8006c6c:	bd10      	pop	{r4, pc}
 8006c6e:	6923      	ldr	r3, [r4, #16]
 8006c70:	6023      	str	r3, [r4, #0]
 8006c72:	2300      	movs	r3, #0
 8006c74:	6063      	str	r3, [r4, #4]
 8006c76:	89a3      	ldrh	r3, [r4, #12]
 8006c78:	f043 0320 	orr.w	r3, r3, #32
 8006c7c:	81a3      	strh	r3, [r4, #12]
 8006c7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c82:	e7f3      	b.n	8006c6c <__ssrefill_r+0x22>

08006c84 <__ssvfiscanf_r>:
 8006c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c88:	460c      	mov	r4, r1
 8006c8a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8006c8e:	2100      	movs	r1, #0
 8006c90:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8006c94:	49a5      	ldr	r1, [pc, #660]	@ (8006f2c <__ssvfiscanf_r+0x2a8>)
 8006c96:	91a0      	str	r1, [sp, #640]	@ 0x280
 8006c98:	f10d 0804 	add.w	r8, sp, #4
 8006c9c:	49a4      	ldr	r1, [pc, #656]	@ (8006f30 <__ssvfiscanf_r+0x2ac>)
 8006c9e:	4fa5      	ldr	r7, [pc, #660]	@ (8006f34 <__ssvfiscanf_r+0x2b0>)
 8006ca0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8006ca4:	4606      	mov	r6, r0
 8006ca6:	91a1      	str	r1, [sp, #644]	@ 0x284
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	7813      	ldrb	r3, [r2, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 8158 	beq.w	8006f62 <__ssvfiscanf_r+0x2de>
 8006cb2:	5cf9      	ldrb	r1, [r7, r3]
 8006cb4:	f011 0108 	ands.w	r1, r1, #8
 8006cb8:	f102 0501 	add.w	r5, r2, #1
 8006cbc:	d019      	beq.n	8006cf2 <__ssvfiscanf_r+0x6e>
 8006cbe:	6863      	ldr	r3, [r4, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	dd0f      	ble.n	8006ce4 <__ssvfiscanf_r+0x60>
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	781a      	ldrb	r2, [r3, #0]
 8006cc8:	5cba      	ldrb	r2, [r7, r2]
 8006cca:	0712      	lsls	r2, r2, #28
 8006ccc:	d401      	bmi.n	8006cd2 <__ssvfiscanf_r+0x4e>
 8006cce:	462a      	mov	r2, r5
 8006cd0:	e7eb      	b.n	8006caa <__ssvfiscanf_r+0x26>
 8006cd2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006cd4:	3201      	adds	r2, #1
 8006cd6:	9245      	str	r2, [sp, #276]	@ 0x114
 8006cd8:	6862      	ldr	r2, [r4, #4]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	3a01      	subs	r2, #1
 8006cde:	6062      	str	r2, [r4, #4]
 8006ce0:	6023      	str	r3, [r4, #0]
 8006ce2:	e7ec      	b.n	8006cbe <__ssvfiscanf_r+0x3a>
 8006ce4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006ce6:	4621      	mov	r1, r4
 8006ce8:	4630      	mov	r0, r6
 8006cea:	4798      	blx	r3
 8006cec:	2800      	cmp	r0, #0
 8006cee:	d0e9      	beq.n	8006cc4 <__ssvfiscanf_r+0x40>
 8006cf0:	e7ed      	b.n	8006cce <__ssvfiscanf_r+0x4a>
 8006cf2:	2b25      	cmp	r3, #37	@ 0x25
 8006cf4:	d012      	beq.n	8006d1c <__ssvfiscanf_r+0x98>
 8006cf6:	4699      	mov	r9, r3
 8006cf8:	6863      	ldr	r3, [r4, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f340 8093 	ble.w	8006e26 <__ssvfiscanf_r+0x1a2>
 8006d00:	6822      	ldr	r2, [r4, #0]
 8006d02:	7813      	ldrb	r3, [r2, #0]
 8006d04:	454b      	cmp	r3, r9
 8006d06:	f040 812c 	bne.w	8006f62 <__ssvfiscanf_r+0x2de>
 8006d0a:	6863      	ldr	r3, [r4, #4]
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	6063      	str	r3, [r4, #4]
 8006d10:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8006d12:	3201      	adds	r2, #1
 8006d14:	3301      	adds	r3, #1
 8006d16:	6022      	str	r2, [r4, #0]
 8006d18:	9345      	str	r3, [sp, #276]	@ 0x114
 8006d1a:	e7d8      	b.n	8006cce <__ssvfiscanf_r+0x4a>
 8006d1c:	9141      	str	r1, [sp, #260]	@ 0x104
 8006d1e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006d20:	7853      	ldrb	r3, [r2, #1]
 8006d22:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d24:	bf02      	ittt	eq
 8006d26:	2310      	moveq	r3, #16
 8006d28:	1c95      	addeq	r5, r2, #2
 8006d2a:	9341      	streq	r3, [sp, #260]	@ 0x104
 8006d2c:	220a      	movs	r2, #10
 8006d2e:	46a9      	mov	r9, r5
 8006d30:	f819 1b01 	ldrb.w	r1, [r9], #1
 8006d34:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8006d38:	2b09      	cmp	r3, #9
 8006d3a:	d91e      	bls.n	8006d7a <__ssvfiscanf_r+0xf6>
 8006d3c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8006f38 <__ssvfiscanf_r+0x2b4>
 8006d40:	2203      	movs	r2, #3
 8006d42:	4650      	mov	r0, sl
 8006d44:	f7f9 fa7c 	bl	8000240 <memchr>
 8006d48:	b138      	cbz	r0, 8006d5a <__ssvfiscanf_r+0xd6>
 8006d4a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006d4c:	eba0 000a 	sub.w	r0, r0, sl
 8006d50:	2301      	movs	r3, #1
 8006d52:	4083      	lsls	r3, r0
 8006d54:	4313      	orrs	r3, r2
 8006d56:	9341      	str	r3, [sp, #260]	@ 0x104
 8006d58:	464d      	mov	r5, r9
 8006d5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006d5e:	2b78      	cmp	r3, #120	@ 0x78
 8006d60:	d806      	bhi.n	8006d70 <__ssvfiscanf_r+0xec>
 8006d62:	2b57      	cmp	r3, #87	@ 0x57
 8006d64:	d810      	bhi.n	8006d88 <__ssvfiscanf_r+0x104>
 8006d66:	2b25      	cmp	r3, #37	@ 0x25
 8006d68:	d0c5      	beq.n	8006cf6 <__ssvfiscanf_r+0x72>
 8006d6a:	d857      	bhi.n	8006e1c <__ssvfiscanf_r+0x198>
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d065      	beq.n	8006e3c <__ssvfiscanf_r+0x1b8>
 8006d70:	2303      	movs	r3, #3
 8006d72:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006d74:	230a      	movs	r3, #10
 8006d76:	9342      	str	r3, [sp, #264]	@ 0x108
 8006d78:	e078      	b.n	8006e6c <__ssvfiscanf_r+0x1e8>
 8006d7a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8006d7c:	fb02 1103 	mla	r1, r2, r3, r1
 8006d80:	3930      	subs	r1, #48	@ 0x30
 8006d82:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006d84:	464d      	mov	r5, r9
 8006d86:	e7d2      	b.n	8006d2e <__ssvfiscanf_r+0xaa>
 8006d88:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8006d8c:	2a20      	cmp	r2, #32
 8006d8e:	d8ef      	bhi.n	8006d70 <__ssvfiscanf_r+0xec>
 8006d90:	a101      	add	r1, pc, #4	@ (adr r1, 8006d98 <__ssvfiscanf_r+0x114>)
 8006d92:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006d96:	bf00      	nop
 8006d98:	08006e4b 	.word	0x08006e4b
 8006d9c:	08006d71 	.word	0x08006d71
 8006da0:	08006d71 	.word	0x08006d71
 8006da4:	08006ea5 	.word	0x08006ea5
 8006da8:	08006d71 	.word	0x08006d71
 8006dac:	08006d71 	.word	0x08006d71
 8006db0:	08006d71 	.word	0x08006d71
 8006db4:	08006d71 	.word	0x08006d71
 8006db8:	08006d71 	.word	0x08006d71
 8006dbc:	08006d71 	.word	0x08006d71
 8006dc0:	08006d71 	.word	0x08006d71
 8006dc4:	08006ebb 	.word	0x08006ebb
 8006dc8:	08006ea1 	.word	0x08006ea1
 8006dcc:	08006e23 	.word	0x08006e23
 8006dd0:	08006e23 	.word	0x08006e23
 8006dd4:	08006e23 	.word	0x08006e23
 8006dd8:	08006d71 	.word	0x08006d71
 8006ddc:	08006e5d 	.word	0x08006e5d
 8006de0:	08006d71 	.word	0x08006d71
 8006de4:	08006d71 	.word	0x08006d71
 8006de8:	08006d71 	.word	0x08006d71
 8006dec:	08006d71 	.word	0x08006d71
 8006df0:	08006ecb 	.word	0x08006ecb
 8006df4:	08006e65 	.word	0x08006e65
 8006df8:	08006e43 	.word	0x08006e43
 8006dfc:	08006d71 	.word	0x08006d71
 8006e00:	08006d71 	.word	0x08006d71
 8006e04:	08006ec7 	.word	0x08006ec7
 8006e08:	08006d71 	.word	0x08006d71
 8006e0c:	08006ea1 	.word	0x08006ea1
 8006e10:	08006d71 	.word	0x08006d71
 8006e14:	08006d71 	.word	0x08006d71
 8006e18:	08006e4b 	.word	0x08006e4b
 8006e1c:	3b45      	subs	r3, #69	@ 0x45
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d8a6      	bhi.n	8006d70 <__ssvfiscanf_r+0xec>
 8006e22:	2305      	movs	r3, #5
 8006e24:	e021      	b.n	8006e6a <__ssvfiscanf_r+0x1e6>
 8006e26:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006e28:	4621      	mov	r1, r4
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	4798      	blx	r3
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	f43f af66 	beq.w	8006d00 <__ssvfiscanf_r+0x7c>
 8006e34:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006e36:	2800      	cmp	r0, #0
 8006e38:	f040 808b 	bne.w	8006f52 <__ssvfiscanf_r+0x2ce>
 8006e3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e40:	e08b      	b.n	8006f5a <__ssvfiscanf_r+0x2d6>
 8006e42:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006e44:	f042 0220 	orr.w	r2, r2, #32
 8006e48:	9241      	str	r2, [sp, #260]	@ 0x104
 8006e4a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006e4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e50:	9241      	str	r2, [sp, #260]	@ 0x104
 8006e52:	2210      	movs	r2, #16
 8006e54:	2b6e      	cmp	r3, #110	@ 0x6e
 8006e56:	9242      	str	r2, [sp, #264]	@ 0x108
 8006e58:	d902      	bls.n	8006e60 <__ssvfiscanf_r+0x1dc>
 8006e5a:	e005      	b.n	8006e68 <__ssvfiscanf_r+0x1e4>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	9342      	str	r3, [sp, #264]	@ 0x108
 8006e60:	2303      	movs	r3, #3
 8006e62:	e002      	b.n	8006e6a <__ssvfiscanf_r+0x1e6>
 8006e64:	2308      	movs	r3, #8
 8006e66:	9342      	str	r3, [sp, #264]	@ 0x108
 8006e68:	2304      	movs	r3, #4
 8006e6a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006e6c:	6863      	ldr	r3, [r4, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	dd39      	ble.n	8006ee6 <__ssvfiscanf_r+0x262>
 8006e72:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006e74:	0659      	lsls	r1, r3, #25
 8006e76:	d404      	bmi.n	8006e82 <__ssvfiscanf_r+0x1fe>
 8006e78:	6823      	ldr	r3, [r4, #0]
 8006e7a:	781a      	ldrb	r2, [r3, #0]
 8006e7c:	5cba      	ldrb	r2, [r7, r2]
 8006e7e:	0712      	lsls	r2, r2, #28
 8006e80:	d438      	bmi.n	8006ef4 <__ssvfiscanf_r+0x270>
 8006e82:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	dc47      	bgt.n	8006f18 <__ssvfiscanf_r+0x294>
 8006e88:	466b      	mov	r3, sp
 8006e8a:	4622      	mov	r2, r4
 8006e8c:	a941      	add	r1, sp, #260	@ 0x104
 8006e8e:	4630      	mov	r0, r6
 8006e90:	f000 fb4e 	bl	8007530 <_scanf_chars>
 8006e94:	2801      	cmp	r0, #1
 8006e96:	d064      	beq.n	8006f62 <__ssvfiscanf_r+0x2de>
 8006e98:	2802      	cmp	r0, #2
 8006e9a:	f47f af18 	bne.w	8006cce <__ssvfiscanf_r+0x4a>
 8006e9e:	e7c9      	b.n	8006e34 <__ssvfiscanf_r+0x1b0>
 8006ea0:	220a      	movs	r2, #10
 8006ea2:	e7d7      	b.n	8006e54 <__ssvfiscanf_r+0x1d0>
 8006ea4:	4629      	mov	r1, r5
 8006ea6:	4640      	mov	r0, r8
 8006ea8:	f000 fc90 	bl	80077cc <__sccl>
 8006eac:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006eae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006eb2:	9341      	str	r3, [sp, #260]	@ 0x104
 8006eb4:	4605      	mov	r5, r0
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e7d7      	b.n	8006e6a <__ssvfiscanf_r+0x1e6>
 8006eba:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006ebc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ec0:	9341      	str	r3, [sp, #260]	@ 0x104
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	e7d1      	b.n	8006e6a <__ssvfiscanf_r+0x1e6>
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	e7cf      	b.n	8006e6a <__ssvfiscanf_r+0x1e6>
 8006eca:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8006ecc:	06c3      	lsls	r3, r0, #27
 8006ece:	f53f aefe 	bmi.w	8006cce <__ssvfiscanf_r+0x4a>
 8006ed2:	9b00      	ldr	r3, [sp, #0]
 8006ed4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006ed6:	1d19      	adds	r1, r3, #4
 8006ed8:	9100      	str	r1, [sp, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	07c0      	lsls	r0, r0, #31
 8006ede:	bf4c      	ite	mi
 8006ee0:	801a      	strhmi	r2, [r3, #0]
 8006ee2:	601a      	strpl	r2, [r3, #0]
 8006ee4:	e6f3      	b.n	8006cce <__ssvfiscanf_r+0x4a>
 8006ee6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006ee8:	4621      	mov	r1, r4
 8006eea:	4630      	mov	r0, r6
 8006eec:	4798      	blx	r3
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	d0bf      	beq.n	8006e72 <__ssvfiscanf_r+0x1ee>
 8006ef2:	e79f      	b.n	8006e34 <__ssvfiscanf_r+0x1b0>
 8006ef4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006ef6:	3201      	adds	r2, #1
 8006ef8:	9245      	str	r2, [sp, #276]	@ 0x114
 8006efa:	6862      	ldr	r2, [r4, #4]
 8006efc:	3a01      	subs	r2, #1
 8006efe:	2a00      	cmp	r2, #0
 8006f00:	6062      	str	r2, [r4, #4]
 8006f02:	dd02      	ble.n	8006f0a <__ssvfiscanf_r+0x286>
 8006f04:	3301      	adds	r3, #1
 8006f06:	6023      	str	r3, [r4, #0]
 8006f08:	e7b6      	b.n	8006e78 <__ssvfiscanf_r+0x1f4>
 8006f0a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006f0c:	4621      	mov	r1, r4
 8006f0e:	4630      	mov	r0, r6
 8006f10:	4798      	blx	r3
 8006f12:	2800      	cmp	r0, #0
 8006f14:	d0b0      	beq.n	8006e78 <__ssvfiscanf_r+0x1f4>
 8006f16:	e78d      	b.n	8006e34 <__ssvfiscanf_r+0x1b0>
 8006f18:	2b04      	cmp	r3, #4
 8006f1a:	dc0f      	bgt.n	8006f3c <__ssvfiscanf_r+0x2b8>
 8006f1c:	466b      	mov	r3, sp
 8006f1e:	4622      	mov	r2, r4
 8006f20:	a941      	add	r1, sp, #260	@ 0x104
 8006f22:	4630      	mov	r0, r6
 8006f24:	f000 fb5e 	bl	80075e4 <_scanf_i>
 8006f28:	e7b4      	b.n	8006e94 <__ssvfiscanf_r+0x210>
 8006f2a:	bf00      	nop
 8006f2c:	08006bd5 	.word	0x08006bd5
 8006f30:	08006c4b 	.word	0x08006c4b
 8006f34:	08009351 	.word	0x08009351
 8006f38:	080094c8 	.word	0x080094c8
 8006f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8006f68 <__ssvfiscanf_r+0x2e4>)
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f43f aec5 	beq.w	8006cce <__ssvfiscanf_r+0x4a>
 8006f44:	466b      	mov	r3, sp
 8006f46:	4622      	mov	r2, r4
 8006f48:	a941      	add	r1, sp, #260	@ 0x104
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	f3af 8000 	nop.w
 8006f50:	e7a0      	b.n	8006e94 <__ssvfiscanf_r+0x210>
 8006f52:	89a3      	ldrh	r3, [r4, #12]
 8006f54:	065b      	lsls	r3, r3, #25
 8006f56:	f53f af71 	bmi.w	8006e3c <__ssvfiscanf_r+0x1b8>
 8006f5a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8006f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f62:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006f64:	e7f9      	b.n	8006f5a <__ssvfiscanf_r+0x2d6>
 8006f66:	bf00      	nop
 8006f68:	00000000 	.word	0x00000000

08006f6c <__sfputc_r>:
 8006f6c:	6893      	ldr	r3, [r2, #8]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	b410      	push	{r4}
 8006f74:	6093      	str	r3, [r2, #8]
 8006f76:	da08      	bge.n	8006f8a <__sfputc_r+0x1e>
 8006f78:	6994      	ldr	r4, [r2, #24]
 8006f7a:	42a3      	cmp	r3, r4
 8006f7c:	db01      	blt.n	8006f82 <__sfputc_r+0x16>
 8006f7e:	290a      	cmp	r1, #10
 8006f80:	d103      	bne.n	8006f8a <__sfputc_r+0x1e>
 8006f82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f86:	f001 ba6b 	b.w	8008460 <__swbuf_r>
 8006f8a:	6813      	ldr	r3, [r2, #0]
 8006f8c:	1c58      	adds	r0, r3, #1
 8006f8e:	6010      	str	r0, [r2, #0]
 8006f90:	7019      	strb	r1, [r3, #0]
 8006f92:	4608      	mov	r0, r1
 8006f94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <__sfputs_r>:
 8006f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9c:	4606      	mov	r6, r0
 8006f9e:	460f      	mov	r7, r1
 8006fa0:	4614      	mov	r4, r2
 8006fa2:	18d5      	adds	r5, r2, r3
 8006fa4:	42ac      	cmp	r4, r5
 8006fa6:	d101      	bne.n	8006fac <__sfputs_r+0x12>
 8006fa8:	2000      	movs	r0, #0
 8006faa:	e007      	b.n	8006fbc <__sfputs_r+0x22>
 8006fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fb0:	463a      	mov	r2, r7
 8006fb2:	4630      	mov	r0, r6
 8006fb4:	f7ff ffda 	bl	8006f6c <__sfputc_r>
 8006fb8:	1c43      	adds	r3, r0, #1
 8006fba:	d1f3      	bne.n	8006fa4 <__sfputs_r+0xa>
 8006fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006fc0 <_vfiprintf_r>:
 8006fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc4:	460d      	mov	r5, r1
 8006fc6:	b09d      	sub	sp, #116	@ 0x74
 8006fc8:	4614      	mov	r4, r2
 8006fca:	4698      	mov	r8, r3
 8006fcc:	4606      	mov	r6, r0
 8006fce:	b118      	cbz	r0, 8006fd8 <_vfiprintf_r+0x18>
 8006fd0:	6a03      	ldr	r3, [r0, #32]
 8006fd2:	b90b      	cbnz	r3, 8006fd8 <_vfiprintf_r+0x18>
 8006fd4:	f7fe f950 	bl	8005278 <__sinit>
 8006fd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006fda:	07d9      	lsls	r1, r3, #31
 8006fdc:	d405      	bmi.n	8006fea <_vfiprintf_r+0x2a>
 8006fde:	89ab      	ldrh	r3, [r5, #12]
 8006fe0:	059a      	lsls	r2, r3, #22
 8006fe2:	d402      	bmi.n	8006fea <_vfiprintf_r+0x2a>
 8006fe4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006fe6:	f7ff f902 	bl	80061ee <__retarget_lock_acquire_recursive>
 8006fea:	89ab      	ldrh	r3, [r5, #12]
 8006fec:	071b      	lsls	r3, r3, #28
 8006fee:	d501      	bpl.n	8006ff4 <_vfiprintf_r+0x34>
 8006ff0:	692b      	ldr	r3, [r5, #16]
 8006ff2:	b99b      	cbnz	r3, 800701c <_vfiprintf_r+0x5c>
 8006ff4:	4629      	mov	r1, r5
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	f001 fa70 	bl	80084dc <__swsetup_r>
 8006ffc:	b170      	cbz	r0, 800701c <_vfiprintf_r+0x5c>
 8006ffe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007000:	07dc      	lsls	r4, r3, #31
 8007002:	d504      	bpl.n	800700e <_vfiprintf_r+0x4e>
 8007004:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007008:	b01d      	add	sp, #116	@ 0x74
 800700a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800700e:	89ab      	ldrh	r3, [r5, #12]
 8007010:	0598      	lsls	r0, r3, #22
 8007012:	d4f7      	bmi.n	8007004 <_vfiprintf_r+0x44>
 8007014:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007016:	f7ff f8eb 	bl	80061f0 <__retarget_lock_release_recursive>
 800701a:	e7f3      	b.n	8007004 <_vfiprintf_r+0x44>
 800701c:	2300      	movs	r3, #0
 800701e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007020:	2320      	movs	r3, #32
 8007022:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007026:	f8cd 800c 	str.w	r8, [sp, #12]
 800702a:	2330      	movs	r3, #48	@ 0x30
 800702c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80071dc <_vfiprintf_r+0x21c>
 8007030:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007034:	f04f 0901 	mov.w	r9, #1
 8007038:	4623      	mov	r3, r4
 800703a:	469a      	mov	sl, r3
 800703c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007040:	b10a      	cbz	r2, 8007046 <_vfiprintf_r+0x86>
 8007042:	2a25      	cmp	r2, #37	@ 0x25
 8007044:	d1f9      	bne.n	800703a <_vfiprintf_r+0x7a>
 8007046:	ebba 0b04 	subs.w	fp, sl, r4
 800704a:	d00b      	beq.n	8007064 <_vfiprintf_r+0xa4>
 800704c:	465b      	mov	r3, fp
 800704e:	4622      	mov	r2, r4
 8007050:	4629      	mov	r1, r5
 8007052:	4630      	mov	r0, r6
 8007054:	f7ff ffa1 	bl	8006f9a <__sfputs_r>
 8007058:	3001      	adds	r0, #1
 800705a:	f000 80a7 	beq.w	80071ac <_vfiprintf_r+0x1ec>
 800705e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007060:	445a      	add	r2, fp
 8007062:	9209      	str	r2, [sp, #36]	@ 0x24
 8007064:	f89a 3000 	ldrb.w	r3, [sl]
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 809f 	beq.w	80071ac <_vfiprintf_r+0x1ec>
 800706e:	2300      	movs	r3, #0
 8007070:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007074:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007078:	f10a 0a01 	add.w	sl, sl, #1
 800707c:	9304      	str	r3, [sp, #16]
 800707e:	9307      	str	r3, [sp, #28]
 8007080:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007084:	931a      	str	r3, [sp, #104]	@ 0x68
 8007086:	4654      	mov	r4, sl
 8007088:	2205      	movs	r2, #5
 800708a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800708e:	4853      	ldr	r0, [pc, #332]	@ (80071dc <_vfiprintf_r+0x21c>)
 8007090:	f7f9 f8d6 	bl	8000240 <memchr>
 8007094:	9a04      	ldr	r2, [sp, #16]
 8007096:	b9d8      	cbnz	r0, 80070d0 <_vfiprintf_r+0x110>
 8007098:	06d1      	lsls	r1, r2, #27
 800709a:	bf44      	itt	mi
 800709c:	2320      	movmi	r3, #32
 800709e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070a2:	0713      	lsls	r3, r2, #28
 80070a4:	bf44      	itt	mi
 80070a6:	232b      	movmi	r3, #43	@ 0x2b
 80070a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070ac:	f89a 3000 	ldrb.w	r3, [sl]
 80070b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80070b2:	d015      	beq.n	80070e0 <_vfiprintf_r+0x120>
 80070b4:	9a07      	ldr	r2, [sp, #28]
 80070b6:	4654      	mov	r4, sl
 80070b8:	2000      	movs	r0, #0
 80070ba:	f04f 0c0a 	mov.w	ip, #10
 80070be:	4621      	mov	r1, r4
 80070c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070c4:	3b30      	subs	r3, #48	@ 0x30
 80070c6:	2b09      	cmp	r3, #9
 80070c8:	d94b      	bls.n	8007162 <_vfiprintf_r+0x1a2>
 80070ca:	b1b0      	cbz	r0, 80070fa <_vfiprintf_r+0x13a>
 80070cc:	9207      	str	r2, [sp, #28]
 80070ce:	e014      	b.n	80070fa <_vfiprintf_r+0x13a>
 80070d0:	eba0 0308 	sub.w	r3, r0, r8
 80070d4:	fa09 f303 	lsl.w	r3, r9, r3
 80070d8:	4313      	orrs	r3, r2
 80070da:	9304      	str	r3, [sp, #16]
 80070dc:	46a2      	mov	sl, r4
 80070de:	e7d2      	b.n	8007086 <_vfiprintf_r+0xc6>
 80070e0:	9b03      	ldr	r3, [sp, #12]
 80070e2:	1d19      	adds	r1, r3, #4
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	9103      	str	r1, [sp, #12]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	bfbb      	ittet	lt
 80070ec:	425b      	neglt	r3, r3
 80070ee:	f042 0202 	orrlt.w	r2, r2, #2
 80070f2:	9307      	strge	r3, [sp, #28]
 80070f4:	9307      	strlt	r3, [sp, #28]
 80070f6:	bfb8      	it	lt
 80070f8:	9204      	strlt	r2, [sp, #16]
 80070fa:	7823      	ldrb	r3, [r4, #0]
 80070fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80070fe:	d10a      	bne.n	8007116 <_vfiprintf_r+0x156>
 8007100:	7863      	ldrb	r3, [r4, #1]
 8007102:	2b2a      	cmp	r3, #42	@ 0x2a
 8007104:	d132      	bne.n	800716c <_vfiprintf_r+0x1ac>
 8007106:	9b03      	ldr	r3, [sp, #12]
 8007108:	1d1a      	adds	r2, r3, #4
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	9203      	str	r2, [sp, #12]
 800710e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007112:	3402      	adds	r4, #2
 8007114:	9305      	str	r3, [sp, #20]
 8007116:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80071ec <_vfiprintf_r+0x22c>
 800711a:	7821      	ldrb	r1, [r4, #0]
 800711c:	2203      	movs	r2, #3
 800711e:	4650      	mov	r0, sl
 8007120:	f7f9 f88e 	bl	8000240 <memchr>
 8007124:	b138      	cbz	r0, 8007136 <_vfiprintf_r+0x176>
 8007126:	9b04      	ldr	r3, [sp, #16]
 8007128:	eba0 000a 	sub.w	r0, r0, sl
 800712c:	2240      	movs	r2, #64	@ 0x40
 800712e:	4082      	lsls	r2, r0
 8007130:	4313      	orrs	r3, r2
 8007132:	3401      	adds	r4, #1
 8007134:	9304      	str	r3, [sp, #16]
 8007136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800713a:	4829      	ldr	r0, [pc, #164]	@ (80071e0 <_vfiprintf_r+0x220>)
 800713c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007140:	2206      	movs	r2, #6
 8007142:	f7f9 f87d 	bl	8000240 <memchr>
 8007146:	2800      	cmp	r0, #0
 8007148:	d03f      	beq.n	80071ca <_vfiprintf_r+0x20a>
 800714a:	4b26      	ldr	r3, [pc, #152]	@ (80071e4 <_vfiprintf_r+0x224>)
 800714c:	bb1b      	cbnz	r3, 8007196 <_vfiprintf_r+0x1d6>
 800714e:	9b03      	ldr	r3, [sp, #12]
 8007150:	3307      	adds	r3, #7
 8007152:	f023 0307 	bic.w	r3, r3, #7
 8007156:	3308      	adds	r3, #8
 8007158:	9303      	str	r3, [sp, #12]
 800715a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800715c:	443b      	add	r3, r7
 800715e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007160:	e76a      	b.n	8007038 <_vfiprintf_r+0x78>
 8007162:	fb0c 3202 	mla	r2, ip, r2, r3
 8007166:	460c      	mov	r4, r1
 8007168:	2001      	movs	r0, #1
 800716a:	e7a8      	b.n	80070be <_vfiprintf_r+0xfe>
 800716c:	2300      	movs	r3, #0
 800716e:	3401      	adds	r4, #1
 8007170:	9305      	str	r3, [sp, #20]
 8007172:	4619      	mov	r1, r3
 8007174:	f04f 0c0a 	mov.w	ip, #10
 8007178:	4620      	mov	r0, r4
 800717a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800717e:	3a30      	subs	r2, #48	@ 0x30
 8007180:	2a09      	cmp	r2, #9
 8007182:	d903      	bls.n	800718c <_vfiprintf_r+0x1cc>
 8007184:	2b00      	cmp	r3, #0
 8007186:	d0c6      	beq.n	8007116 <_vfiprintf_r+0x156>
 8007188:	9105      	str	r1, [sp, #20]
 800718a:	e7c4      	b.n	8007116 <_vfiprintf_r+0x156>
 800718c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007190:	4604      	mov	r4, r0
 8007192:	2301      	movs	r3, #1
 8007194:	e7f0      	b.n	8007178 <_vfiprintf_r+0x1b8>
 8007196:	ab03      	add	r3, sp, #12
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	462a      	mov	r2, r5
 800719c:	4b12      	ldr	r3, [pc, #72]	@ (80071e8 <_vfiprintf_r+0x228>)
 800719e:	a904      	add	r1, sp, #16
 80071a0:	4630      	mov	r0, r6
 80071a2:	f3af 8000 	nop.w
 80071a6:	4607      	mov	r7, r0
 80071a8:	1c78      	adds	r0, r7, #1
 80071aa:	d1d6      	bne.n	800715a <_vfiprintf_r+0x19a>
 80071ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071ae:	07d9      	lsls	r1, r3, #31
 80071b0:	d405      	bmi.n	80071be <_vfiprintf_r+0x1fe>
 80071b2:	89ab      	ldrh	r3, [r5, #12]
 80071b4:	059a      	lsls	r2, r3, #22
 80071b6:	d402      	bmi.n	80071be <_vfiprintf_r+0x1fe>
 80071b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071ba:	f7ff f819 	bl	80061f0 <__retarget_lock_release_recursive>
 80071be:	89ab      	ldrh	r3, [r5, #12]
 80071c0:	065b      	lsls	r3, r3, #25
 80071c2:	f53f af1f 	bmi.w	8007004 <_vfiprintf_r+0x44>
 80071c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071c8:	e71e      	b.n	8007008 <_vfiprintf_r+0x48>
 80071ca:	ab03      	add	r3, sp, #12
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	462a      	mov	r2, r5
 80071d0:	4b05      	ldr	r3, [pc, #20]	@ (80071e8 <_vfiprintf_r+0x228>)
 80071d2:	a904      	add	r1, sp, #16
 80071d4:	4630      	mov	r0, r6
 80071d6:	f000 f88b 	bl	80072f0 <_printf_i>
 80071da:	e7e4      	b.n	80071a6 <_vfiprintf_r+0x1e6>
 80071dc:	080094c2 	.word	0x080094c2
 80071e0:	080094cc 	.word	0x080094cc
 80071e4:	00000000 	.word	0x00000000
 80071e8:	08006f9b 	.word	0x08006f9b
 80071ec:	080094c8 	.word	0x080094c8

080071f0 <__ascii_mbtowc>:
 80071f0:	b082      	sub	sp, #8
 80071f2:	b901      	cbnz	r1, 80071f6 <__ascii_mbtowc+0x6>
 80071f4:	a901      	add	r1, sp, #4
 80071f6:	b142      	cbz	r2, 800720a <__ascii_mbtowc+0x1a>
 80071f8:	b14b      	cbz	r3, 800720e <__ascii_mbtowc+0x1e>
 80071fa:	7813      	ldrb	r3, [r2, #0]
 80071fc:	600b      	str	r3, [r1, #0]
 80071fe:	7812      	ldrb	r2, [r2, #0]
 8007200:	1e10      	subs	r0, r2, #0
 8007202:	bf18      	it	ne
 8007204:	2001      	movne	r0, #1
 8007206:	b002      	add	sp, #8
 8007208:	4770      	bx	lr
 800720a:	4610      	mov	r0, r2
 800720c:	e7fb      	b.n	8007206 <__ascii_mbtowc+0x16>
 800720e:	f06f 0001 	mvn.w	r0, #1
 8007212:	e7f8      	b.n	8007206 <__ascii_mbtowc+0x16>

08007214 <_printf_common>:
 8007214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007218:	4616      	mov	r6, r2
 800721a:	4698      	mov	r8, r3
 800721c:	688a      	ldr	r2, [r1, #8]
 800721e:	690b      	ldr	r3, [r1, #16]
 8007220:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007224:	4293      	cmp	r3, r2
 8007226:	bfb8      	it	lt
 8007228:	4613      	movlt	r3, r2
 800722a:	6033      	str	r3, [r6, #0]
 800722c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007230:	4607      	mov	r7, r0
 8007232:	460c      	mov	r4, r1
 8007234:	b10a      	cbz	r2, 800723a <_printf_common+0x26>
 8007236:	3301      	adds	r3, #1
 8007238:	6033      	str	r3, [r6, #0]
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	0699      	lsls	r1, r3, #26
 800723e:	bf42      	ittt	mi
 8007240:	6833      	ldrmi	r3, [r6, #0]
 8007242:	3302      	addmi	r3, #2
 8007244:	6033      	strmi	r3, [r6, #0]
 8007246:	6825      	ldr	r5, [r4, #0]
 8007248:	f015 0506 	ands.w	r5, r5, #6
 800724c:	d106      	bne.n	800725c <_printf_common+0x48>
 800724e:	f104 0a19 	add.w	sl, r4, #25
 8007252:	68e3      	ldr	r3, [r4, #12]
 8007254:	6832      	ldr	r2, [r6, #0]
 8007256:	1a9b      	subs	r3, r3, r2
 8007258:	42ab      	cmp	r3, r5
 800725a:	dc26      	bgt.n	80072aa <_printf_common+0x96>
 800725c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007260:	6822      	ldr	r2, [r4, #0]
 8007262:	3b00      	subs	r3, #0
 8007264:	bf18      	it	ne
 8007266:	2301      	movne	r3, #1
 8007268:	0692      	lsls	r2, r2, #26
 800726a:	d42b      	bmi.n	80072c4 <_printf_common+0xb0>
 800726c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007270:	4641      	mov	r1, r8
 8007272:	4638      	mov	r0, r7
 8007274:	47c8      	blx	r9
 8007276:	3001      	adds	r0, #1
 8007278:	d01e      	beq.n	80072b8 <_printf_common+0xa4>
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	6922      	ldr	r2, [r4, #16]
 800727e:	f003 0306 	and.w	r3, r3, #6
 8007282:	2b04      	cmp	r3, #4
 8007284:	bf02      	ittt	eq
 8007286:	68e5      	ldreq	r5, [r4, #12]
 8007288:	6833      	ldreq	r3, [r6, #0]
 800728a:	1aed      	subeq	r5, r5, r3
 800728c:	68a3      	ldr	r3, [r4, #8]
 800728e:	bf0c      	ite	eq
 8007290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007294:	2500      	movne	r5, #0
 8007296:	4293      	cmp	r3, r2
 8007298:	bfc4      	itt	gt
 800729a:	1a9b      	subgt	r3, r3, r2
 800729c:	18ed      	addgt	r5, r5, r3
 800729e:	2600      	movs	r6, #0
 80072a0:	341a      	adds	r4, #26
 80072a2:	42b5      	cmp	r5, r6
 80072a4:	d11a      	bne.n	80072dc <_printf_common+0xc8>
 80072a6:	2000      	movs	r0, #0
 80072a8:	e008      	b.n	80072bc <_printf_common+0xa8>
 80072aa:	2301      	movs	r3, #1
 80072ac:	4652      	mov	r2, sl
 80072ae:	4641      	mov	r1, r8
 80072b0:	4638      	mov	r0, r7
 80072b2:	47c8      	blx	r9
 80072b4:	3001      	adds	r0, #1
 80072b6:	d103      	bne.n	80072c0 <_printf_common+0xac>
 80072b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072c0:	3501      	adds	r5, #1
 80072c2:	e7c6      	b.n	8007252 <_printf_common+0x3e>
 80072c4:	18e1      	adds	r1, r4, r3
 80072c6:	1c5a      	adds	r2, r3, #1
 80072c8:	2030      	movs	r0, #48	@ 0x30
 80072ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80072ce:	4422      	add	r2, r4
 80072d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80072d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80072d8:	3302      	adds	r3, #2
 80072da:	e7c7      	b.n	800726c <_printf_common+0x58>
 80072dc:	2301      	movs	r3, #1
 80072de:	4622      	mov	r2, r4
 80072e0:	4641      	mov	r1, r8
 80072e2:	4638      	mov	r0, r7
 80072e4:	47c8      	blx	r9
 80072e6:	3001      	adds	r0, #1
 80072e8:	d0e6      	beq.n	80072b8 <_printf_common+0xa4>
 80072ea:	3601      	adds	r6, #1
 80072ec:	e7d9      	b.n	80072a2 <_printf_common+0x8e>
	...

080072f0 <_printf_i>:
 80072f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072f4:	7e0f      	ldrb	r7, [r1, #24]
 80072f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80072f8:	2f78      	cmp	r7, #120	@ 0x78
 80072fa:	4691      	mov	r9, r2
 80072fc:	4680      	mov	r8, r0
 80072fe:	460c      	mov	r4, r1
 8007300:	469a      	mov	sl, r3
 8007302:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007306:	d807      	bhi.n	8007318 <_printf_i+0x28>
 8007308:	2f62      	cmp	r7, #98	@ 0x62
 800730a:	d80a      	bhi.n	8007322 <_printf_i+0x32>
 800730c:	2f00      	cmp	r7, #0
 800730e:	f000 80d2 	beq.w	80074b6 <_printf_i+0x1c6>
 8007312:	2f58      	cmp	r7, #88	@ 0x58
 8007314:	f000 80b9 	beq.w	800748a <_printf_i+0x19a>
 8007318:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800731c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007320:	e03a      	b.n	8007398 <_printf_i+0xa8>
 8007322:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007326:	2b15      	cmp	r3, #21
 8007328:	d8f6      	bhi.n	8007318 <_printf_i+0x28>
 800732a:	a101      	add	r1, pc, #4	@ (adr r1, 8007330 <_printf_i+0x40>)
 800732c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007330:	08007389 	.word	0x08007389
 8007334:	0800739d 	.word	0x0800739d
 8007338:	08007319 	.word	0x08007319
 800733c:	08007319 	.word	0x08007319
 8007340:	08007319 	.word	0x08007319
 8007344:	08007319 	.word	0x08007319
 8007348:	0800739d 	.word	0x0800739d
 800734c:	08007319 	.word	0x08007319
 8007350:	08007319 	.word	0x08007319
 8007354:	08007319 	.word	0x08007319
 8007358:	08007319 	.word	0x08007319
 800735c:	0800749d 	.word	0x0800749d
 8007360:	080073c7 	.word	0x080073c7
 8007364:	08007457 	.word	0x08007457
 8007368:	08007319 	.word	0x08007319
 800736c:	08007319 	.word	0x08007319
 8007370:	080074bf 	.word	0x080074bf
 8007374:	08007319 	.word	0x08007319
 8007378:	080073c7 	.word	0x080073c7
 800737c:	08007319 	.word	0x08007319
 8007380:	08007319 	.word	0x08007319
 8007384:	0800745f 	.word	0x0800745f
 8007388:	6833      	ldr	r3, [r6, #0]
 800738a:	1d1a      	adds	r2, r3, #4
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6032      	str	r2, [r6, #0]
 8007390:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007394:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007398:	2301      	movs	r3, #1
 800739a:	e09d      	b.n	80074d8 <_printf_i+0x1e8>
 800739c:	6833      	ldr	r3, [r6, #0]
 800739e:	6820      	ldr	r0, [r4, #0]
 80073a0:	1d19      	adds	r1, r3, #4
 80073a2:	6031      	str	r1, [r6, #0]
 80073a4:	0606      	lsls	r6, r0, #24
 80073a6:	d501      	bpl.n	80073ac <_printf_i+0xbc>
 80073a8:	681d      	ldr	r5, [r3, #0]
 80073aa:	e003      	b.n	80073b4 <_printf_i+0xc4>
 80073ac:	0645      	lsls	r5, r0, #25
 80073ae:	d5fb      	bpl.n	80073a8 <_printf_i+0xb8>
 80073b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80073b4:	2d00      	cmp	r5, #0
 80073b6:	da03      	bge.n	80073c0 <_printf_i+0xd0>
 80073b8:	232d      	movs	r3, #45	@ 0x2d
 80073ba:	426d      	negs	r5, r5
 80073bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073c0:	4859      	ldr	r0, [pc, #356]	@ (8007528 <_printf_i+0x238>)
 80073c2:	230a      	movs	r3, #10
 80073c4:	e011      	b.n	80073ea <_printf_i+0xfa>
 80073c6:	6821      	ldr	r1, [r4, #0]
 80073c8:	6833      	ldr	r3, [r6, #0]
 80073ca:	0608      	lsls	r0, r1, #24
 80073cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80073d0:	d402      	bmi.n	80073d8 <_printf_i+0xe8>
 80073d2:	0649      	lsls	r1, r1, #25
 80073d4:	bf48      	it	mi
 80073d6:	b2ad      	uxthmi	r5, r5
 80073d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80073da:	4853      	ldr	r0, [pc, #332]	@ (8007528 <_printf_i+0x238>)
 80073dc:	6033      	str	r3, [r6, #0]
 80073de:	bf14      	ite	ne
 80073e0:	230a      	movne	r3, #10
 80073e2:	2308      	moveq	r3, #8
 80073e4:	2100      	movs	r1, #0
 80073e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80073ea:	6866      	ldr	r6, [r4, #4]
 80073ec:	60a6      	str	r6, [r4, #8]
 80073ee:	2e00      	cmp	r6, #0
 80073f0:	bfa2      	ittt	ge
 80073f2:	6821      	ldrge	r1, [r4, #0]
 80073f4:	f021 0104 	bicge.w	r1, r1, #4
 80073f8:	6021      	strge	r1, [r4, #0]
 80073fa:	b90d      	cbnz	r5, 8007400 <_printf_i+0x110>
 80073fc:	2e00      	cmp	r6, #0
 80073fe:	d04b      	beq.n	8007498 <_printf_i+0x1a8>
 8007400:	4616      	mov	r6, r2
 8007402:	fbb5 f1f3 	udiv	r1, r5, r3
 8007406:	fb03 5711 	mls	r7, r3, r1, r5
 800740a:	5dc7      	ldrb	r7, [r0, r7]
 800740c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007410:	462f      	mov	r7, r5
 8007412:	42bb      	cmp	r3, r7
 8007414:	460d      	mov	r5, r1
 8007416:	d9f4      	bls.n	8007402 <_printf_i+0x112>
 8007418:	2b08      	cmp	r3, #8
 800741a:	d10b      	bne.n	8007434 <_printf_i+0x144>
 800741c:	6823      	ldr	r3, [r4, #0]
 800741e:	07df      	lsls	r7, r3, #31
 8007420:	d508      	bpl.n	8007434 <_printf_i+0x144>
 8007422:	6923      	ldr	r3, [r4, #16]
 8007424:	6861      	ldr	r1, [r4, #4]
 8007426:	4299      	cmp	r1, r3
 8007428:	bfde      	ittt	le
 800742a:	2330      	movle	r3, #48	@ 0x30
 800742c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007430:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007434:	1b92      	subs	r2, r2, r6
 8007436:	6122      	str	r2, [r4, #16]
 8007438:	f8cd a000 	str.w	sl, [sp]
 800743c:	464b      	mov	r3, r9
 800743e:	aa03      	add	r2, sp, #12
 8007440:	4621      	mov	r1, r4
 8007442:	4640      	mov	r0, r8
 8007444:	f7ff fee6 	bl	8007214 <_printf_common>
 8007448:	3001      	adds	r0, #1
 800744a:	d14a      	bne.n	80074e2 <_printf_i+0x1f2>
 800744c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007450:	b004      	add	sp, #16
 8007452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	f043 0320 	orr.w	r3, r3, #32
 800745c:	6023      	str	r3, [r4, #0]
 800745e:	4833      	ldr	r0, [pc, #204]	@ (800752c <_printf_i+0x23c>)
 8007460:	2778      	movs	r7, #120	@ 0x78
 8007462:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	6831      	ldr	r1, [r6, #0]
 800746a:	061f      	lsls	r7, r3, #24
 800746c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007470:	d402      	bmi.n	8007478 <_printf_i+0x188>
 8007472:	065f      	lsls	r7, r3, #25
 8007474:	bf48      	it	mi
 8007476:	b2ad      	uxthmi	r5, r5
 8007478:	6031      	str	r1, [r6, #0]
 800747a:	07d9      	lsls	r1, r3, #31
 800747c:	bf44      	itt	mi
 800747e:	f043 0320 	orrmi.w	r3, r3, #32
 8007482:	6023      	strmi	r3, [r4, #0]
 8007484:	b11d      	cbz	r5, 800748e <_printf_i+0x19e>
 8007486:	2310      	movs	r3, #16
 8007488:	e7ac      	b.n	80073e4 <_printf_i+0xf4>
 800748a:	4827      	ldr	r0, [pc, #156]	@ (8007528 <_printf_i+0x238>)
 800748c:	e7e9      	b.n	8007462 <_printf_i+0x172>
 800748e:	6823      	ldr	r3, [r4, #0]
 8007490:	f023 0320 	bic.w	r3, r3, #32
 8007494:	6023      	str	r3, [r4, #0]
 8007496:	e7f6      	b.n	8007486 <_printf_i+0x196>
 8007498:	4616      	mov	r6, r2
 800749a:	e7bd      	b.n	8007418 <_printf_i+0x128>
 800749c:	6833      	ldr	r3, [r6, #0]
 800749e:	6825      	ldr	r5, [r4, #0]
 80074a0:	6961      	ldr	r1, [r4, #20]
 80074a2:	1d18      	adds	r0, r3, #4
 80074a4:	6030      	str	r0, [r6, #0]
 80074a6:	062e      	lsls	r6, r5, #24
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	d501      	bpl.n	80074b0 <_printf_i+0x1c0>
 80074ac:	6019      	str	r1, [r3, #0]
 80074ae:	e002      	b.n	80074b6 <_printf_i+0x1c6>
 80074b0:	0668      	lsls	r0, r5, #25
 80074b2:	d5fb      	bpl.n	80074ac <_printf_i+0x1bc>
 80074b4:	8019      	strh	r1, [r3, #0]
 80074b6:	2300      	movs	r3, #0
 80074b8:	6123      	str	r3, [r4, #16]
 80074ba:	4616      	mov	r6, r2
 80074bc:	e7bc      	b.n	8007438 <_printf_i+0x148>
 80074be:	6833      	ldr	r3, [r6, #0]
 80074c0:	1d1a      	adds	r2, r3, #4
 80074c2:	6032      	str	r2, [r6, #0]
 80074c4:	681e      	ldr	r6, [r3, #0]
 80074c6:	6862      	ldr	r2, [r4, #4]
 80074c8:	2100      	movs	r1, #0
 80074ca:	4630      	mov	r0, r6
 80074cc:	f7f8 feb8 	bl	8000240 <memchr>
 80074d0:	b108      	cbz	r0, 80074d6 <_printf_i+0x1e6>
 80074d2:	1b80      	subs	r0, r0, r6
 80074d4:	6060      	str	r0, [r4, #4]
 80074d6:	6863      	ldr	r3, [r4, #4]
 80074d8:	6123      	str	r3, [r4, #16]
 80074da:	2300      	movs	r3, #0
 80074dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074e0:	e7aa      	b.n	8007438 <_printf_i+0x148>
 80074e2:	6923      	ldr	r3, [r4, #16]
 80074e4:	4632      	mov	r2, r6
 80074e6:	4649      	mov	r1, r9
 80074e8:	4640      	mov	r0, r8
 80074ea:	47d0      	blx	sl
 80074ec:	3001      	adds	r0, #1
 80074ee:	d0ad      	beq.n	800744c <_printf_i+0x15c>
 80074f0:	6823      	ldr	r3, [r4, #0]
 80074f2:	079b      	lsls	r3, r3, #30
 80074f4:	d413      	bmi.n	800751e <_printf_i+0x22e>
 80074f6:	68e0      	ldr	r0, [r4, #12]
 80074f8:	9b03      	ldr	r3, [sp, #12]
 80074fa:	4298      	cmp	r0, r3
 80074fc:	bfb8      	it	lt
 80074fe:	4618      	movlt	r0, r3
 8007500:	e7a6      	b.n	8007450 <_printf_i+0x160>
 8007502:	2301      	movs	r3, #1
 8007504:	4632      	mov	r2, r6
 8007506:	4649      	mov	r1, r9
 8007508:	4640      	mov	r0, r8
 800750a:	47d0      	blx	sl
 800750c:	3001      	adds	r0, #1
 800750e:	d09d      	beq.n	800744c <_printf_i+0x15c>
 8007510:	3501      	adds	r5, #1
 8007512:	68e3      	ldr	r3, [r4, #12]
 8007514:	9903      	ldr	r1, [sp, #12]
 8007516:	1a5b      	subs	r3, r3, r1
 8007518:	42ab      	cmp	r3, r5
 800751a:	dcf2      	bgt.n	8007502 <_printf_i+0x212>
 800751c:	e7eb      	b.n	80074f6 <_printf_i+0x206>
 800751e:	2500      	movs	r5, #0
 8007520:	f104 0619 	add.w	r6, r4, #25
 8007524:	e7f5      	b.n	8007512 <_printf_i+0x222>
 8007526:	bf00      	nop
 8007528:	080094d3 	.word	0x080094d3
 800752c:	080094e4 	.word	0x080094e4

08007530 <_scanf_chars>:
 8007530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007534:	4615      	mov	r5, r2
 8007536:	688a      	ldr	r2, [r1, #8]
 8007538:	4680      	mov	r8, r0
 800753a:	460c      	mov	r4, r1
 800753c:	b932      	cbnz	r2, 800754c <_scanf_chars+0x1c>
 800753e:	698a      	ldr	r2, [r1, #24]
 8007540:	2a00      	cmp	r2, #0
 8007542:	bf14      	ite	ne
 8007544:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8007548:	2201      	moveq	r2, #1
 800754a:	608a      	str	r2, [r1, #8]
 800754c:	6822      	ldr	r2, [r4, #0]
 800754e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80075e0 <_scanf_chars+0xb0>
 8007552:	06d1      	lsls	r1, r2, #27
 8007554:	bf5f      	itttt	pl
 8007556:	681a      	ldrpl	r2, [r3, #0]
 8007558:	1d11      	addpl	r1, r2, #4
 800755a:	6019      	strpl	r1, [r3, #0]
 800755c:	6816      	ldrpl	r6, [r2, #0]
 800755e:	2700      	movs	r7, #0
 8007560:	69a0      	ldr	r0, [r4, #24]
 8007562:	b188      	cbz	r0, 8007588 <_scanf_chars+0x58>
 8007564:	2801      	cmp	r0, #1
 8007566:	d107      	bne.n	8007578 <_scanf_chars+0x48>
 8007568:	682b      	ldr	r3, [r5, #0]
 800756a:	781a      	ldrb	r2, [r3, #0]
 800756c:	6963      	ldr	r3, [r4, #20]
 800756e:	5c9b      	ldrb	r3, [r3, r2]
 8007570:	b953      	cbnz	r3, 8007588 <_scanf_chars+0x58>
 8007572:	2f00      	cmp	r7, #0
 8007574:	d031      	beq.n	80075da <_scanf_chars+0xaa>
 8007576:	e022      	b.n	80075be <_scanf_chars+0x8e>
 8007578:	2802      	cmp	r0, #2
 800757a:	d120      	bne.n	80075be <_scanf_chars+0x8e>
 800757c:	682b      	ldr	r3, [r5, #0]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	f819 3003 	ldrb.w	r3, [r9, r3]
 8007584:	071b      	lsls	r3, r3, #28
 8007586:	d41a      	bmi.n	80075be <_scanf_chars+0x8e>
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	06da      	lsls	r2, r3, #27
 800758c:	bf5e      	ittt	pl
 800758e:	682b      	ldrpl	r3, [r5, #0]
 8007590:	781b      	ldrbpl	r3, [r3, #0]
 8007592:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007596:	682a      	ldr	r2, [r5, #0]
 8007598:	686b      	ldr	r3, [r5, #4]
 800759a:	3201      	adds	r2, #1
 800759c:	602a      	str	r2, [r5, #0]
 800759e:	68a2      	ldr	r2, [r4, #8]
 80075a0:	3b01      	subs	r3, #1
 80075a2:	3a01      	subs	r2, #1
 80075a4:	606b      	str	r3, [r5, #4]
 80075a6:	3701      	adds	r7, #1
 80075a8:	60a2      	str	r2, [r4, #8]
 80075aa:	b142      	cbz	r2, 80075be <_scanf_chars+0x8e>
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	dcd7      	bgt.n	8007560 <_scanf_chars+0x30>
 80075b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80075b4:	4629      	mov	r1, r5
 80075b6:	4640      	mov	r0, r8
 80075b8:	4798      	blx	r3
 80075ba:	2800      	cmp	r0, #0
 80075bc:	d0d0      	beq.n	8007560 <_scanf_chars+0x30>
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	f013 0310 	ands.w	r3, r3, #16
 80075c4:	d105      	bne.n	80075d2 <_scanf_chars+0xa2>
 80075c6:	68e2      	ldr	r2, [r4, #12]
 80075c8:	3201      	adds	r2, #1
 80075ca:	60e2      	str	r2, [r4, #12]
 80075cc:	69a2      	ldr	r2, [r4, #24]
 80075ce:	b102      	cbz	r2, 80075d2 <_scanf_chars+0xa2>
 80075d0:	7033      	strb	r3, [r6, #0]
 80075d2:	6923      	ldr	r3, [r4, #16]
 80075d4:	443b      	add	r3, r7
 80075d6:	6123      	str	r3, [r4, #16]
 80075d8:	2000      	movs	r0, #0
 80075da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075de:	bf00      	nop
 80075e0:	08009351 	.word	0x08009351

080075e4 <_scanf_i>:
 80075e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e8:	4698      	mov	r8, r3
 80075ea:	4b74      	ldr	r3, [pc, #464]	@ (80077bc <_scanf_i+0x1d8>)
 80075ec:	460c      	mov	r4, r1
 80075ee:	4682      	mov	sl, r0
 80075f0:	4616      	mov	r6, r2
 80075f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80075f6:	b087      	sub	sp, #28
 80075f8:	ab03      	add	r3, sp, #12
 80075fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80075fe:	4b70      	ldr	r3, [pc, #448]	@ (80077c0 <_scanf_i+0x1dc>)
 8007600:	69a1      	ldr	r1, [r4, #24]
 8007602:	4a70      	ldr	r2, [pc, #448]	@ (80077c4 <_scanf_i+0x1e0>)
 8007604:	2903      	cmp	r1, #3
 8007606:	bf08      	it	eq
 8007608:	461a      	moveq	r2, r3
 800760a:	68a3      	ldr	r3, [r4, #8]
 800760c:	9201      	str	r2, [sp, #4]
 800760e:	1e5a      	subs	r2, r3, #1
 8007610:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007614:	bf88      	it	hi
 8007616:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800761a:	4627      	mov	r7, r4
 800761c:	bf82      	ittt	hi
 800761e:	eb03 0905 	addhi.w	r9, r3, r5
 8007622:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007626:	60a3      	strhi	r3, [r4, #8]
 8007628:	f857 3b1c 	ldr.w	r3, [r7], #28
 800762c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8007630:	bf98      	it	ls
 8007632:	f04f 0900 	movls.w	r9, #0
 8007636:	6023      	str	r3, [r4, #0]
 8007638:	463d      	mov	r5, r7
 800763a:	f04f 0b00 	mov.w	fp, #0
 800763e:	6831      	ldr	r1, [r6, #0]
 8007640:	ab03      	add	r3, sp, #12
 8007642:	7809      	ldrb	r1, [r1, #0]
 8007644:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007648:	2202      	movs	r2, #2
 800764a:	f7f8 fdf9 	bl	8000240 <memchr>
 800764e:	b328      	cbz	r0, 800769c <_scanf_i+0xb8>
 8007650:	f1bb 0f01 	cmp.w	fp, #1
 8007654:	d159      	bne.n	800770a <_scanf_i+0x126>
 8007656:	6862      	ldr	r2, [r4, #4]
 8007658:	b92a      	cbnz	r2, 8007666 <_scanf_i+0x82>
 800765a:	6822      	ldr	r2, [r4, #0]
 800765c:	2108      	movs	r1, #8
 800765e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007662:	6061      	str	r1, [r4, #4]
 8007664:	6022      	str	r2, [r4, #0]
 8007666:	6822      	ldr	r2, [r4, #0]
 8007668:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800766c:	6022      	str	r2, [r4, #0]
 800766e:	68a2      	ldr	r2, [r4, #8]
 8007670:	1e51      	subs	r1, r2, #1
 8007672:	60a1      	str	r1, [r4, #8]
 8007674:	b192      	cbz	r2, 800769c <_scanf_i+0xb8>
 8007676:	6832      	ldr	r2, [r6, #0]
 8007678:	1c51      	adds	r1, r2, #1
 800767a:	6031      	str	r1, [r6, #0]
 800767c:	7812      	ldrb	r2, [r2, #0]
 800767e:	f805 2b01 	strb.w	r2, [r5], #1
 8007682:	6872      	ldr	r2, [r6, #4]
 8007684:	3a01      	subs	r2, #1
 8007686:	2a00      	cmp	r2, #0
 8007688:	6072      	str	r2, [r6, #4]
 800768a:	dc07      	bgt.n	800769c <_scanf_i+0xb8>
 800768c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8007690:	4631      	mov	r1, r6
 8007692:	4650      	mov	r0, sl
 8007694:	4790      	blx	r2
 8007696:	2800      	cmp	r0, #0
 8007698:	f040 8085 	bne.w	80077a6 <_scanf_i+0x1c2>
 800769c:	f10b 0b01 	add.w	fp, fp, #1
 80076a0:	f1bb 0f03 	cmp.w	fp, #3
 80076a4:	d1cb      	bne.n	800763e <_scanf_i+0x5a>
 80076a6:	6863      	ldr	r3, [r4, #4]
 80076a8:	b90b      	cbnz	r3, 80076ae <_scanf_i+0xca>
 80076aa:	230a      	movs	r3, #10
 80076ac:	6063      	str	r3, [r4, #4]
 80076ae:	6863      	ldr	r3, [r4, #4]
 80076b0:	4945      	ldr	r1, [pc, #276]	@ (80077c8 <_scanf_i+0x1e4>)
 80076b2:	6960      	ldr	r0, [r4, #20]
 80076b4:	1ac9      	subs	r1, r1, r3
 80076b6:	f000 f889 	bl	80077cc <__sccl>
 80076ba:	f04f 0b00 	mov.w	fp, #0
 80076be:	68a3      	ldr	r3, [r4, #8]
 80076c0:	6822      	ldr	r2, [r4, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d03d      	beq.n	8007742 <_scanf_i+0x15e>
 80076c6:	6831      	ldr	r1, [r6, #0]
 80076c8:	6960      	ldr	r0, [r4, #20]
 80076ca:	f891 c000 	ldrb.w	ip, [r1]
 80076ce:	f810 000c 	ldrb.w	r0, [r0, ip]
 80076d2:	2800      	cmp	r0, #0
 80076d4:	d035      	beq.n	8007742 <_scanf_i+0x15e>
 80076d6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80076da:	d124      	bne.n	8007726 <_scanf_i+0x142>
 80076dc:	0510      	lsls	r0, r2, #20
 80076de:	d522      	bpl.n	8007726 <_scanf_i+0x142>
 80076e0:	f10b 0b01 	add.w	fp, fp, #1
 80076e4:	f1b9 0f00 	cmp.w	r9, #0
 80076e8:	d003      	beq.n	80076f2 <_scanf_i+0x10e>
 80076ea:	3301      	adds	r3, #1
 80076ec:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80076f0:	60a3      	str	r3, [r4, #8]
 80076f2:	6873      	ldr	r3, [r6, #4]
 80076f4:	3b01      	subs	r3, #1
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	6073      	str	r3, [r6, #4]
 80076fa:	dd1b      	ble.n	8007734 <_scanf_i+0x150>
 80076fc:	6833      	ldr	r3, [r6, #0]
 80076fe:	3301      	adds	r3, #1
 8007700:	6033      	str	r3, [r6, #0]
 8007702:	68a3      	ldr	r3, [r4, #8]
 8007704:	3b01      	subs	r3, #1
 8007706:	60a3      	str	r3, [r4, #8]
 8007708:	e7d9      	b.n	80076be <_scanf_i+0xda>
 800770a:	f1bb 0f02 	cmp.w	fp, #2
 800770e:	d1ae      	bne.n	800766e <_scanf_i+0x8a>
 8007710:	6822      	ldr	r2, [r4, #0]
 8007712:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8007716:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800771a:	d1bf      	bne.n	800769c <_scanf_i+0xb8>
 800771c:	2110      	movs	r1, #16
 800771e:	6061      	str	r1, [r4, #4]
 8007720:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007724:	e7a2      	b.n	800766c <_scanf_i+0x88>
 8007726:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800772a:	6022      	str	r2, [r4, #0]
 800772c:	780b      	ldrb	r3, [r1, #0]
 800772e:	f805 3b01 	strb.w	r3, [r5], #1
 8007732:	e7de      	b.n	80076f2 <_scanf_i+0x10e>
 8007734:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007738:	4631      	mov	r1, r6
 800773a:	4650      	mov	r0, sl
 800773c:	4798      	blx	r3
 800773e:	2800      	cmp	r0, #0
 8007740:	d0df      	beq.n	8007702 <_scanf_i+0x11e>
 8007742:	6823      	ldr	r3, [r4, #0]
 8007744:	05d9      	lsls	r1, r3, #23
 8007746:	d50d      	bpl.n	8007764 <_scanf_i+0x180>
 8007748:	42bd      	cmp	r5, r7
 800774a:	d909      	bls.n	8007760 <_scanf_i+0x17c>
 800774c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007750:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007754:	4632      	mov	r2, r6
 8007756:	4650      	mov	r0, sl
 8007758:	4798      	blx	r3
 800775a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800775e:	464d      	mov	r5, r9
 8007760:	42bd      	cmp	r5, r7
 8007762:	d028      	beq.n	80077b6 <_scanf_i+0x1d2>
 8007764:	6822      	ldr	r2, [r4, #0]
 8007766:	f012 0210 	ands.w	r2, r2, #16
 800776a:	d113      	bne.n	8007794 <_scanf_i+0x1b0>
 800776c:	702a      	strb	r2, [r5, #0]
 800776e:	6863      	ldr	r3, [r4, #4]
 8007770:	9e01      	ldr	r6, [sp, #4]
 8007772:	4639      	mov	r1, r7
 8007774:	4650      	mov	r0, sl
 8007776:	47b0      	blx	r6
 8007778:	f8d8 3000 	ldr.w	r3, [r8]
 800777c:	6821      	ldr	r1, [r4, #0]
 800777e:	1d1a      	adds	r2, r3, #4
 8007780:	f8c8 2000 	str.w	r2, [r8]
 8007784:	f011 0f20 	tst.w	r1, #32
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	d00f      	beq.n	80077ac <_scanf_i+0x1c8>
 800778c:	6018      	str	r0, [r3, #0]
 800778e:	68e3      	ldr	r3, [r4, #12]
 8007790:	3301      	adds	r3, #1
 8007792:	60e3      	str	r3, [r4, #12]
 8007794:	6923      	ldr	r3, [r4, #16]
 8007796:	1bed      	subs	r5, r5, r7
 8007798:	445d      	add	r5, fp
 800779a:	442b      	add	r3, r5
 800779c:	6123      	str	r3, [r4, #16]
 800779e:	2000      	movs	r0, #0
 80077a0:	b007      	add	sp, #28
 80077a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a6:	f04f 0b00 	mov.w	fp, #0
 80077aa:	e7ca      	b.n	8007742 <_scanf_i+0x15e>
 80077ac:	07ca      	lsls	r2, r1, #31
 80077ae:	bf4c      	ite	mi
 80077b0:	8018      	strhmi	r0, [r3, #0]
 80077b2:	6018      	strpl	r0, [r3, #0]
 80077b4:	e7eb      	b.n	800778e <_scanf_i+0x1aa>
 80077b6:	2001      	movs	r0, #1
 80077b8:	e7f2      	b.n	80077a0 <_scanf_i+0x1bc>
 80077ba:	bf00      	nop
 80077bc:	080092bc 	.word	0x080092bc
 80077c0:	0800603d 	.word	0x0800603d
 80077c4:	0800845d 	.word	0x0800845d
 80077c8:	08009505 	.word	0x08009505

080077cc <__sccl>:
 80077cc:	b570      	push	{r4, r5, r6, lr}
 80077ce:	780b      	ldrb	r3, [r1, #0]
 80077d0:	4604      	mov	r4, r0
 80077d2:	2b5e      	cmp	r3, #94	@ 0x5e
 80077d4:	bf0b      	itete	eq
 80077d6:	784b      	ldrbeq	r3, [r1, #1]
 80077d8:	1c4a      	addne	r2, r1, #1
 80077da:	1c8a      	addeq	r2, r1, #2
 80077dc:	2100      	movne	r1, #0
 80077de:	bf08      	it	eq
 80077e0:	2101      	moveq	r1, #1
 80077e2:	3801      	subs	r0, #1
 80077e4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80077e8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80077ec:	42a8      	cmp	r0, r5
 80077ee:	d1fb      	bne.n	80077e8 <__sccl+0x1c>
 80077f0:	b90b      	cbnz	r3, 80077f6 <__sccl+0x2a>
 80077f2:	1e50      	subs	r0, r2, #1
 80077f4:	bd70      	pop	{r4, r5, r6, pc}
 80077f6:	f081 0101 	eor.w	r1, r1, #1
 80077fa:	54e1      	strb	r1, [r4, r3]
 80077fc:	4610      	mov	r0, r2
 80077fe:	4602      	mov	r2, r0
 8007800:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007804:	2d2d      	cmp	r5, #45	@ 0x2d
 8007806:	d005      	beq.n	8007814 <__sccl+0x48>
 8007808:	2d5d      	cmp	r5, #93	@ 0x5d
 800780a:	d016      	beq.n	800783a <__sccl+0x6e>
 800780c:	2d00      	cmp	r5, #0
 800780e:	d0f1      	beq.n	80077f4 <__sccl+0x28>
 8007810:	462b      	mov	r3, r5
 8007812:	e7f2      	b.n	80077fa <__sccl+0x2e>
 8007814:	7846      	ldrb	r6, [r0, #1]
 8007816:	2e5d      	cmp	r6, #93	@ 0x5d
 8007818:	d0fa      	beq.n	8007810 <__sccl+0x44>
 800781a:	42b3      	cmp	r3, r6
 800781c:	dcf8      	bgt.n	8007810 <__sccl+0x44>
 800781e:	3002      	adds	r0, #2
 8007820:	461a      	mov	r2, r3
 8007822:	3201      	adds	r2, #1
 8007824:	4296      	cmp	r6, r2
 8007826:	54a1      	strb	r1, [r4, r2]
 8007828:	dcfb      	bgt.n	8007822 <__sccl+0x56>
 800782a:	1af2      	subs	r2, r6, r3
 800782c:	3a01      	subs	r2, #1
 800782e:	1c5d      	adds	r5, r3, #1
 8007830:	42b3      	cmp	r3, r6
 8007832:	bfa8      	it	ge
 8007834:	2200      	movge	r2, #0
 8007836:	18ab      	adds	r3, r5, r2
 8007838:	e7e1      	b.n	80077fe <__sccl+0x32>
 800783a:	4610      	mov	r0, r2
 800783c:	e7da      	b.n	80077f4 <__sccl+0x28>
	...

08007840 <__sflush_r>:
 8007840:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007848:	0716      	lsls	r6, r2, #28
 800784a:	4605      	mov	r5, r0
 800784c:	460c      	mov	r4, r1
 800784e:	d454      	bmi.n	80078fa <__sflush_r+0xba>
 8007850:	684b      	ldr	r3, [r1, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	dc02      	bgt.n	800785c <__sflush_r+0x1c>
 8007856:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007858:	2b00      	cmp	r3, #0
 800785a:	dd48      	ble.n	80078ee <__sflush_r+0xae>
 800785c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800785e:	2e00      	cmp	r6, #0
 8007860:	d045      	beq.n	80078ee <__sflush_r+0xae>
 8007862:	2300      	movs	r3, #0
 8007864:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007868:	682f      	ldr	r7, [r5, #0]
 800786a:	6a21      	ldr	r1, [r4, #32]
 800786c:	602b      	str	r3, [r5, #0]
 800786e:	d030      	beq.n	80078d2 <__sflush_r+0x92>
 8007870:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007872:	89a3      	ldrh	r3, [r4, #12]
 8007874:	0759      	lsls	r1, r3, #29
 8007876:	d505      	bpl.n	8007884 <__sflush_r+0x44>
 8007878:	6863      	ldr	r3, [r4, #4]
 800787a:	1ad2      	subs	r2, r2, r3
 800787c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800787e:	b10b      	cbz	r3, 8007884 <__sflush_r+0x44>
 8007880:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007882:	1ad2      	subs	r2, r2, r3
 8007884:	2300      	movs	r3, #0
 8007886:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007888:	6a21      	ldr	r1, [r4, #32]
 800788a:	4628      	mov	r0, r5
 800788c:	47b0      	blx	r6
 800788e:	1c43      	adds	r3, r0, #1
 8007890:	89a3      	ldrh	r3, [r4, #12]
 8007892:	d106      	bne.n	80078a2 <__sflush_r+0x62>
 8007894:	6829      	ldr	r1, [r5, #0]
 8007896:	291d      	cmp	r1, #29
 8007898:	d82b      	bhi.n	80078f2 <__sflush_r+0xb2>
 800789a:	4a2a      	ldr	r2, [pc, #168]	@ (8007944 <__sflush_r+0x104>)
 800789c:	410a      	asrs	r2, r1
 800789e:	07d6      	lsls	r6, r2, #31
 80078a0:	d427      	bmi.n	80078f2 <__sflush_r+0xb2>
 80078a2:	2200      	movs	r2, #0
 80078a4:	6062      	str	r2, [r4, #4]
 80078a6:	04d9      	lsls	r1, r3, #19
 80078a8:	6922      	ldr	r2, [r4, #16]
 80078aa:	6022      	str	r2, [r4, #0]
 80078ac:	d504      	bpl.n	80078b8 <__sflush_r+0x78>
 80078ae:	1c42      	adds	r2, r0, #1
 80078b0:	d101      	bne.n	80078b6 <__sflush_r+0x76>
 80078b2:	682b      	ldr	r3, [r5, #0]
 80078b4:	b903      	cbnz	r3, 80078b8 <__sflush_r+0x78>
 80078b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80078b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078ba:	602f      	str	r7, [r5, #0]
 80078bc:	b1b9      	cbz	r1, 80078ee <__sflush_r+0xae>
 80078be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078c2:	4299      	cmp	r1, r3
 80078c4:	d002      	beq.n	80078cc <__sflush_r+0x8c>
 80078c6:	4628      	mov	r0, r5
 80078c8:	f7fe fcaa 	bl	8006220 <_free_r>
 80078cc:	2300      	movs	r3, #0
 80078ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80078d0:	e00d      	b.n	80078ee <__sflush_r+0xae>
 80078d2:	2301      	movs	r3, #1
 80078d4:	4628      	mov	r0, r5
 80078d6:	47b0      	blx	r6
 80078d8:	4602      	mov	r2, r0
 80078da:	1c50      	adds	r0, r2, #1
 80078dc:	d1c9      	bne.n	8007872 <__sflush_r+0x32>
 80078de:	682b      	ldr	r3, [r5, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d0c6      	beq.n	8007872 <__sflush_r+0x32>
 80078e4:	2b1d      	cmp	r3, #29
 80078e6:	d001      	beq.n	80078ec <__sflush_r+0xac>
 80078e8:	2b16      	cmp	r3, #22
 80078ea:	d11e      	bne.n	800792a <__sflush_r+0xea>
 80078ec:	602f      	str	r7, [r5, #0]
 80078ee:	2000      	movs	r0, #0
 80078f0:	e022      	b.n	8007938 <__sflush_r+0xf8>
 80078f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078f6:	b21b      	sxth	r3, r3
 80078f8:	e01b      	b.n	8007932 <__sflush_r+0xf2>
 80078fa:	690f      	ldr	r7, [r1, #16]
 80078fc:	2f00      	cmp	r7, #0
 80078fe:	d0f6      	beq.n	80078ee <__sflush_r+0xae>
 8007900:	0793      	lsls	r3, r2, #30
 8007902:	680e      	ldr	r6, [r1, #0]
 8007904:	bf08      	it	eq
 8007906:	694b      	ldreq	r3, [r1, #20]
 8007908:	600f      	str	r7, [r1, #0]
 800790a:	bf18      	it	ne
 800790c:	2300      	movne	r3, #0
 800790e:	eba6 0807 	sub.w	r8, r6, r7
 8007912:	608b      	str	r3, [r1, #8]
 8007914:	f1b8 0f00 	cmp.w	r8, #0
 8007918:	dde9      	ble.n	80078ee <__sflush_r+0xae>
 800791a:	6a21      	ldr	r1, [r4, #32]
 800791c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800791e:	4643      	mov	r3, r8
 8007920:	463a      	mov	r2, r7
 8007922:	4628      	mov	r0, r5
 8007924:	47b0      	blx	r6
 8007926:	2800      	cmp	r0, #0
 8007928:	dc08      	bgt.n	800793c <__sflush_r+0xfc>
 800792a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800792e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007932:	81a3      	strh	r3, [r4, #12]
 8007934:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800793c:	4407      	add	r7, r0
 800793e:	eba8 0800 	sub.w	r8, r8, r0
 8007942:	e7e7      	b.n	8007914 <__sflush_r+0xd4>
 8007944:	dfbffffe 	.word	0xdfbffffe

08007948 <_fflush_r>:
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	690b      	ldr	r3, [r1, #16]
 800794c:	4605      	mov	r5, r0
 800794e:	460c      	mov	r4, r1
 8007950:	b913      	cbnz	r3, 8007958 <_fflush_r+0x10>
 8007952:	2500      	movs	r5, #0
 8007954:	4628      	mov	r0, r5
 8007956:	bd38      	pop	{r3, r4, r5, pc}
 8007958:	b118      	cbz	r0, 8007962 <_fflush_r+0x1a>
 800795a:	6a03      	ldr	r3, [r0, #32]
 800795c:	b90b      	cbnz	r3, 8007962 <_fflush_r+0x1a>
 800795e:	f7fd fc8b 	bl	8005278 <__sinit>
 8007962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d0f3      	beq.n	8007952 <_fflush_r+0xa>
 800796a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800796c:	07d0      	lsls	r0, r2, #31
 800796e:	d404      	bmi.n	800797a <_fflush_r+0x32>
 8007970:	0599      	lsls	r1, r3, #22
 8007972:	d402      	bmi.n	800797a <_fflush_r+0x32>
 8007974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007976:	f7fe fc3a 	bl	80061ee <__retarget_lock_acquire_recursive>
 800797a:	4628      	mov	r0, r5
 800797c:	4621      	mov	r1, r4
 800797e:	f7ff ff5f 	bl	8007840 <__sflush_r>
 8007982:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007984:	07da      	lsls	r2, r3, #31
 8007986:	4605      	mov	r5, r0
 8007988:	d4e4      	bmi.n	8007954 <_fflush_r+0xc>
 800798a:	89a3      	ldrh	r3, [r4, #12]
 800798c:	059b      	lsls	r3, r3, #22
 800798e:	d4e1      	bmi.n	8007954 <_fflush_r+0xc>
 8007990:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007992:	f7fe fc2d 	bl	80061f0 <__retarget_lock_release_recursive>
 8007996:	e7dd      	b.n	8007954 <_fflush_r+0xc>

08007998 <_Balloc>:
 8007998:	b570      	push	{r4, r5, r6, lr}
 800799a:	69c6      	ldr	r6, [r0, #28]
 800799c:	4604      	mov	r4, r0
 800799e:	460d      	mov	r5, r1
 80079a0:	b976      	cbnz	r6, 80079c0 <_Balloc+0x28>
 80079a2:	2010      	movs	r0, #16
 80079a4:	f7fd fa86 	bl	8004eb4 <malloc>
 80079a8:	4602      	mov	r2, r0
 80079aa:	61e0      	str	r0, [r4, #28]
 80079ac:	b920      	cbnz	r0, 80079b8 <_Balloc+0x20>
 80079ae:	4b18      	ldr	r3, [pc, #96]	@ (8007a10 <_Balloc+0x78>)
 80079b0:	4818      	ldr	r0, [pc, #96]	@ (8007a14 <_Balloc+0x7c>)
 80079b2:	216b      	movs	r1, #107	@ 0x6b
 80079b4:	f000 fe94 	bl	80086e0 <__assert_func>
 80079b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079bc:	6006      	str	r6, [r0, #0]
 80079be:	60c6      	str	r6, [r0, #12]
 80079c0:	69e6      	ldr	r6, [r4, #28]
 80079c2:	68f3      	ldr	r3, [r6, #12]
 80079c4:	b183      	cbz	r3, 80079e8 <_Balloc+0x50>
 80079c6:	69e3      	ldr	r3, [r4, #28]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80079ce:	b9b8      	cbnz	r0, 8007a00 <_Balloc+0x68>
 80079d0:	2101      	movs	r1, #1
 80079d2:	fa01 f605 	lsl.w	r6, r1, r5
 80079d6:	1d72      	adds	r2, r6, #5
 80079d8:	0092      	lsls	r2, r2, #2
 80079da:	4620      	mov	r0, r4
 80079dc:	f000 fe9e 	bl	800871c <_calloc_r>
 80079e0:	b160      	cbz	r0, 80079fc <_Balloc+0x64>
 80079e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80079e6:	e00e      	b.n	8007a06 <_Balloc+0x6e>
 80079e8:	2221      	movs	r2, #33	@ 0x21
 80079ea:	2104      	movs	r1, #4
 80079ec:	4620      	mov	r0, r4
 80079ee:	f000 fe95 	bl	800871c <_calloc_r>
 80079f2:	69e3      	ldr	r3, [r4, #28]
 80079f4:	60f0      	str	r0, [r6, #12]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1e4      	bne.n	80079c6 <_Balloc+0x2e>
 80079fc:	2000      	movs	r0, #0
 80079fe:	bd70      	pop	{r4, r5, r6, pc}
 8007a00:	6802      	ldr	r2, [r0, #0]
 8007a02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a06:	2300      	movs	r3, #0
 8007a08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a0c:	e7f7      	b.n	80079fe <_Balloc+0x66>
 8007a0e:	bf00      	nop
 8007a10:	08009510 	.word	0x08009510
 8007a14:	08009527 	.word	0x08009527

08007a18 <_Bfree>:
 8007a18:	b570      	push	{r4, r5, r6, lr}
 8007a1a:	69c6      	ldr	r6, [r0, #28]
 8007a1c:	4605      	mov	r5, r0
 8007a1e:	460c      	mov	r4, r1
 8007a20:	b976      	cbnz	r6, 8007a40 <_Bfree+0x28>
 8007a22:	2010      	movs	r0, #16
 8007a24:	f7fd fa46 	bl	8004eb4 <malloc>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	61e8      	str	r0, [r5, #28]
 8007a2c:	b920      	cbnz	r0, 8007a38 <_Bfree+0x20>
 8007a2e:	4b09      	ldr	r3, [pc, #36]	@ (8007a54 <_Bfree+0x3c>)
 8007a30:	4809      	ldr	r0, [pc, #36]	@ (8007a58 <_Bfree+0x40>)
 8007a32:	218f      	movs	r1, #143	@ 0x8f
 8007a34:	f000 fe54 	bl	80086e0 <__assert_func>
 8007a38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a3c:	6006      	str	r6, [r0, #0]
 8007a3e:	60c6      	str	r6, [r0, #12]
 8007a40:	b13c      	cbz	r4, 8007a52 <_Bfree+0x3a>
 8007a42:	69eb      	ldr	r3, [r5, #28]
 8007a44:	6862      	ldr	r2, [r4, #4]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a4c:	6021      	str	r1, [r4, #0]
 8007a4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a52:	bd70      	pop	{r4, r5, r6, pc}
 8007a54:	08009510 	.word	0x08009510
 8007a58:	08009527 	.word	0x08009527

08007a5c <__multadd>:
 8007a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a60:	690d      	ldr	r5, [r1, #16]
 8007a62:	4607      	mov	r7, r0
 8007a64:	460c      	mov	r4, r1
 8007a66:	461e      	mov	r6, r3
 8007a68:	f101 0c14 	add.w	ip, r1, #20
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	f8dc 3000 	ldr.w	r3, [ip]
 8007a72:	b299      	uxth	r1, r3
 8007a74:	fb02 6101 	mla	r1, r2, r1, r6
 8007a78:	0c1e      	lsrs	r6, r3, #16
 8007a7a:	0c0b      	lsrs	r3, r1, #16
 8007a7c:	fb02 3306 	mla	r3, r2, r6, r3
 8007a80:	b289      	uxth	r1, r1
 8007a82:	3001      	adds	r0, #1
 8007a84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a88:	4285      	cmp	r5, r0
 8007a8a:	f84c 1b04 	str.w	r1, [ip], #4
 8007a8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a92:	dcec      	bgt.n	8007a6e <__multadd+0x12>
 8007a94:	b30e      	cbz	r6, 8007ada <__multadd+0x7e>
 8007a96:	68a3      	ldr	r3, [r4, #8]
 8007a98:	42ab      	cmp	r3, r5
 8007a9a:	dc19      	bgt.n	8007ad0 <__multadd+0x74>
 8007a9c:	6861      	ldr	r1, [r4, #4]
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	3101      	adds	r1, #1
 8007aa2:	f7ff ff79 	bl	8007998 <_Balloc>
 8007aa6:	4680      	mov	r8, r0
 8007aa8:	b928      	cbnz	r0, 8007ab6 <__multadd+0x5a>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	4b0c      	ldr	r3, [pc, #48]	@ (8007ae0 <__multadd+0x84>)
 8007aae:	480d      	ldr	r0, [pc, #52]	@ (8007ae4 <__multadd+0x88>)
 8007ab0:	21ba      	movs	r1, #186	@ 0xba
 8007ab2:	f000 fe15 	bl	80086e0 <__assert_func>
 8007ab6:	6922      	ldr	r2, [r4, #16]
 8007ab8:	3202      	adds	r2, #2
 8007aba:	f104 010c 	add.w	r1, r4, #12
 8007abe:	0092      	lsls	r2, r2, #2
 8007ac0:	300c      	adds	r0, #12
 8007ac2:	f7fe fb96 	bl	80061f2 <memcpy>
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	4638      	mov	r0, r7
 8007aca:	f7ff ffa5 	bl	8007a18 <_Bfree>
 8007ace:	4644      	mov	r4, r8
 8007ad0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ad4:	3501      	adds	r5, #1
 8007ad6:	615e      	str	r6, [r3, #20]
 8007ad8:	6125      	str	r5, [r4, #16]
 8007ada:	4620      	mov	r0, r4
 8007adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ae0:	08009451 	.word	0x08009451
 8007ae4:	08009527 	.word	0x08009527

08007ae8 <__s2b>:
 8007ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007aec:	460c      	mov	r4, r1
 8007aee:	4615      	mov	r5, r2
 8007af0:	461f      	mov	r7, r3
 8007af2:	2209      	movs	r2, #9
 8007af4:	3308      	adds	r3, #8
 8007af6:	4606      	mov	r6, r0
 8007af8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007afc:	2100      	movs	r1, #0
 8007afe:	2201      	movs	r2, #1
 8007b00:	429a      	cmp	r2, r3
 8007b02:	db09      	blt.n	8007b18 <__s2b+0x30>
 8007b04:	4630      	mov	r0, r6
 8007b06:	f7ff ff47 	bl	8007998 <_Balloc>
 8007b0a:	b940      	cbnz	r0, 8007b1e <__s2b+0x36>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	4b19      	ldr	r3, [pc, #100]	@ (8007b74 <__s2b+0x8c>)
 8007b10:	4819      	ldr	r0, [pc, #100]	@ (8007b78 <__s2b+0x90>)
 8007b12:	21d3      	movs	r1, #211	@ 0xd3
 8007b14:	f000 fde4 	bl	80086e0 <__assert_func>
 8007b18:	0052      	lsls	r2, r2, #1
 8007b1a:	3101      	adds	r1, #1
 8007b1c:	e7f0      	b.n	8007b00 <__s2b+0x18>
 8007b1e:	9b08      	ldr	r3, [sp, #32]
 8007b20:	6143      	str	r3, [r0, #20]
 8007b22:	2d09      	cmp	r5, #9
 8007b24:	f04f 0301 	mov.w	r3, #1
 8007b28:	6103      	str	r3, [r0, #16]
 8007b2a:	dd16      	ble.n	8007b5a <__s2b+0x72>
 8007b2c:	f104 0909 	add.w	r9, r4, #9
 8007b30:	46c8      	mov	r8, r9
 8007b32:	442c      	add	r4, r5
 8007b34:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007b38:	4601      	mov	r1, r0
 8007b3a:	3b30      	subs	r3, #48	@ 0x30
 8007b3c:	220a      	movs	r2, #10
 8007b3e:	4630      	mov	r0, r6
 8007b40:	f7ff ff8c 	bl	8007a5c <__multadd>
 8007b44:	45a0      	cmp	r8, r4
 8007b46:	d1f5      	bne.n	8007b34 <__s2b+0x4c>
 8007b48:	f1a5 0408 	sub.w	r4, r5, #8
 8007b4c:	444c      	add	r4, r9
 8007b4e:	1b2d      	subs	r5, r5, r4
 8007b50:	1963      	adds	r3, r4, r5
 8007b52:	42bb      	cmp	r3, r7
 8007b54:	db04      	blt.n	8007b60 <__s2b+0x78>
 8007b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b5a:	340a      	adds	r4, #10
 8007b5c:	2509      	movs	r5, #9
 8007b5e:	e7f6      	b.n	8007b4e <__s2b+0x66>
 8007b60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007b64:	4601      	mov	r1, r0
 8007b66:	3b30      	subs	r3, #48	@ 0x30
 8007b68:	220a      	movs	r2, #10
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	f7ff ff76 	bl	8007a5c <__multadd>
 8007b70:	e7ee      	b.n	8007b50 <__s2b+0x68>
 8007b72:	bf00      	nop
 8007b74:	08009451 	.word	0x08009451
 8007b78:	08009527 	.word	0x08009527

08007b7c <__hi0bits>:
 8007b7c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007b80:	4603      	mov	r3, r0
 8007b82:	bf36      	itet	cc
 8007b84:	0403      	lslcc	r3, r0, #16
 8007b86:	2000      	movcs	r0, #0
 8007b88:	2010      	movcc	r0, #16
 8007b8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b8e:	bf3c      	itt	cc
 8007b90:	021b      	lslcc	r3, r3, #8
 8007b92:	3008      	addcc	r0, #8
 8007b94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b98:	bf3c      	itt	cc
 8007b9a:	011b      	lslcc	r3, r3, #4
 8007b9c:	3004      	addcc	r0, #4
 8007b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ba2:	bf3c      	itt	cc
 8007ba4:	009b      	lslcc	r3, r3, #2
 8007ba6:	3002      	addcc	r0, #2
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	db05      	blt.n	8007bb8 <__hi0bits+0x3c>
 8007bac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007bb0:	f100 0001 	add.w	r0, r0, #1
 8007bb4:	bf08      	it	eq
 8007bb6:	2020      	moveq	r0, #32
 8007bb8:	4770      	bx	lr

08007bba <__lo0bits>:
 8007bba:	6803      	ldr	r3, [r0, #0]
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	f013 0007 	ands.w	r0, r3, #7
 8007bc2:	d00b      	beq.n	8007bdc <__lo0bits+0x22>
 8007bc4:	07d9      	lsls	r1, r3, #31
 8007bc6:	d421      	bmi.n	8007c0c <__lo0bits+0x52>
 8007bc8:	0798      	lsls	r0, r3, #30
 8007bca:	bf49      	itett	mi
 8007bcc:	085b      	lsrmi	r3, r3, #1
 8007bce:	089b      	lsrpl	r3, r3, #2
 8007bd0:	2001      	movmi	r0, #1
 8007bd2:	6013      	strmi	r3, [r2, #0]
 8007bd4:	bf5c      	itt	pl
 8007bd6:	6013      	strpl	r3, [r2, #0]
 8007bd8:	2002      	movpl	r0, #2
 8007bda:	4770      	bx	lr
 8007bdc:	b299      	uxth	r1, r3
 8007bde:	b909      	cbnz	r1, 8007be4 <__lo0bits+0x2a>
 8007be0:	0c1b      	lsrs	r3, r3, #16
 8007be2:	2010      	movs	r0, #16
 8007be4:	b2d9      	uxtb	r1, r3
 8007be6:	b909      	cbnz	r1, 8007bec <__lo0bits+0x32>
 8007be8:	3008      	adds	r0, #8
 8007bea:	0a1b      	lsrs	r3, r3, #8
 8007bec:	0719      	lsls	r1, r3, #28
 8007bee:	bf04      	itt	eq
 8007bf0:	091b      	lsreq	r3, r3, #4
 8007bf2:	3004      	addeq	r0, #4
 8007bf4:	0799      	lsls	r1, r3, #30
 8007bf6:	bf04      	itt	eq
 8007bf8:	089b      	lsreq	r3, r3, #2
 8007bfa:	3002      	addeq	r0, #2
 8007bfc:	07d9      	lsls	r1, r3, #31
 8007bfe:	d403      	bmi.n	8007c08 <__lo0bits+0x4e>
 8007c00:	085b      	lsrs	r3, r3, #1
 8007c02:	f100 0001 	add.w	r0, r0, #1
 8007c06:	d003      	beq.n	8007c10 <__lo0bits+0x56>
 8007c08:	6013      	str	r3, [r2, #0]
 8007c0a:	4770      	bx	lr
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	4770      	bx	lr
 8007c10:	2020      	movs	r0, #32
 8007c12:	4770      	bx	lr

08007c14 <__i2b>:
 8007c14:	b510      	push	{r4, lr}
 8007c16:	460c      	mov	r4, r1
 8007c18:	2101      	movs	r1, #1
 8007c1a:	f7ff febd 	bl	8007998 <_Balloc>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	b928      	cbnz	r0, 8007c2e <__i2b+0x1a>
 8007c22:	4b05      	ldr	r3, [pc, #20]	@ (8007c38 <__i2b+0x24>)
 8007c24:	4805      	ldr	r0, [pc, #20]	@ (8007c3c <__i2b+0x28>)
 8007c26:	f240 1145 	movw	r1, #325	@ 0x145
 8007c2a:	f000 fd59 	bl	80086e0 <__assert_func>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	6144      	str	r4, [r0, #20]
 8007c32:	6103      	str	r3, [r0, #16]
 8007c34:	bd10      	pop	{r4, pc}
 8007c36:	bf00      	nop
 8007c38:	08009451 	.word	0x08009451
 8007c3c:	08009527 	.word	0x08009527

08007c40 <__multiply>:
 8007c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c44:	4614      	mov	r4, r2
 8007c46:	690a      	ldr	r2, [r1, #16]
 8007c48:	6923      	ldr	r3, [r4, #16]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	bfa8      	it	ge
 8007c4e:	4623      	movge	r3, r4
 8007c50:	460f      	mov	r7, r1
 8007c52:	bfa4      	itt	ge
 8007c54:	460c      	movge	r4, r1
 8007c56:	461f      	movge	r7, r3
 8007c58:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007c5c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007c60:	68a3      	ldr	r3, [r4, #8]
 8007c62:	6861      	ldr	r1, [r4, #4]
 8007c64:	eb0a 0609 	add.w	r6, sl, r9
 8007c68:	42b3      	cmp	r3, r6
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	bfb8      	it	lt
 8007c6e:	3101      	addlt	r1, #1
 8007c70:	f7ff fe92 	bl	8007998 <_Balloc>
 8007c74:	b930      	cbnz	r0, 8007c84 <__multiply+0x44>
 8007c76:	4602      	mov	r2, r0
 8007c78:	4b44      	ldr	r3, [pc, #272]	@ (8007d8c <__multiply+0x14c>)
 8007c7a:	4845      	ldr	r0, [pc, #276]	@ (8007d90 <__multiply+0x150>)
 8007c7c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007c80:	f000 fd2e 	bl	80086e0 <__assert_func>
 8007c84:	f100 0514 	add.w	r5, r0, #20
 8007c88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c8c:	462b      	mov	r3, r5
 8007c8e:	2200      	movs	r2, #0
 8007c90:	4543      	cmp	r3, r8
 8007c92:	d321      	bcc.n	8007cd8 <__multiply+0x98>
 8007c94:	f107 0114 	add.w	r1, r7, #20
 8007c98:	f104 0214 	add.w	r2, r4, #20
 8007c9c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007ca0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007ca4:	9302      	str	r3, [sp, #8]
 8007ca6:	1b13      	subs	r3, r2, r4
 8007ca8:	3b15      	subs	r3, #21
 8007caa:	f023 0303 	bic.w	r3, r3, #3
 8007cae:	3304      	adds	r3, #4
 8007cb0:	f104 0715 	add.w	r7, r4, #21
 8007cb4:	42ba      	cmp	r2, r7
 8007cb6:	bf38      	it	cc
 8007cb8:	2304      	movcc	r3, #4
 8007cba:	9301      	str	r3, [sp, #4]
 8007cbc:	9b02      	ldr	r3, [sp, #8]
 8007cbe:	9103      	str	r1, [sp, #12]
 8007cc0:	428b      	cmp	r3, r1
 8007cc2:	d80c      	bhi.n	8007cde <__multiply+0x9e>
 8007cc4:	2e00      	cmp	r6, #0
 8007cc6:	dd03      	ble.n	8007cd0 <__multiply+0x90>
 8007cc8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d05b      	beq.n	8007d88 <__multiply+0x148>
 8007cd0:	6106      	str	r6, [r0, #16]
 8007cd2:	b005      	add	sp, #20
 8007cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd8:	f843 2b04 	str.w	r2, [r3], #4
 8007cdc:	e7d8      	b.n	8007c90 <__multiply+0x50>
 8007cde:	f8b1 a000 	ldrh.w	sl, [r1]
 8007ce2:	f1ba 0f00 	cmp.w	sl, #0
 8007ce6:	d024      	beq.n	8007d32 <__multiply+0xf2>
 8007ce8:	f104 0e14 	add.w	lr, r4, #20
 8007cec:	46a9      	mov	r9, r5
 8007cee:	f04f 0c00 	mov.w	ip, #0
 8007cf2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007cf6:	f8d9 3000 	ldr.w	r3, [r9]
 8007cfa:	fa1f fb87 	uxth.w	fp, r7
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	fb0a 330b 	mla	r3, sl, fp, r3
 8007d04:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007d08:	f8d9 7000 	ldr.w	r7, [r9]
 8007d0c:	4463      	add	r3, ip
 8007d0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007d12:	fb0a c70b 	mla	r7, sl, fp, ip
 8007d16:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d20:	4572      	cmp	r2, lr
 8007d22:	f849 3b04 	str.w	r3, [r9], #4
 8007d26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007d2a:	d8e2      	bhi.n	8007cf2 <__multiply+0xb2>
 8007d2c:	9b01      	ldr	r3, [sp, #4]
 8007d2e:	f845 c003 	str.w	ip, [r5, r3]
 8007d32:	9b03      	ldr	r3, [sp, #12]
 8007d34:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007d38:	3104      	adds	r1, #4
 8007d3a:	f1b9 0f00 	cmp.w	r9, #0
 8007d3e:	d021      	beq.n	8007d84 <__multiply+0x144>
 8007d40:	682b      	ldr	r3, [r5, #0]
 8007d42:	f104 0c14 	add.w	ip, r4, #20
 8007d46:	46ae      	mov	lr, r5
 8007d48:	f04f 0a00 	mov.w	sl, #0
 8007d4c:	f8bc b000 	ldrh.w	fp, [ip]
 8007d50:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007d54:	fb09 770b 	mla	r7, r9, fp, r7
 8007d58:	4457      	add	r7, sl
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d60:	f84e 3b04 	str.w	r3, [lr], #4
 8007d64:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d6c:	f8be 3000 	ldrh.w	r3, [lr]
 8007d70:	fb09 330a 	mla	r3, r9, sl, r3
 8007d74:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007d78:	4562      	cmp	r2, ip
 8007d7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d7e:	d8e5      	bhi.n	8007d4c <__multiply+0x10c>
 8007d80:	9f01      	ldr	r7, [sp, #4]
 8007d82:	51eb      	str	r3, [r5, r7]
 8007d84:	3504      	adds	r5, #4
 8007d86:	e799      	b.n	8007cbc <__multiply+0x7c>
 8007d88:	3e01      	subs	r6, #1
 8007d8a:	e79b      	b.n	8007cc4 <__multiply+0x84>
 8007d8c:	08009451 	.word	0x08009451
 8007d90:	08009527 	.word	0x08009527

08007d94 <__pow5mult>:
 8007d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d98:	4615      	mov	r5, r2
 8007d9a:	f012 0203 	ands.w	r2, r2, #3
 8007d9e:	4607      	mov	r7, r0
 8007da0:	460e      	mov	r6, r1
 8007da2:	d007      	beq.n	8007db4 <__pow5mult+0x20>
 8007da4:	4c25      	ldr	r4, [pc, #148]	@ (8007e3c <__pow5mult+0xa8>)
 8007da6:	3a01      	subs	r2, #1
 8007da8:	2300      	movs	r3, #0
 8007daa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007dae:	f7ff fe55 	bl	8007a5c <__multadd>
 8007db2:	4606      	mov	r6, r0
 8007db4:	10ad      	asrs	r5, r5, #2
 8007db6:	d03d      	beq.n	8007e34 <__pow5mult+0xa0>
 8007db8:	69fc      	ldr	r4, [r7, #28]
 8007dba:	b97c      	cbnz	r4, 8007ddc <__pow5mult+0x48>
 8007dbc:	2010      	movs	r0, #16
 8007dbe:	f7fd f879 	bl	8004eb4 <malloc>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	61f8      	str	r0, [r7, #28]
 8007dc6:	b928      	cbnz	r0, 8007dd4 <__pow5mult+0x40>
 8007dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8007e40 <__pow5mult+0xac>)
 8007dca:	481e      	ldr	r0, [pc, #120]	@ (8007e44 <__pow5mult+0xb0>)
 8007dcc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007dd0:	f000 fc86 	bl	80086e0 <__assert_func>
 8007dd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007dd8:	6004      	str	r4, [r0, #0]
 8007dda:	60c4      	str	r4, [r0, #12]
 8007ddc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007de0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007de4:	b94c      	cbnz	r4, 8007dfa <__pow5mult+0x66>
 8007de6:	f240 2171 	movw	r1, #625	@ 0x271
 8007dea:	4638      	mov	r0, r7
 8007dec:	f7ff ff12 	bl	8007c14 <__i2b>
 8007df0:	2300      	movs	r3, #0
 8007df2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007df6:	4604      	mov	r4, r0
 8007df8:	6003      	str	r3, [r0, #0]
 8007dfa:	f04f 0900 	mov.w	r9, #0
 8007dfe:	07eb      	lsls	r3, r5, #31
 8007e00:	d50a      	bpl.n	8007e18 <__pow5mult+0x84>
 8007e02:	4631      	mov	r1, r6
 8007e04:	4622      	mov	r2, r4
 8007e06:	4638      	mov	r0, r7
 8007e08:	f7ff ff1a 	bl	8007c40 <__multiply>
 8007e0c:	4631      	mov	r1, r6
 8007e0e:	4680      	mov	r8, r0
 8007e10:	4638      	mov	r0, r7
 8007e12:	f7ff fe01 	bl	8007a18 <_Bfree>
 8007e16:	4646      	mov	r6, r8
 8007e18:	106d      	asrs	r5, r5, #1
 8007e1a:	d00b      	beq.n	8007e34 <__pow5mult+0xa0>
 8007e1c:	6820      	ldr	r0, [r4, #0]
 8007e1e:	b938      	cbnz	r0, 8007e30 <__pow5mult+0x9c>
 8007e20:	4622      	mov	r2, r4
 8007e22:	4621      	mov	r1, r4
 8007e24:	4638      	mov	r0, r7
 8007e26:	f7ff ff0b 	bl	8007c40 <__multiply>
 8007e2a:	6020      	str	r0, [r4, #0]
 8007e2c:	f8c0 9000 	str.w	r9, [r0]
 8007e30:	4604      	mov	r4, r0
 8007e32:	e7e4      	b.n	8007dfe <__pow5mult+0x6a>
 8007e34:	4630      	mov	r0, r6
 8007e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e3a:	bf00      	nop
 8007e3c:	08009580 	.word	0x08009580
 8007e40:	08009510 	.word	0x08009510
 8007e44:	08009527 	.word	0x08009527

08007e48 <__lshift>:
 8007e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e4c:	460c      	mov	r4, r1
 8007e4e:	6849      	ldr	r1, [r1, #4]
 8007e50:	6923      	ldr	r3, [r4, #16]
 8007e52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e56:	68a3      	ldr	r3, [r4, #8]
 8007e58:	4607      	mov	r7, r0
 8007e5a:	4691      	mov	r9, r2
 8007e5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e60:	f108 0601 	add.w	r6, r8, #1
 8007e64:	42b3      	cmp	r3, r6
 8007e66:	db0b      	blt.n	8007e80 <__lshift+0x38>
 8007e68:	4638      	mov	r0, r7
 8007e6a:	f7ff fd95 	bl	8007998 <_Balloc>
 8007e6e:	4605      	mov	r5, r0
 8007e70:	b948      	cbnz	r0, 8007e86 <__lshift+0x3e>
 8007e72:	4602      	mov	r2, r0
 8007e74:	4b28      	ldr	r3, [pc, #160]	@ (8007f18 <__lshift+0xd0>)
 8007e76:	4829      	ldr	r0, [pc, #164]	@ (8007f1c <__lshift+0xd4>)
 8007e78:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007e7c:	f000 fc30 	bl	80086e0 <__assert_func>
 8007e80:	3101      	adds	r1, #1
 8007e82:	005b      	lsls	r3, r3, #1
 8007e84:	e7ee      	b.n	8007e64 <__lshift+0x1c>
 8007e86:	2300      	movs	r3, #0
 8007e88:	f100 0114 	add.w	r1, r0, #20
 8007e8c:	f100 0210 	add.w	r2, r0, #16
 8007e90:	4618      	mov	r0, r3
 8007e92:	4553      	cmp	r3, sl
 8007e94:	db33      	blt.n	8007efe <__lshift+0xb6>
 8007e96:	6920      	ldr	r0, [r4, #16]
 8007e98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e9c:	f104 0314 	add.w	r3, r4, #20
 8007ea0:	f019 091f 	ands.w	r9, r9, #31
 8007ea4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ea8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007eac:	d02b      	beq.n	8007f06 <__lshift+0xbe>
 8007eae:	f1c9 0e20 	rsb	lr, r9, #32
 8007eb2:	468a      	mov	sl, r1
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	6818      	ldr	r0, [r3, #0]
 8007eb8:	fa00 f009 	lsl.w	r0, r0, r9
 8007ebc:	4310      	orrs	r0, r2
 8007ebe:	f84a 0b04 	str.w	r0, [sl], #4
 8007ec2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ec6:	459c      	cmp	ip, r3
 8007ec8:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ecc:	d8f3      	bhi.n	8007eb6 <__lshift+0x6e>
 8007ece:	ebac 0304 	sub.w	r3, ip, r4
 8007ed2:	3b15      	subs	r3, #21
 8007ed4:	f023 0303 	bic.w	r3, r3, #3
 8007ed8:	3304      	adds	r3, #4
 8007eda:	f104 0015 	add.w	r0, r4, #21
 8007ede:	4584      	cmp	ip, r0
 8007ee0:	bf38      	it	cc
 8007ee2:	2304      	movcc	r3, #4
 8007ee4:	50ca      	str	r2, [r1, r3]
 8007ee6:	b10a      	cbz	r2, 8007eec <__lshift+0xa4>
 8007ee8:	f108 0602 	add.w	r6, r8, #2
 8007eec:	3e01      	subs	r6, #1
 8007eee:	4638      	mov	r0, r7
 8007ef0:	612e      	str	r6, [r5, #16]
 8007ef2:	4621      	mov	r1, r4
 8007ef4:	f7ff fd90 	bl	8007a18 <_Bfree>
 8007ef8:	4628      	mov	r0, r5
 8007efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007efe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f02:	3301      	adds	r3, #1
 8007f04:	e7c5      	b.n	8007e92 <__lshift+0x4a>
 8007f06:	3904      	subs	r1, #4
 8007f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f10:	459c      	cmp	ip, r3
 8007f12:	d8f9      	bhi.n	8007f08 <__lshift+0xc0>
 8007f14:	e7ea      	b.n	8007eec <__lshift+0xa4>
 8007f16:	bf00      	nop
 8007f18:	08009451 	.word	0x08009451
 8007f1c:	08009527 	.word	0x08009527

08007f20 <__mcmp>:
 8007f20:	690a      	ldr	r2, [r1, #16]
 8007f22:	4603      	mov	r3, r0
 8007f24:	6900      	ldr	r0, [r0, #16]
 8007f26:	1a80      	subs	r0, r0, r2
 8007f28:	b530      	push	{r4, r5, lr}
 8007f2a:	d10e      	bne.n	8007f4a <__mcmp+0x2a>
 8007f2c:	3314      	adds	r3, #20
 8007f2e:	3114      	adds	r1, #20
 8007f30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007f34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007f38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f40:	4295      	cmp	r5, r2
 8007f42:	d003      	beq.n	8007f4c <__mcmp+0x2c>
 8007f44:	d205      	bcs.n	8007f52 <__mcmp+0x32>
 8007f46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f4a:	bd30      	pop	{r4, r5, pc}
 8007f4c:	42a3      	cmp	r3, r4
 8007f4e:	d3f3      	bcc.n	8007f38 <__mcmp+0x18>
 8007f50:	e7fb      	b.n	8007f4a <__mcmp+0x2a>
 8007f52:	2001      	movs	r0, #1
 8007f54:	e7f9      	b.n	8007f4a <__mcmp+0x2a>
	...

08007f58 <__mdiff>:
 8007f58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f5c:	4689      	mov	r9, r1
 8007f5e:	4606      	mov	r6, r0
 8007f60:	4611      	mov	r1, r2
 8007f62:	4648      	mov	r0, r9
 8007f64:	4614      	mov	r4, r2
 8007f66:	f7ff ffdb 	bl	8007f20 <__mcmp>
 8007f6a:	1e05      	subs	r5, r0, #0
 8007f6c:	d112      	bne.n	8007f94 <__mdiff+0x3c>
 8007f6e:	4629      	mov	r1, r5
 8007f70:	4630      	mov	r0, r6
 8007f72:	f7ff fd11 	bl	8007998 <_Balloc>
 8007f76:	4602      	mov	r2, r0
 8007f78:	b928      	cbnz	r0, 8007f86 <__mdiff+0x2e>
 8007f7a:	4b3f      	ldr	r3, [pc, #252]	@ (8008078 <__mdiff+0x120>)
 8007f7c:	f240 2137 	movw	r1, #567	@ 0x237
 8007f80:	483e      	ldr	r0, [pc, #248]	@ (800807c <__mdiff+0x124>)
 8007f82:	f000 fbad 	bl	80086e0 <__assert_func>
 8007f86:	2301      	movs	r3, #1
 8007f88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f8c:	4610      	mov	r0, r2
 8007f8e:	b003      	add	sp, #12
 8007f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f94:	bfbc      	itt	lt
 8007f96:	464b      	movlt	r3, r9
 8007f98:	46a1      	movlt	r9, r4
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007fa0:	bfba      	itte	lt
 8007fa2:	461c      	movlt	r4, r3
 8007fa4:	2501      	movlt	r5, #1
 8007fa6:	2500      	movge	r5, #0
 8007fa8:	f7ff fcf6 	bl	8007998 <_Balloc>
 8007fac:	4602      	mov	r2, r0
 8007fae:	b918      	cbnz	r0, 8007fb8 <__mdiff+0x60>
 8007fb0:	4b31      	ldr	r3, [pc, #196]	@ (8008078 <__mdiff+0x120>)
 8007fb2:	f240 2145 	movw	r1, #581	@ 0x245
 8007fb6:	e7e3      	b.n	8007f80 <__mdiff+0x28>
 8007fb8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007fbc:	6926      	ldr	r6, [r4, #16]
 8007fbe:	60c5      	str	r5, [r0, #12]
 8007fc0:	f109 0310 	add.w	r3, r9, #16
 8007fc4:	f109 0514 	add.w	r5, r9, #20
 8007fc8:	f104 0e14 	add.w	lr, r4, #20
 8007fcc:	f100 0b14 	add.w	fp, r0, #20
 8007fd0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007fd4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007fd8:	9301      	str	r3, [sp, #4]
 8007fda:	46d9      	mov	r9, fp
 8007fdc:	f04f 0c00 	mov.w	ip, #0
 8007fe0:	9b01      	ldr	r3, [sp, #4]
 8007fe2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007fe6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007fea:	9301      	str	r3, [sp, #4]
 8007fec:	fa1f f38a 	uxth.w	r3, sl
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	b283      	uxth	r3, r0
 8007ff4:	1acb      	subs	r3, r1, r3
 8007ff6:	0c00      	lsrs	r0, r0, #16
 8007ff8:	4463      	add	r3, ip
 8007ffa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007ffe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008002:	b29b      	uxth	r3, r3
 8008004:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008008:	4576      	cmp	r6, lr
 800800a:	f849 3b04 	str.w	r3, [r9], #4
 800800e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008012:	d8e5      	bhi.n	8007fe0 <__mdiff+0x88>
 8008014:	1b33      	subs	r3, r6, r4
 8008016:	3b15      	subs	r3, #21
 8008018:	f023 0303 	bic.w	r3, r3, #3
 800801c:	3415      	adds	r4, #21
 800801e:	3304      	adds	r3, #4
 8008020:	42a6      	cmp	r6, r4
 8008022:	bf38      	it	cc
 8008024:	2304      	movcc	r3, #4
 8008026:	441d      	add	r5, r3
 8008028:	445b      	add	r3, fp
 800802a:	461e      	mov	r6, r3
 800802c:	462c      	mov	r4, r5
 800802e:	4544      	cmp	r4, r8
 8008030:	d30e      	bcc.n	8008050 <__mdiff+0xf8>
 8008032:	f108 0103 	add.w	r1, r8, #3
 8008036:	1b49      	subs	r1, r1, r5
 8008038:	f021 0103 	bic.w	r1, r1, #3
 800803c:	3d03      	subs	r5, #3
 800803e:	45a8      	cmp	r8, r5
 8008040:	bf38      	it	cc
 8008042:	2100      	movcc	r1, #0
 8008044:	440b      	add	r3, r1
 8008046:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800804a:	b191      	cbz	r1, 8008072 <__mdiff+0x11a>
 800804c:	6117      	str	r7, [r2, #16]
 800804e:	e79d      	b.n	8007f8c <__mdiff+0x34>
 8008050:	f854 1b04 	ldr.w	r1, [r4], #4
 8008054:	46e6      	mov	lr, ip
 8008056:	0c08      	lsrs	r0, r1, #16
 8008058:	fa1c fc81 	uxtah	ip, ip, r1
 800805c:	4471      	add	r1, lr
 800805e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008062:	b289      	uxth	r1, r1
 8008064:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008068:	f846 1b04 	str.w	r1, [r6], #4
 800806c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008070:	e7dd      	b.n	800802e <__mdiff+0xd6>
 8008072:	3f01      	subs	r7, #1
 8008074:	e7e7      	b.n	8008046 <__mdiff+0xee>
 8008076:	bf00      	nop
 8008078:	08009451 	.word	0x08009451
 800807c:	08009527 	.word	0x08009527

08008080 <__ulp>:
 8008080:	b082      	sub	sp, #8
 8008082:	ed8d 0b00 	vstr	d0, [sp]
 8008086:	9a01      	ldr	r2, [sp, #4]
 8008088:	4b0f      	ldr	r3, [pc, #60]	@ (80080c8 <__ulp+0x48>)
 800808a:	4013      	ands	r3, r2
 800808c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008090:	2b00      	cmp	r3, #0
 8008092:	dc08      	bgt.n	80080a6 <__ulp+0x26>
 8008094:	425b      	negs	r3, r3
 8008096:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800809a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800809e:	da04      	bge.n	80080aa <__ulp+0x2a>
 80080a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80080a4:	4113      	asrs	r3, r2
 80080a6:	2200      	movs	r2, #0
 80080a8:	e008      	b.n	80080bc <__ulp+0x3c>
 80080aa:	f1a2 0314 	sub.w	r3, r2, #20
 80080ae:	2b1e      	cmp	r3, #30
 80080b0:	bfda      	itte	le
 80080b2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80080b6:	40da      	lsrle	r2, r3
 80080b8:	2201      	movgt	r2, #1
 80080ba:	2300      	movs	r3, #0
 80080bc:	4619      	mov	r1, r3
 80080be:	4610      	mov	r0, r2
 80080c0:	ec41 0b10 	vmov	d0, r0, r1
 80080c4:	b002      	add	sp, #8
 80080c6:	4770      	bx	lr
 80080c8:	7ff00000 	.word	0x7ff00000

080080cc <__b2d>:
 80080cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080d0:	6906      	ldr	r6, [r0, #16]
 80080d2:	f100 0814 	add.w	r8, r0, #20
 80080d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80080da:	1f37      	subs	r7, r6, #4
 80080dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80080e0:	4610      	mov	r0, r2
 80080e2:	f7ff fd4b 	bl	8007b7c <__hi0bits>
 80080e6:	f1c0 0320 	rsb	r3, r0, #32
 80080ea:	280a      	cmp	r0, #10
 80080ec:	600b      	str	r3, [r1, #0]
 80080ee:	491b      	ldr	r1, [pc, #108]	@ (800815c <__b2d+0x90>)
 80080f0:	dc15      	bgt.n	800811e <__b2d+0x52>
 80080f2:	f1c0 0c0b 	rsb	ip, r0, #11
 80080f6:	fa22 f30c 	lsr.w	r3, r2, ip
 80080fa:	45b8      	cmp	r8, r7
 80080fc:	ea43 0501 	orr.w	r5, r3, r1
 8008100:	bf34      	ite	cc
 8008102:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008106:	2300      	movcs	r3, #0
 8008108:	3015      	adds	r0, #21
 800810a:	fa02 f000 	lsl.w	r0, r2, r0
 800810e:	fa23 f30c 	lsr.w	r3, r3, ip
 8008112:	4303      	orrs	r3, r0
 8008114:	461c      	mov	r4, r3
 8008116:	ec45 4b10 	vmov	d0, r4, r5
 800811a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800811e:	45b8      	cmp	r8, r7
 8008120:	bf3a      	itte	cc
 8008122:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008126:	f1a6 0708 	subcc.w	r7, r6, #8
 800812a:	2300      	movcs	r3, #0
 800812c:	380b      	subs	r0, #11
 800812e:	d012      	beq.n	8008156 <__b2d+0x8a>
 8008130:	f1c0 0120 	rsb	r1, r0, #32
 8008134:	fa23 f401 	lsr.w	r4, r3, r1
 8008138:	4082      	lsls	r2, r0
 800813a:	4322      	orrs	r2, r4
 800813c:	4547      	cmp	r7, r8
 800813e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008142:	bf8c      	ite	hi
 8008144:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008148:	2200      	movls	r2, #0
 800814a:	4083      	lsls	r3, r0
 800814c:	40ca      	lsrs	r2, r1
 800814e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008152:	4313      	orrs	r3, r2
 8008154:	e7de      	b.n	8008114 <__b2d+0x48>
 8008156:	ea42 0501 	orr.w	r5, r2, r1
 800815a:	e7db      	b.n	8008114 <__b2d+0x48>
 800815c:	3ff00000 	.word	0x3ff00000

08008160 <__d2b>:
 8008160:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008164:	460f      	mov	r7, r1
 8008166:	2101      	movs	r1, #1
 8008168:	ec59 8b10 	vmov	r8, r9, d0
 800816c:	4616      	mov	r6, r2
 800816e:	f7ff fc13 	bl	8007998 <_Balloc>
 8008172:	4604      	mov	r4, r0
 8008174:	b930      	cbnz	r0, 8008184 <__d2b+0x24>
 8008176:	4602      	mov	r2, r0
 8008178:	4b23      	ldr	r3, [pc, #140]	@ (8008208 <__d2b+0xa8>)
 800817a:	4824      	ldr	r0, [pc, #144]	@ (800820c <__d2b+0xac>)
 800817c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008180:	f000 faae 	bl	80086e0 <__assert_func>
 8008184:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008188:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800818c:	b10d      	cbz	r5, 8008192 <__d2b+0x32>
 800818e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008192:	9301      	str	r3, [sp, #4]
 8008194:	f1b8 0300 	subs.w	r3, r8, #0
 8008198:	d023      	beq.n	80081e2 <__d2b+0x82>
 800819a:	4668      	mov	r0, sp
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	f7ff fd0c 	bl	8007bba <__lo0bits>
 80081a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80081a6:	b1d0      	cbz	r0, 80081de <__d2b+0x7e>
 80081a8:	f1c0 0320 	rsb	r3, r0, #32
 80081ac:	fa02 f303 	lsl.w	r3, r2, r3
 80081b0:	430b      	orrs	r3, r1
 80081b2:	40c2      	lsrs	r2, r0
 80081b4:	6163      	str	r3, [r4, #20]
 80081b6:	9201      	str	r2, [sp, #4]
 80081b8:	9b01      	ldr	r3, [sp, #4]
 80081ba:	61a3      	str	r3, [r4, #24]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	bf0c      	ite	eq
 80081c0:	2201      	moveq	r2, #1
 80081c2:	2202      	movne	r2, #2
 80081c4:	6122      	str	r2, [r4, #16]
 80081c6:	b1a5      	cbz	r5, 80081f2 <__d2b+0x92>
 80081c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80081cc:	4405      	add	r5, r0
 80081ce:	603d      	str	r5, [r7, #0]
 80081d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80081d4:	6030      	str	r0, [r6, #0]
 80081d6:	4620      	mov	r0, r4
 80081d8:	b003      	add	sp, #12
 80081da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081de:	6161      	str	r1, [r4, #20]
 80081e0:	e7ea      	b.n	80081b8 <__d2b+0x58>
 80081e2:	a801      	add	r0, sp, #4
 80081e4:	f7ff fce9 	bl	8007bba <__lo0bits>
 80081e8:	9b01      	ldr	r3, [sp, #4]
 80081ea:	6163      	str	r3, [r4, #20]
 80081ec:	3020      	adds	r0, #32
 80081ee:	2201      	movs	r2, #1
 80081f0:	e7e8      	b.n	80081c4 <__d2b+0x64>
 80081f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80081f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80081fa:	6038      	str	r0, [r7, #0]
 80081fc:	6918      	ldr	r0, [r3, #16]
 80081fe:	f7ff fcbd 	bl	8007b7c <__hi0bits>
 8008202:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008206:	e7e5      	b.n	80081d4 <__d2b+0x74>
 8008208:	08009451 	.word	0x08009451
 800820c:	08009527 	.word	0x08009527

08008210 <__ratio>:
 8008210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008214:	b085      	sub	sp, #20
 8008216:	e9cd 1000 	strd	r1, r0, [sp]
 800821a:	a902      	add	r1, sp, #8
 800821c:	f7ff ff56 	bl	80080cc <__b2d>
 8008220:	9800      	ldr	r0, [sp, #0]
 8008222:	a903      	add	r1, sp, #12
 8008224:	ec55 4b10 	vmov	r4, r5, d0
 8008228:	f7ff ff50 	bl	80080cc <__b2d>
 800822c:	9b01      	ldr	r3, [sp, #4]
 800822e:	6919      	ldr	r1, [r3, #16]
 8008230:	9b00      	ldr	r3, [sp, #0]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	1ac9      	subs	r1, r1, r3
 8008236:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800823a:	1a9b      	subs	r3, r3, r2
 800823c:	ec5b ab10 	vmov	sl, fp, d0
 8008240:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008244:	2b00      	cmp	r3, #0
 8008246:	bfce      	itee	gt
 8008248:	462a      	movgt	r2, r5
 800824a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800824e:	465a      	movle	r2, fp
 8008250:	462f      	mov	r7, r5
 8008252:	46d9      	mov	r9, fp
 8008254:	bfcc      	ite	gt
 8008256:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800825a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800825e:	464b      	mov	r3, r9
 8008260:	4652      	mov	r2, sl
 8008262:	4620      	mov	r0, r4
 8008264:	4639      	mov	r1, r7
 8008266:	f7f8 fb21 	bl	80008ac <__aeabi_ddiv>
 800826a:	ec41 0b10 	vmov	d0, r0, r1
 800826e:	b005      	add	sp, #20
 8008270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008274 <__copybits>:
 8008274:	3901      	subs	r1, #1
 8008276:	b570      	push	{r4, r5, r6, lr}
 8008278:	1149      	asrs	r1, r1, #5
 800827a:	6914      	ldr	r4, [r2, #16]
 800827c:	3101      	adds	r1, #1
 800827e:	f102 0314 	add.w	r3, r2, #20
 8008282:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008286:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800828a:	1f05      	subs	r5, r0, #4
 800828c:	42a3      	cmp	r3, r4
 800828e:	d30c      	bcc.n	80082aa <__copybits+0x36>
 8008290:	1aa3      	subs	r3, r4, r2
 8008292:	3b11      	subs	r3, #17
 8008294:	f023 0303 	bic.w	r3, r3, #3
 8008298:	3211      	adds	r2, #17
 800829a:	42a2      	cmp	r2, r4
 800829c:	bf88      	it	hi
 800829e:	2300      	movhi	r3, #0
 80082a0:	4418      	add	r0, r3
 80082a2:	2300      	movs	r3, #0
 80082a4:	4288      	cmp	r0, r1
 80082a6:	d305      	bcc.n	80082b4 <__copybits+0x40>
 80082a8:	bd70      	pop	{r4, r5, r6, pc}
 80082aa:	f853 6b04 	ldr.w	r6, [r3], #4
 80082ae:	f845 6f04 	str.w	r6, [r5, #4]!
 80082b2:	e7eb      	b.n	800828c <__copybits+0x18>
 80082b4:	f840 3b04 	str.w	r3, [r0], #4
 80082b8:	e7f4      	b.n	80082a4 <__copybits+0x30>

080082ba <__any_on>:
 80082ba:	f100 0214 	add.w	r2, r0, #20
 80082be:	6900      	ldr	r0, [r0, #16]
 80082c0:	114b      	asrs	r3, r1, #5
 80082c2:	4298      	cmp	r0, r3
 80082c4:	b510      	push	{r4, lr}
 80082c6:	db11      	blt.n	80082ec <__any_on+0x32>
 80082c8:	dd0a      	ble.n	80082e0 <__any_on+0x26>
 80082ca:	f011 011f 	ands.w	r1, r1, #31
 80082ce:	d007      	beq.n	80082e0 <__any_on+0x26>
 80082d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80082d4:	fa24 f001 	lsr.w	r0, r4, r1
 80082d8:	fa00 f101 	lsl.w	r1, r0, r1
 80082dc:	428c      	cmp	r4, r1
 80082de:	d10b      	bne.n	80082f8 <__any_on+0x3e>
 80082e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d803      	bhi.n	80082f0 <__any_on+0x36>
 80082e8:	2000      	movs	r0, #0
 80082ea:	bd10      	pop	{r4, pc}
 80082ec:	4603      	mov	r3, r0
 80082ee:	e7f7      	b.n	80082e0 <__any_on+0x26>
 80082f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082f4:	2900      	cmp	r1, #0
 80082f6:	d0f5      	beq.n	80082e4 <__any_on+0x2a>
 80082f8:	2001      	movs	r0, #1
 80082fa:	e7f6      	b.n	80082ea <__any_on+0x30>

080082fc <_malloc_usable_size_r>:
 80082fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008300:	1f18      	subs	r0, r3, #4
 8008302:	2b00      	cmp	r3, #0
 8008304:	bfbc      	itt	lt
 8008306:	580b      	ldrlt	r3, [r1, r0]
 8008308:	18c0      	addlt	r0, r0, r3
 800830a:	4770      	bx	lr

0800830c <__submore>:
 800830c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008310:	460c      	mov	r4, r1
 8008312:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008314:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008318:	4299      	cmp	r1, r3
 800831a:	d11d      	bne.n	8008358 <__submore+0x4c>
 800831c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008320:	f7fc fdfa 	bl	8004f18 <_malloc_r>
 8008324:	b918      	cbnz	r0, 800832e <__submore+0x22>
 8008326:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800832a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800832e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008332:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008334:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8008338:	6360      	str	r0, [r4, #52]	@ 0x34
 800833a:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800833e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008342:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8008346:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800834a:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800834e:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8008352:	6020      	str	r0, [r4, #0]
 8008354:	2000      	movs	r0, #0
 8008356:	e7e8      	b.n	800832a <__submore+0x1e>
 8008358:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800835a:	0077      	lsls	r7, r6, #1
 800835c:	463a      	mov	r2, r7
 800835e:	f7fc ffb5 	bl	80052cc <_realloc_r>
 8008362:	4605      	mov	r5, r0
 8008364:	2800      	cmp	r0, #0
 8008366:	d0de      	beq.n	8008326 <__submore+0x1a>
 8008368:	eb00 0806 	add.w	r8, r0, r6
 800836c:	4601      	mov	r1, r0
 800836e:	4632      	mov	r2, r6
 8008370:	4640      	mov	r0, r8
 8008372:	f7fd ff3e 	bl	80061f2 <memcpy>
 8008376:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800837a:	f8c4 8000 	str.w	r8, [r4]
 800837e:	e7e9      	b.n	8008354 <__submore+0x48>

08008380 <_strtoul_l.constprop.0>:
 8008380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008384:	4e34      	ldr	r6, [pc, #208]	@ (8008458 <_strtoul_l.constprop.0+0xd8>)
 8008386:	4686      	mov	lr, r0
 8008388:	460d      	mov	r5, r1
 800838a:	4628      	mov	r0, r5
 800838c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008390:	5d37      	ldrb	r7, [r6, r4]
 8008392:	f017 0708 	ands.w	r7, r7, #8
 8008396:	d1f8      	bne.n	800838a <_strtoul_l.constprop.0+0xa>
 8008398:	2c2d      	cmp	r4, #45	@ 0x2d
 800839a:	d12f      	bne.n	80083fc <_strtoul_l.constprop.0+0x7c>
 800839c:	782c      	ldrb	r4, [r5, #0]
 800839e:	2701      	movs	r7, #1
 80083a0:	1c85      	adds	r5, r0, #2
 80083a2:	f033 0010 	bics.w	r0, r3, #16
 80083a6:	d109      	bne.n	80083bc <_strtoul_l.constprop.0+0x3c>
 80083a8:	2c30      	cmp	r4, #48	@ 0x30
 80083aa:	d12c      	bne.n	8008406 <_strtoul_l.constprop.0+0x86>
 80083ac:	7828      	ldrb	r0, [r5, #0]
 80083ae:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80083b2:	2858      	cmp	r0, #88	@ 0x58
 80083b4:	d127      	bne.n	8008406 <_strtoul_l.constprop.0+0x86>
 80083b6:	786c      	ldrb	r4, [r5, #1]
 80083b8:	2310      	movs	r3, #16
 80083ba:	3502      	adds	r5, #2
 80083bc:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80083c0:	2600      	movs	r6, #0
 80083c2:	fbb8 f8f3 	udiv	r8, r8, r3
 80083c6:	fb03 f908 	mul.w	r9, r3, r8
 80083ca:	ea6f 0909 	mvn.w	r9, r9
 80083ce:	4630      	mov	r0, r6
 80083d0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80083d4:	f1bc 0f09 	cmp.w	ip, #9
 80083d8:	d81c      	bhi.n	8008414 <_strtoul_l.constprop.0+0x94>
 80083da:	4664      	mov	r4, ip
 80083dc:	42a3      	cmp	r3, r4
 80083de:	dd2a      	ble.n	8008436 <_strtoul_l.constprop.0+0xb6>
 80083e0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80083e4:	d007      	beq.n	80083f6 <_strtoul_l.constprop.0+0x76>
 80083e6:	4580      	cmp	r8, r0
 80083e8:	d322      	bcc.n	8008430 <_strtoul_l.constprop.0+0xb0>
 80083ea:	d101      	bne.n	80083f0 <_strtoul_l.constprop.0+0x70>
 80083ec:	45a1      	cmp	r9, r4
 80083ee:	db1f      	blt.n	8008430 <_strtoul_l.constprop.0+0xb0>
 80083f0:	fb00 4003 	mla	r0, r0, r3, r4
 80083f4:	2601      	movs	r6, #1
 80083f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083fa:	e7e9      	b.n	80083d0 <_strtoul_l.constprop.0+0x50>
 80083fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80083fe:	bf04      	itt	eq
 8008400:	782c      	ldrbeq	r4, [r5, #0]
 8008402:	1c85      	addeq	r5, r0, #2
 8008404:	e7cd      	b.n	80083a2 <_strtoul_l.constprop.0+0x22>
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1d8      	bne.n	80083bc <_strtoul_l.constprop.0+0x3c>
 800840a:	2c30      	cmp	r4, #48	@ 0x30
 800840c:	bf0c      	ite	eq
 800840e:	2308      	moveq	r3, #8
 8008410:	230a      	movne	r3, #10
 8008412:	e7d3      	b.n	80083bc <_strtoul_l.constprop.0+0x3c>
 8008414:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008418:	f1bc 0f19 	cmp.w	ip, #25
 800841c:	d801      	bhi.n	8008422 <_strtoul_l.constprop.0+0xa2>
 800841e:	3c37      	subs	r4, #55	@ 0x37
 8008420:	e7dc      	b.n	80083dc <_strtoul_l.constprop.0+0x5c>
 8008422:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8008426:	f1bc 0f19 	cmp.w	ip, #25
 800842a:	d804      	bhi.n	8008436 <_strtoul_l.constprop.0+0xb6>
 800842c:	3c57      	subs	r4, #87	@ 0x57
 800842e:	e7d5      	b.n	80083dc <_strtoul_l.constprop.0+0x5c>
 8008430:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8008434:	e7df      	b.n	80083f6 <_strtoul_l.constprop.0+0x76>
 8008436:	1c73      	adds	r3, r6, #1
 8008438:	d106      	bne.n	8008448 <_strtoul_l.constprop.0+0xc8>
 800843a:	2322      	movs	r3, #34	@ 0x22
 800843c:	f8ce 3000 	str.w	r3, [lr]
 8008440:	4630      	mov	r0, r6
 8008442:	b932      	cbnz	r2, 8008452 <_strtoul_l.constprop.0+0xd2>
 8008444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008448:	b107      	cbz	r7, 800844c <_strtoul_l.constprop.0+0xcc>
 800844a:	4240      	negs	r0, r0
 800844c:	2a00      	cmp	r2, #0
 800844e:	d0f9      	beq.n	8008444 <_strtoul_l.constprop.0+0xc4>
 8008450:	b106      	cbz	r6, 8008454 <_strtoul_l.constprop.0+0xd4>
 8008452:	1e69      	subs	r1, r5, #1
 8008454:	6011      	str	r1, [r2, #0]
 8008456:	e7f5      	b.n	8008444 <_strtoul_l.constprop.0+0xc4>
 8008458:	08009351 	.word	0x08009351

0800845c <_strtoul_r>:
 800845c:	f7ff bf90 	b.w	8008380 <_strtoul_l.constprop.0>

08008460 <__swbuf_r>:
 8008460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008462:	460e      	mov	r6, r1
 8008464:	4614      	mov	r4, r2
 8008466:	4605      	mov	r5, r0
 8008468:	b118      	cbz	r0, 8008472 <__swbuf_r+0x12>
 800846a:	6a03      	ldr	r3, [r0, #32]
 800846c:	b90b      	cbnz	r3, 8008472 <__swbuf_r+0x12>
 800846e:	f7fc ff03 	bl	8005278 <__sinit>
 8008472:	69a3      	ldr	r3, [r4, #24]
 8008474:	60a3      	str	r3, [r4, #8]
 8008476:	89a3      	ldrh	r3, [r4, #12]
 8008478:	071a      	lsls	r2, r3, #28
 800847a:	d501      	bpl.n	8008480 <__swbuf_r+0x20>
 800847c:	6923      	ldr	r3, [r4, #16]
 800847e:	b943      	cbnz	r3, 8008492 <__swbuf_r+0x32>
 8008480:	4621      	mov	r1, r4
 8008482:	4628      	mov	r0, r5
 8008484:	f000 f82a 	bl	80084dc <__swsetup_r>
 8008488:	b118      	cbz	r0, 8008492 <__swbuf_r+0x32>
 800848a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800848e:	4638      	mov	r0, r7
 8008490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008492:	6823      	ldr	r3, [r4, #0]
 8008494:	6922      	ldr	r2, [r4, #16]
 8008496:	1a98      	subs	r0, r3, r2
 8008498:	6963      	ldr	r3, [r4, #20]
 800849a:	b2f6      	uxtb	r6, r6
 800849c:	4283      	cmp	r3, r0
 800849e:	4637      	mov	r7, r6
 80084a0:	dc05      	bgt.n	80084ae <__swbuf_r+0x4e>
 80084a2:	4621      	mov	r1, r4
 80084a4:	4628      	mov	r0, r5
 80084a6:	f7ff fa4f 	bl	8007948 <_fflush_r>
 80084aa:	2800      	cmp	r0, #0
 80084ac:	d1ed      	bne.n	800848a <__swbuf_r+0x2a>
 80084ae:	68a3      	ldr	r3, [r4, #8]
 80084b0:	3b01      	subs	r3, #1
 80084b2:	60a3      	str	r3, [r4, #8]
 80084b4:	6823      	ldr	r3, [r4, #0]
 80084b6:	1c5a      	adds	r2, r3, #1
 80084b8:	6022      	str	r2, [r4, #0]
 80084ba:	701e      	strb	r6, [r3, #0]
 80084bc:	6962      	ldr	r2, [r4, #20]
 80084be:	1c43      	adds	r3, r0, #1
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d004      	beq.n	80084ce <__swbuf_r+0x6e>
 80084c4:	89a3      	ldrh	r3, [r4, #12]
 80084c6:	07db      	lsls	r3, r3, #31
 80084c8:	d5e1      	bpl.n	800848e <__swbuf_r+0x2e>
 80084ca:	2e0a      	cmp	r6, #10
 80084cc:	d1df      	bne.n	800848e <__swbuf_r+0x2e>
 80084ce:	4621      	mov	r1, r4
 80084d0:	4628      	mov	r0, r5
 80084d2:	f7ff fa39 	bl	8007948 <_fflush_r>
 80084d6:	2800      	cmp	r0, #0
 80084d8:	d0d9      	beq.n	800848e <__swbuf_r+0x2e>
 80084da:	e7d6      	b.n	800848a <__swbuf_r+0x2a>

080084dc <__swsetup_r>:
 80084dc:	b538      	push	{r3, r4, r5, lr}
 80084de:	4b29      	ldr	r3, [pc, #164]	@ (8008584 <__swsetup_r+0xa8>)
 80084e0:	4605      	mov	r5, r0
 80084e2:	6818      	ldr	r0, [r3, #0]
 80084e4:	460c      	mov	r4, r1
 80084e6:	b118      	cbz	r0, 80084f0 <__swsetup_r+0x14>
 80084e8:	6a03      	ldr	r3, [r0, #32]
 80084ea:	b90b      	cbnz	r3, 80084f0 <__swsetup_r+0x14>
 80084ec:	f7fc fec4 	bl	8005278 <__sinit>
 80084f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084f4:	0719      	lsls	r1, r3, #28
 80084f6:	d422      	bmi.n	800853e <__swsetup_r+0x62>
 80084f8:	06da      	lsls	r2, r3, #27
 80084fa:	d407      	bmi.n	800850c <__swsetup_r+0x30>
 80084fc:	2209      	movs	r2, #9
 80084fe:	602a      	str	r2, [r5, #0]
 8008500:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008504:	81a3      	strh	r3, [r4, #12]
 8008506:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800850a:	e033      	b.n	8008574 <__swsetup_r+0x98>
 800850c:	0758      	lsls	r0, r3, #29
 800850e:	d512      	bpl.n	8008536 <__swsetup_r+0x5a>
 8008510:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008512:	b141      	cbz	r1, 8008526 <__swsetup_r+0x4a>
 8008514:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008518:	4299      	cmp	r1, r3
 800851a:	d002      	beq.n	8008522 <__swsetup_r+0x46>
 800851c:	4628      	mov	r0, r5
 800851e:	f7fd fe7f 	bl	8006220 <_free_r>
 8008522:	2300      	movs	r3, #0
 8008524:	6363      	str	r3, [r4, #52]	@ 0x34
 8008526:	89a3      	ldrh	r3, [r4, #12]
 8008528:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800852c:	81a3      	strh	r3, [r4, #12]
 800852e:	2300      	movs	r3, #0
 8008530:	6063      	str	r3, [r4, #4]
 8008532:	6923      	ldr	r3, [r4, #16]
 8008534:	6023      	str	r3, [r4, #0]
 8008536:	89a3      	ldrh	r3, [r4, #12]
 8008538:	f043 0308 	orr.w	r3, r3, #8
 800853c:	81a3      	strh	r3, [r4, #12]
 800853e:	6923      	ldr	r3, [r4, #16]
 8008540:	b94b      	cbnz	r3, 8008556 <__swsetup_r+0x7a>
 8008542:	89a3      	ldrh	r3, [r4, #12]
 8008544:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008548:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800854c:	d003      	beq.n	8008556 <__swsetup_r+0x7a>
 800854e:	4621      	mov	r1, r4
 8008550:	4628      	mov	r0, r5
 8008552:	f000 f84c 	bl	80085ee <__smakebuf_r>
 8008556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800855a:	f013 0201 	ands.w	r2, r3, #1
 800855e:	d00a      	beq.n	8008576 <__swsetup_r+0x9a>
 8008560:	2200      	movs	r2, #0
 8008562:	60a2      	str	r2, [r4, #8]
 8008564:	6962      	ldr	r2, [r4, #20]
 8008566:	4252      	negs	r2, r2
 8008568:	61a2      	str	r2, [r4, #24]
 800856a:	6922      	ldr	r2, [r4, #16]
 800856c:	b942      	cbnz	r2, 8008580 <__swsetup_r+0xa4>
 800856e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008572:	d1c5      	bne.n	8008500 <__swsetup_r+0x24>
 8008574:	bd38      	pop	{r3, r4, r5, pc}
 8008576:	0799      	lsls	r1, r3, #30
 8008578:	bf58      	it	pl
 800857a:	6962      	ldrpl	r2, [r4, #20]
 800857c:	60a2      	str	r2, [r4, #8]
 800857e:	e7f4      	b.n	800856a <__swsetup_r+0x8e>
 8008580:	2000      	movs	r0, #0
 8008582:	e7f7      	b.n	8008574 <__swsetup_r+0x98>
 8008584:	20000194 	.word	0x20000194

08008588 <__ascii_wctomb>:
 8008588:	4603      	mov	r3, r0
 800858a:	4608      	mov	r0, r1
 800858c:	b141      	cbz	r1, 80085a0 <__ascii_wctomb+0x18>
 800858e:	2aff      	cmp	r2, #255	@ 0xff
 8008590:	d904      	bls.n	800859c <__ascii_wctomb+0x14>
 8008592:	228a      	movs	r2, #138	@ 0x8a
 8008594:	601a      	str	r2, [r3, #0]
 8008596:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800859a:	4770      	bx	lr
 800859c:	700a      	strb	r2, [r1, #0]
 800859e:	2001      	movs	r0, #1
 80085a0:	4770      	bx	lr

080085a2 <__swhatbuf_r>:
 80085a2:	b570      	push	{r4, r5, r6, lr}
 80085a4:	460c      	mov	r4, r1
 80085a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085aa:	2900      	cmp	r1, #0
 80085ac:	b096      	sub	sp, #88	@ 0x58
 80085ae:	4615      	mov	r5, r2
 80085b0:	461e      	mov	r6, r3
 80085b2:	da0d      	bge.n	80085d0 <__swhatbuf_r+0x2e>
 80085b4:	89a3      	ldrh	r3, [r4, #12]
 80085b6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80085ba:	f04f 0100 	mov.w	r1, #0
 80085be:	bf14      	ite	ne
 80085c0:	2340      	movne	r3, #64	@ 0x40
 80085c2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80085c6:	2000      	movs	r0, #0
 80085c8:	6031      	str	r1, [r6, #0]
 80085ca:	602b      	str	r3, [r5, #0]
 80085cc:	b016      	add	sp, #88	@ 0x58
 80085ce:	bd70      	pop	{r4, r5, r6, pc}
 80085d0:	466a      	mov	r2, sp
 80085d2:	f000 f863 	bl	800869c <_fstat_r>
 80085d6:	2800      	cmp	r0, #0
 80085d8:	dbec      	blt.n	80085b4 <__swhatbuf_r+0x12>
 80085da:	9901      	ldr	r1, [sp, #4]
 80085dc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80085e0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80085e4:	4259      	negs	r1, r3
 80085e6:	4159      	adcs	r1, r3
 80085e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085ec:	e7eb      	b.n	80085c6 <__swhatbuf_r+0x24>

080085ee <__smakebuf_r>:
 80085ee:	898b      	ldrh	r3, [r1, #12]
 80085f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085f2:	079d      	lsls	r5, r3, #30
 80085f4:	4606      	mov	r6, r0
 80085f6:	460c      	mov	r4, r1
 80085f8:	d507      	bpl.n	800860a <__smakebuf_r+0x1c>
 80085fa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80085fe:	6023      	str	r3, [r4, #0]
 8008600:	6123      	str	r3, [r4, #16]
 8008602:	2301      	movs	r3, #1
 8008604:	6163      	str	r3, [r4, #20]
 8008606:	b003      	add	sp, #12
 8008608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800860a:	ab01      	add	r3, sp, #4
 800860c:	466a      	mov	r2, sp
 800860e:	f7ff ffc8 	bl	80085a2 <__swhatbuf_r>
 8008612:	9f00      	ldr	r7, [sp, #0]
 8008614:	4605      	mov	r5, r0
 8008616:	4639      	mov	r1, r7
 8008618:	4630      	mov	r0, r6
 800861a:	f7fc fc7d 	bl	8004f18 <_malloc_r>
 800861e:	b948      	cbnz	r0, 8008634 <__smakebuf_r+0x46>
 8008620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008624:	059a      	lsls	r2, r3, #22
 8008626:	d4ee      	bmi.n	8008606 <__smakebuf_r+0x18>
 8008628:	f023 0303 	bic.w	r3, r3, #3
 800862c:	f043 0302 	orr.w	r3, r3, #2
 8008630:	81a3      	strh	r3, [r4, #12]
 8008632:	e7e2      	b.n	80085fa <__smakebuf_r+0xc>
 8008634:	89a3      	ldrh	r3, [r4, #12]
 8008636:	6020      	str	r0, [r4, #0]
 8008638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800863c:	81a3      	strh	r3, [r4, #12]
 800863e:	9b01      	ldr	r3, [sp, #4]
 8008640:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008644:	b15b      	cbz	r3, 800865e <__smakebuf_r+0x70>
 8008646:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800864a:	4630      	mov	r0, r6
 800864c:	f000 f838 	bl	80086c0 <_isatty_r>
 8008650:	b128      	cbz	r0, 800865e <__smakebuf_r+0x70>
 8008652:	89a3      	ldrh	r3, [r4, #12]
 8008654:	f023 0303 	bic.w	r3, r3, #3
 8008658:	f043 0301 	orr.w	r3, r3, #1
 800865c:	81a3      	strh	r3, [r4, #12]
 800865e:	89a3      	ldrh	r3, [r4, #12]
 8008660:	431d      	orrs	r5, r3
 8008662:	81a5      	strh	r5, [r4, #12]
 8008664:	e7cf      	b.n	8008606 <__smakebuf_r+0x18>

08008666 <memmove>:
 8008666:	4288      	cmp	r0, r1
 8008668:	b510      	push	{r4, lr}
 800866a:	eb01 0402 	add.w	r4, r1, r2
 800866e:	d902      	bls.n	8008676 <memmove+0x10>
 8008670:	4284      	cmp	r4, r0
 8008672:	4623      	mov	r3, r4
 8008674:	d807      	bhi.n	8008686 <memmove+0x20>
 8008676:	1e43      	subs	r3, r0, #1
 8008678:	42a1      	cmp	r1, r4
 800867a:	d008      	beq.n	800868e <memmove+0x28>
 800867c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008680:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008684:	e7f8      	b.n	8008678 <memmove+0x12>
 8008686:	4402      	add	r2, r0
 8008688:	4601      	mov	r1, r0
 800868a:	428a      	cmp	r2, r1
 800868c:	d100      	bne.n	8008690 <memmove+0x2a>
 800868e:	bd10      	pop	{r4, pc}
 8008690:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008694:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008698:	e7f7      	b.n	800868a <memmove+0x24>
	...

0800869c <_fstat_r>:
 800869c:	b538      	push	{r3, r4, r5, lr}
 800869e:	4d07      	ldr	r5, [pc, #28]	@ (80086bc <_fstat_r+0x20>)
 80086a0:	2300      	movs	r3, #0
 80086a2:	4604      	mov	r4, r0
 80086a4:	4608      	mov	r0, r1
 80086a6:	4611      	mov	r1, r2
 80086a8:	602b      	str	r3, [r5, #0]
 80086aa:	f7fa ff0a 	bl	80034c2 <_fstat>
 80086ae:	1c43      	adds	r3, r0, #1
 80086b0:	d102      	bne.n	80086b8 <_fstat_r+0x1c>
 80086b2:	682b      	ldr	r3, [r5, #0]
 80086b4:	b103      	cbz	r3, 80086b8 <_fstat_r+0x1c>
 80086b6:	6023      	str	r3, [r4, #0]
 80086b8:	bd38      	pop	{r3, r4, r5, pc}
 80086ba:	bf00      	nop
 80086bc:	20005750 	.word	0x20005750

080086c0 <_isatty_r>:
 80086c0:	b538      	push	{r3, r4, r5, lr}
 80086c2:	4d06      	ldr	r5, [pc, #24]	@ (80086dc <_isatty_r+0x1c>)
 80086c4:	2300      	movs	r3, #0
 80086c6:	4604      	mov	r4, r0
 80086c8:	4608      	mov	r0, r1
 80086ca:	602b      	str	r3, [r5, #0]
 80086cc:	f7fa ff09 	bl	80034e2 <_isatty>
 80086d0:	1c43      	adds	r3, r0, #1
 80086d2:	d102      	bne.n	80086da <_isatty_r+0x1a>
 80086d4:	682b      	ldr	r3, [r5, #0]
 80086d6:	b103      	cbz	r3, 80086da <_isatty_r+0x1a>
 80086d8:	6023      	str	r3, [r4, #0]
 80086da:	bd38      	pop	{r3, r4, r5, pc}
 80086dc:	20005750 	.word	0x20005750

080086e0 <__assert_func>:
 80086e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086e2:	4614      	mov	r4, r2
 80086e4:	461a      	mov	r2, r3
 80086e6:	4b09      	ldr	r3, [pc, #36]	@ (800870c <__assert_func+0x2c>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4605      	mov	r5, r0
 80086ec:	68d8      	ldr	r0, [r3, #12]
 80086ee:	b954      	cbnz	r4, 8008706 <__assert_func+0x26>
 80086f0:	4b07      	ldr	r3, [pc, #28]	@ (8008710 <__assert_func+0x30>)
 80086f2:	461c      	mov	r4, r3
 80086f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086f8:	9100      	str	r1, [sp, #0]
 80086fa:	462b      	mov	r3, r5
 80086fc:	4905      	ldr	r1, [pc, #20]	@ (8008714 <__assert_func+0x34>)
 80086fe:	f7fc fdd3 	bl	80052a8 <fiprintf>
 8008702:	f000 f81f 	bl	8008744 <abort>
 8008706:	4b04      	ldr	r3, [pc, #16]	@ (8008718 <__assert_func+0x38>)
 8008708:	e7f4      	b.n	80086f4 <__assert_func+0x14>
 800870a:	bf00      	nop
 800870c:	20000194 	.word	0x20000194
 8008710:	080096bb 	.word	0x080096bb
 8008714:	0800968d 	.word	0x0800968d
 8008718:	08009680 	.word	0x08009680

0800871c <_calloc_r>:
 800871c:	b570      	push	{r4, r5, r6, lr}
 800871e:	fba1 5402 	umull	r5, r4, r1, r2
 8008722:	b93c      	cbnz	r4, 8008734 <_calloc_r+0x18>
 8008724:	4629      	mov	r1, r5
 8008726:	f7fc fbf7 	bl	8004f18 <_malloc_r>
 800872a:	4606      	mov	r6, r0
 800872c:	b928      	cbnz	r0, 800873a <_calloc_r+0x1e>
 800872e:	2600      	movs	r6, #0
 8008730:	4630      	mov	r0, r6
 8008732:	bd70      	pop	{r4, r5, r6, pc}
 8008734:	220c      	movs	r2, #12
 8008736:	6002      	str	r2, [r0, #0]
 8008738:	e7f9      	b.n	800872e <_calloc_r+0x12>
 800873a:	462a      	mov	r2, r5
 800873c:	4621      	mov	r1, r4
 800873e:	f7fd fccc 	bl	80060da <memset>
 8008742:	e7f5      	b.n	8008730 <_calloc_r+0x14>

08008744 <abort>:
 8008744:	b508      	push	{r3, lr}
 8008746:	2006      	movs	r0, #6
 8008748:	f000 f82c 	bl	80087a4 <raise>
 800874c:	2001      	movs	r0, #1
 800874e:	f7fa fe68 	bl	8003422 <_exit>

08008752 <_raise_r>:
 8008752:	291f      	cmp	r1, #31
 8008754:	b538      	push	{r3, r4, r5, lr}
 8008756:	4605      	mov	r5, r0
 8008758:	460c      	mov	r4, r1
 800875a:	d904      	bls.n	8008766 <_raise_r+0x14>
 800875c:	2316      	movs	r3, #22
 800875e:	6003      	str	r3, [r0, #0]
 8008760:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008764:	bd38      	pop	{r3, r4, r5, pc}
 8008766:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008768:	b112      	cbz	r2, 8008770 <_raise_r+0x1e>
 800876a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800876e:	b94b      	cbnz	r3, 8008784 <_raise_r+0x32>
 8008770:	4628      	mov	r0, r5
 8008772:	f000 f831 	bl	80087d8 <_getpid_r>
 8008776:	4622      	mov	r2, r4
 8008778:	4601      	mov	r1, r0
 800877a:	4628      	mov	r0, r5
 800877c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008780:	f000 b818 	b.w	80087b4 <_kill_r>
 8008784:	2b01      	cmp	r3, #1
 8008786:	d00a      	beq.n	800879e <_raise_r+0x4c>
 8008788:	1c59      	adds	r1, r3, #1
 800878a:	d103      	bne.n	8008794 <_raise_r+0x42>
 800878c:	2316      	movs	r3, #22
 800878e:	6003      	str	r3, [r0, #0]
 8008790:	2001      	movs	r0, #1
 8008792:	e7e7      	b.n	8008764 <_raise_r+0x12>
 8008794:	2100      	movs	r1, #0
 8008796:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800879a:	4620      	mov	r0, r4
 800879c:	4798      	blx	r3
 800879e:	2000      	movs	r0, #0
 80087a0:	e7e0      	b.n	8008764 <_raise_r+0x12>
	...

080087a4 <raise>:
 80087a4:	4b02      	ldr	r3, [pc, #8]	@ (80087b0 <raise+0xc>)
 80087a6:	4601      	mov	r1, r0
 80087a8:	6818      	ldr	r0, [r3, #0]
 80087aa:	f7ff bfd2 	b.w	8008752 <_raise_r>
 80087ae:	bf00      	nop
 80087b0:	20000194 	.word	0x20000194

080087b4 <_kill_r>:
 80087b4:	b538      	push	{r3, r4, r5, lr}
 80087b6:	4d07      	ldr	r5, [pc, #28]	@ (80087d4 <_kill_r+0x20>)
 80087b8:	2300      	movs	r3, #0
 80087ba:	4604      	mov	r4, r0
 80087bc:	4608      	mov	r0, r1
 80087be:	4611      	mov	r1, r2
 80087c0:	602b      	str	r3, [r5, #0]
 80087c2:	f7fa fe1e 	bl	8003402 <_kill>
 80087c6:	1c43      	adds	r3, r0, #1
 80087c8:	d102      	bne.n	80087d0 <_kill_r+0x1c>
 80087ca:	682b      	ldr	r3, [r5, #0]
 80087cc:	b103      	cbz	r3, 80087d0 <_kill_r+0x1c>
 80087ce:	6023      	str	r3, [r4, #0]
 80087d0:	bd38      	pop	{r3, r4, r5, pc}
 80087d2:	bf00      	nop
 80087d4:	20005750 	.word	0x20005750

080087d8 <_getpid_r>:
 80087d8:	f7fa be0b 	b.w	80033f2 <_getpid>

080087dc <_init>:
 80087dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087de:	bf00      	nop
 80087e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087e2:	bc08      	pop	{r3}
 80087e4:	469e      	mov	lr, r3
 80087e6:	4770      	bx	lr

080087e8 <_fini>:
 80087e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ea:	bf00      	nop
 80087ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ee:	bc08      	pop	{r3}
 80087f0:	469e      	mov	lr, r3
 80087f2:	4770      	bx	lr
