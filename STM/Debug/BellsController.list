
BellsController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ca4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e78  08006e78  08006e78  00007e78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cf0  08007cf0  000091e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007cf0  08007cf0  00008cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cf8  08007cf8  000091e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cf8  08007cf8  00008cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007cfc  08007cfc  00008cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08007d00  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005174  200001e4  08007ee4  000091e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005358  08007ee4  00009358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa69  00000000  00000000  00009214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b06  00000000  00000000  00013c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  00015788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ba  00000000  00000000  00016288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002253d  00000000  00000000  00016b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c482  00000000  00000000  0003907f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccd99  00000000  00000000  00045501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0011229a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f7c  00000000  00000000  00112320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0011629c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006e5c 	.word	0x08006e5c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08006e5c 	.word	0x08006e5c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2uiz>:
 8000bdc:	004a      	lsls	r2, r1, #1
 8000bde:	d211      	bcs.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be4:	d211      	bcs.n	8000c0a <__aeabi_d2uiz+0x2e>
 8000be6:	d50d      	bpl.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf0:	d40e      	bmi.n	8000c10 <__aeabi_d2uiz+0x34>
 8000bf2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0e:	d102      	bne.n	8000c16 <__aeabi_d2uiz+0x3a>
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c14:	4770      	bx	lr
 8000c16:	f04f 0000 	mov.w	r0, #0
 8000c1a:	4770      	bx	lr

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c30:	f000 b9a0 	b.w	8000f74 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f83c 	bl	8000cb8 <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__aeabi_d2lz>:
 8000c4c:	b538      	push	{r3, r4, r5, lr}
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2300      	movs	r3, #0
 8000c52:	4604      	mov	r4, r0
 8000c54:	460d      	mov	r5, r1
 8000c56:	f7ff ff71 	bl	8000b3c <__aeabi_dcmplt>
 8000c5a:	b928      	cbnz	r0, 8000c68 <__aeabi_d2lz+0x1c>
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	4629      	mov	r1, r5
 8000c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c64:	f000 b80a 	b.w	8000c7c <__aeabi_d2ulz>
 8000c68:	4620      	mov	r0, r4
 8000c6a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c6e:	f000 f805 	bl	8000c7c <__aeabi_d2ulz>
 8000c72:	4240      	negs	r0, r0
 8000c74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c78:	bd38      	pop	{r3, r4, r5, pc}
 8000c7a:	bf00      	nop

08000c7c <__aeabi_d2ulz>:
 8000c7c:	b5d0      	push	{r4, r6, r7, lr}
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <__aeabi_d2ulz+0x34>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	4606      	mov	r6, r0
 8000c84:	460f      	mov	r7, r1
 8000c86:	f7ff fce7 	bl	8000658 <__aeabi_dmul>
 8000c8a:	f7ff ffa7 	bl	8000bdc <__aeabi_d2uiz>
 8000c8e:	4604      	mov	r4, r0
 8000c90:	f7ff fc68 	bl	8000564 <__aeabi_ui2d>
 8000c94:	4b07      	ldr	r3, [pc, #28]	@ (8000cb4 <__aeabi_d2ulz+0x38>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f7ff fcde 	bl	8000658 <__aeabi_dmul>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4630      	mov	r0, r6
 8000ca2:	4639      	mov	r1, r7
 8000ca4:	f7ff fb20 	bl	80002e8 <__aeabi_dsub>
 8000ca8:	f7ff ff98 	bl	8000bdc <__aeabi_d2uiz>
 8000cac:	4621      	mov	r1, r4
 8000cae:	bdd0      	pop	{r4, r6, r7, pc}
 8000cb0:	3df00000 	.word	0x3df00000
 8000cb4:	41f00000 	.word	0x41f00000

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d002      	beq.n	8000f8e <case_insensitive_strcmp+0x16>
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e056      	b.n	8001040 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d10d      	bne.n	8000fb6 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e050      	b.n	8001040 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <case_insensitive_strcmp+0x32>
        {
            return 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e04a      	b.n	8001040 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3301      	adds	r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	73fb      	strb	r3, [r7, #15]
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	4a22      	ldr	r2, [pc, #136]	@ (800104c <case_insensitive_strcmp+0xd4>)
 8000fc2:	4413      	add	r3, r2
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d103      	bne.n	8000fd6 <case_insensitive_strcmp+0x5e>
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	f103 0220 	add.w	r2, r3, #32
 8000fd4:	e000      	b.n	8000fd8 <case_insensitive_strcmp+0x60>
 8000fd6:	7bfa      	ldrb	r2, [r7, #15]
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	73bb      	strb	r3, [r7, #14]
 8000fde:	7bbb      	ldrb	r3, [r7, #14]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	491a      	ldr	r1, [pc, #104]	@ (800104c <case_insensitive_strcmp+0xd4>)
 8000fe4:	440b      	add	r3, r1
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d102      	bne.n	8000ff6 <case_insensitive_strcmp+0x7e>
 8000ff0:	7bbb      	ldrb	r3, [r7, #14]
 8000ff2:	3320      	adds	r3, #32
 8000ff4:	e000      	b.n	8000ff8 <case_insensitive_strcmp+0x80>
 8000ff6:	7bbb      	ldrb	r3, [r7, #14]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d0d0      	beq.n	8000f9e <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	737b      	strb	r3, [r7, #13]
 8001002:	7b7b      	ldrb	r3, [r7, #13]
 8001004:	3301      	adds	r3, #1
 8001006:	4a11      	ldr	r2, [pc, #68]	@ (800104c <case_insensitive_strcmp+0xd4>)
 8001008:	4413      	add	r3, r2
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b01      	cmp	r3, #1
 8001012:	d103      	bne.n	800101c <case_insensitive_strcmp+0xa4>
 8001014:	7b7b      	ldrb	r3, [r7, #13]
 8001016:	f103 0220 	add.w	r2, r3, #32
 800101a:	e000      	b.n	800101e <case_insensitive_strcmp+0xa6>
 800101c:	7b7a      	ldrb	r2, [r7, #13]
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	733b      	strb	r3, [r7, #12]
 8001024:	7b3b      	ldrb	r3, [r7, #12]
 8001026:	3301      	adds	r3, #1
 8001028:	4908      	ldr	r1, [pc, #32]	@ (800104c <case_insensitive_strcmp+0xd4>)
 800102a:	440b      	add	r3, r1
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	2b01      	cmp	r3, #1
 8001034:	d102      	bne.n	800103c <case_insensitive_strcmp+0xc4>
 8001036:	7b3b      	ldrb	r3, [r7, #12]
 8001038:	3320      	adds	r3, #32
 800103a:	e000      	b.n	800103e <case_insensitive_strcmp+0xc6>
 800103c:	7b3b      	ldrb	r3, [r7, #12]
 800103e:	1ad3      	subs	r3, r2, r3
}
 8001040:	4618      	mov	r0, r3
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	080079a0 	.word	0x080079a0

08001050 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2028      	movs	r0, #40	@ 0x28
 800105e:	4798      	blx	r3
 8001060:	60f8      	str	r0, [r7, #12]
    if (node)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d004      	beq.n	8001072 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001068:	2228      	movs	r2, #40	@ 0x28
 800106a:	2100      	movs	r1, #0
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f004 f8d2 	bl	8005216 <memset>
    }

    return node;
 8001072:	68fb      	ldr	r3, [r7, #12]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001088:	e03d      	b.n	8001106 <cJSON_Delete+0x8a>
    {
        next = item->next;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001098:	2b00      	cmp	r3, #0
 800109a:	d108      	bne.n	80010ae <cJSON_Delete+0x32>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d004      	beq.n	80010ae <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ffe7 	bl	800107c <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10c      	bne.n	80010d4 <cJSON_Delete+0x58>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d008      	beq.n	80010d4 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 80010c2:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <cJSON_Delete+0x9c>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	6912      	ldr	r2, [r2, #16]
 80010ca:	4610      	mov	r0, r2
 80010cc:	4798      	blx	r3
            item->valuestring = NULL;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d10c      	bne.n	80010fa <cJSON_Delete+0x7e>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d008      	beq.n	80010fa <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 80010e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <cJSON_Delete+0x9c>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	6a12      	ldr	r2, [r2, #32]
 80010f0:	4610      	mov	r0, r2
 80010f2:	4798      	blx	r3
            item->string = NULL;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 80010fa:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <cJSON_Delete+0x9c>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	4798      	blx	r3
        item = next;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1be      	bne.n	800108a <cJSON_Delete+0xe>
    }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000000 	.word	0x20000000

0800111c <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001120:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	0000      	movs	r0, r0
	...

08001130 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b098      	sub	sp, #96	@ 0x60
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
    double number = 0;
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	f04f 0300 	mov.w	r3, #0
 8001142:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 8001146:	2300      	movs	r3, #0
 8001148:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800114a:	f7ff ffe7 	bl	800111c <get_decimal_point>
 800114e:	4603      	mov	r3, r0
 8001150:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <parse_number+0x36>
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <parse_number+0x3a>
    {
        return false;
 8001166:	2300      	movs	r3, #0
 8001168:	e0a0      	b.n	80012ac <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800116a:	2300      	movs	r3, #0
 800116c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800116e:	e03d      	b.n	80011ec <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	6899      	ldr	r1, [r3, #8]
 8001178:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800117a:	440b      	add	r3, r1
 800117c:	4413      	add	r3, r2
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b45      	cmp	r3, #69	@ 0x45
 8001182:	dc17      	bgt.n	80011b4 <parse_number+0x84>
 8001184:	2b2b      	cmp	r3, #43	@ 0x2b
 8001186:	db40      	blt.n	800120a <parse_number+0xda>
 8001188:	3b2b      	subs	r3, #43	@ 0x2b
 800118a:	2201      	movs	r2, #1
 800118c:	409a      	lsls	r2, r3
 800118e:	4b4c      	ldr	r3, [pc, #304]	@ (80012c0 <parse_number+0x190>)
 8001190:	4013      	ands	r3, r2
 8001192:	2b00      	cmp	r3, #0
 8001194:	bf14      	ite	ne
 8001196:	2301      	movne	r3, #1
 8001198:	2300      	moveq	r3, #0
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d10b      	bne.n	80011b8 <parse_number+0x88>
 80011a0:	f002 0308 	and.w	r3, r2, #8
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	bf14      	ite	ne
 80011a8:	2301      	movne	r3, #1
 80011aa:	2300      	moveq	r3, #0
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d111      	bne.n	80011d6 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 80011b2:	e02a      	b.n	800120a <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 80011b4:	2b65      	cmp	r3, #101	@ 0x65
 80011b6:	d128      	bne.n	800120a <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	6899      	ldr	r1, [r3, #8]
 80011c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011c2:	440b      	add	r3, r1
 80011c4:	4413      	add	r3, r2
 80011c6:	7819      	ldrb	r1, [r3, #0]
 80011c8:	f107 0208 	add.w	r2, r7, #8
 80011cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011ce:	4413      	add	r3, r2
 80011d0:	460a      	mov	r2, r1
 80011d2:	701a      	strb	r2, [r3, #0]
                break;
 80011d4:	e007      	b.n	80011e6 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 80011d6:	f107 0208 	add.w	r2, r7, #8
 80011da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011dc:	4413      	add	r3, r2
 80011de:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80011e2:	701a      	strb	r2, [r3, #0]
                break;
 80011e4:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80011e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011e8:	3301      	adds	r3, #1
 80011ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80011ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80011f0:	d80d      	bhi.n	800120e <parse_number+0xde>
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d00a      	beq.n	800120e <parse_number+0xde>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011fe:	441a      	add	r2, r3
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	429a      	cmp	r2, r3
 8001206:	d3b3      	bcc.n	8001170 <parse_number+0x40>
        }
    }
loop_end:
 8001208:	e001      	b.n	800120e <parse_number+0xde>
                goto loop_end;
 800120a:	bf00      	nop
 800120c:	e000      	b.n	8001210 <parse_number+0xe0>
loop_end:
 800120e:	bf00      	nop
    number_c_string[i] = '\0';
 8001210:	f107 0208 	add.w	r2, r7, #8
 8001214:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001216:	4413      	add	r3, r2
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800121c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001220:	f107 0308 	add.w	r3, r7, #8
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f003 ffa6 	bl	8005178 <strtod>
 800122c:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 8001230:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	429a      	cmp	r2, r3
 8001238:	d101      	bne.n	800123e <parse_number+0x10e>
    {
        return false; /* parse_error */
 800123a:	2300      	movs	r3, #0
 800123c:	e036      	b.n	80012ac <parse_number+0x17c>
    }

    item->valuedouble = number;
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001244:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001248:	a31b      	add	r3, pc, #108	@ (adr r3, 80012b8 <parse_number+0x188>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001252:	f7ff fc87 	bl	8000b64 <__aeabi_dcmpge>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d004      	beq.n	8001266 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001262:	615a      	str	r2, [r3, #20]
 8001264:	e015      	b.n	8001292 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	4b16      	ldr	r3, [pc, #88]	@ (80012c4 <parse_number+0x194>)
 800126c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001270:	f7ff fc6e 	bl	8000b50 <__aeabi_dcmple>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d004      	beq.n	8001284 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001280:	615a      	str	r2, [r3, #20]
 8001282:	e006      	b.n	8001292 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 8001284:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001288:	f7ff fc80 	bl	8000b8c <__aeabi_d2iz>
 800128c:	4602      	mov	r2, r0
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2208      	movs	r2, #8
 8001296:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800129e:	f107 0208 	add.w	r2, r7, #8
 80012a2:	1a8a      	subs	r2, r1, r2
 80012a4:	441a      	add	r2, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	609a      	str	r2, [r3, #8]
    return true;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3760      	adds	r7, #96	@ 0x60
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	f3af 8000 	nop.w
 80012b8:	ffc00000 	.word	0xffc00000
 80012bc:	41dfffff 	.word	0x41dfffff
 80012c0:	04007fe5 	.word	0x04007fe5
 80012c4:	c1e00000 	.word	0xc1e00000

080012c8 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 80012d8:	2300      	movs	r3, #0
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e04c      	b.n	8001378 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4413      	add	r3, r2
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b2f      	cmp	r3, #47	@ 0x2f
 80012e8:	d90f      	bls.n	800130a <parse_hex4+0x42>
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	4413      	add	r3, r2
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b39      	cmp	r3, #57	@ 0x39
 80012f4:	d809      	bhi.n	800130a <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4413      	add	r3, r2
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4413      	add	r3, r2
 8001304:	3b30      	subs	r3, #48	@ 0x30
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	e02d      	b.n	8001366 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	4413      	add	r3, r2
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b40      	cmp	r3, #64	@ 0x40
 8001314:	d90f      	bls.n	8001336 <parse_hex4+0x6e>
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	4413      	add	r3, r2
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b46      	cmp	r3, #70	@ 0x46
 8001320:	d809      	bhi.n	8001336 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	4413      	add	r3, r2
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4413      	add	r3, r2
 8001330:	3b37      	subs	r3, #55	@ 0x37
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	e017      	b.n	8001366 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	4413      	add	r3, r2
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b60      	cmp	r3, #96	@ 0x60
 8001340:	d90f      	bls.n	8001362 <parse_hex4+0x9a>
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4413      	add	r3, r2
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b66      	cmp	r3, #102	@ 0x66
 800134c:	d809      	bhi.n	8001362 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4413      	add	r3, r2
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4413      	add	r3, r2
 800135c:	3b57      	subs	r3, #87	@ 0x57
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	e001      	b.n	8001366 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8001362:	2300      	movs	r3, #0
 8001364:	e00c      	b.n	8001380 <parse_hex4+0xb8>
        }

        if (i < 3)
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	2b02      	cmp	r3, #2
 800136a:	d802      	bhi.n	8001372 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	3301      	adds	r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	2b03      	cmp	r3, #3
 800137c:	d9af      	bls.n	80012de <parse_hex4+0x16>
        }
    }

    return h;
 800137e:	68fb      	ldr	r3, [r7, #12]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	@ 0x28
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80013bc:	68ba      	ldr	r2, [r7, #8]
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b05      	cmp	r3, #5
 80013c4:	f340 80b7 	ble.w	8001536 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	3302      	adds	r3, #2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff7b 	bl	80012c8 <parse_hex4>
 80013d2:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80013da:	d304      	bcc.n	80013e6 <utf16_literal_to_utf8+0x5a>
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 80013e2:	f0c0 80aa 	bcc.w	800153a <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 80013ec:	d337      	bcc.n	800145e <utf16_literal_to_utf8+0xd2>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80013f4:	d233      	bcs.n	800145e <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	3306      	adds	r3, #6
 80013fa:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8001400:	230c      	movs	r3, #12
 8001402:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b05      	cmp	r3, #5
 800140e:	f340 8096 	ble.w	800153e <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b5c      	cmp	r3, #92	@ 0x5c
 8001418:	f040 8093 	bne.w	8001542 <utf16_literal_to_utf8+0x1b6>
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	3301      	adds	r3, #1
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b75      	cmp	r3, #117	@ 0x75
 8001424:	f040 808d 	bne.w	8001542 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	3302      	adds	r3, #2
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff4b 	bl	80012c8 <parse_hex4>
 8001432:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800143a:	f0c0 8084 	bcc.w	8001546 <utf16_literal_to_utf8+0x1ba>
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8001444:	d27f      	bcs.n	8001546 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	029a      	lsls	r2, r3, #10
 800144a:	4b43      	ldr	r3, [pc, #268]	@ (8001558 <utf16_literal_to_utf8+0x1cc>)
 800144c:	4013      	ands	r3, r2
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001454:	4313      	orrs	r3, r2
 8001456:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800145a:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 800145c:	e004      	b.n	8001468 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800145e:	2306      	movs	r3, #6
 8001460:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146a:	2b7f      	cmp	r3, #127	@ 0x7f
 800146c:	d803      	bhi.n	8001476 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800146e:	2301      	movs	r3, #1
 8001470:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001474:	e01f      	b.n	80014b6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001478:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800147c:	d206      	bcs.n	800148c <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800147e:	2302      	movs	r3, #2
 8001480:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001484:	23c0      	movs	r3, #192	@ 0xc0
 8001486:	f887 3020 	strb.w	r3, [r7, #32]
 800148a:	e014      	b.n	80014b6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800148c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001492:	d206      	bcs.n	80014a2 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001494:	2303      	movs	r3, #3
 8001496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800149a:	23e0      	movs	r3, #224	@ 0xe0
 800149c:	f887 3020 	strb.w	r3, [r7, #32]
 80014a0:	e009      	b.n	80014b6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 80014a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a4:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80014a8:	d24f      	bcs.n	800154a <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80014aa:	2304      	movs	r3, #4
 80014ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80014b0:	23f0      	movs	r3, #240	@ 0xf0
 80014b2:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80014b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80014ba:	3b01      	subs	r3, #1
 80014bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80014c0:	e015      	b.n	80014ee <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80014c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6819      	ldr	r1, [r3, #0]
 80014d0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80014d4:	440b      	add	r3, r1
 80014d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80014de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e0:	099b      	lsrs	r3, r3, #6
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80014e4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80014e8:	3b01      	subs	r3, #1
 80014ea:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80014ee:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1e5      	bne.n	80014c2 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80014f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d909      	bls.n	8001512 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80014fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001500:	b2d9      	uxtb	r1, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f897 2020 	ldrb.w	r2, [r7, #32]
 800150a:	430a      	orrs	r2, r1
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	701a      	strb	r2, [r3, #0]
 8001510:	e007      	b.n	8001522 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001514:	b2da      	uxtb	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800152a:	441a      	add	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001530:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001534:	e00b      	b.n	800154e <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8001536:	bf00      	nop
 8001538:	e008      	b.n	800154c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800153a:	bf00      	nop
 800153c:	e006      	b.n	800154c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800153e:	bf00      	nop
 8001540:	e004      	b.n	800154c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001542:	bf00      	nop
 8001544:	e002      	b.n	800154c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001546:	bf00      	nop
 8001548:	e000      	b.n	800154c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800154a:	bf00      	nop

fail:
    return 0;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3728      	adds	r7, #40	@ 0x28
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	000ffc00 	.word	0x000ffc00

0800155c <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	@ 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	3301      	adds	r3, #1
 8001570:	4413      	add	r3, r2
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	3301      	adds	r3, #1
 800157e:	4413      	add	r3, r2
 8001580:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	4413      	add	r3, r2
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b22      	cmp	r3, #34	@ 0x22
 8001598:	f040 8103 	bne.w	80017a2 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80015a4:	e017      	b.n	80015d6 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 80015a6:	6a3b      	ldr	r3, [r7, #32]
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b5c      	cmp	r3, #92	@ 0x5c
 80015ac:	d110      	bne.n	80015d0 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 80015ae:	6a3b      	ldr	r3, [r7, #32]
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	461a      	mov	r2, r3
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	429a      	cmp	r2, r3
 80015c0:	f080 80f1 	bcs.w	80017a6 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	3301      	adds	r3, #1
 80015c8:	61bb      	str	r3, [r7, #24]
                input_end++;
 80015ca:	6a3b      	ldr	r3, [r7, #32]
 80015cc:	3301      	adds	r3, #1
 80015ce:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	3301      	adds	r3, #1
 80015d4:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6a3a      	ldr	r2, [r7, #32]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	461a      	mov	r2, r3
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d203      	bcs.n	80015f0 <parse_string+0x94>
 80015e8:	6a3b      	ldr	r3, [r7, #32]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b22      	cmp	r3, #34	@ 0x22
 80015ee:	d1da      	bne.n	80015a6 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6a3a      	ldr	r2, [r7, #32]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	461a      	mov	r2, r3
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	429a      	cmp	r2, r3
 8001600:	f080 80d3 	bcs.w	80017aa <parse_string+0x24e>
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b22      	cmp	r3, #34	@ 0x22
 800160a:	f040 80ce 	bne.w	80017aa <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	4413      	add	r3, r2
 8001618:	6a3a      	ldr	r2, [r7, #32]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	461a      	mov	r2, r3
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	3201      	adds	r2, #1
 800162c:	4610      	mov	r0, r2
 800162e:	4798      	blx	r3
 8001630:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 80ba 	beq.w	80017ae <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800163e:	e094      	b.n	800176a <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8001640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b5c      	cmp	r3, #92	@ 0x5c
 8001646:	d008      	beq.n	800165a <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800164a:	1c53      	adds	r3, r2, #1
 800164c:	627b      	str	r3, [r7, #36]	@ 0x24
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	1c59      	adds	r1, r3, #1
 8001652:	60f9      	str	r1, [r7, #12]
 8001654:	7812      	ldrb	r2, [r2, #0]
 8001656:	701a      	strb	r2, [r3, #0]
 8001658:	e087      	b.n	800176a <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800165a:	2302      	movs	r3, #2
 800165c:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800165e:	6a3a      	ldr	r2, [r7, #32]
 8001660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	f340 80a4 	ble.w	80017b2 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800166a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166c:	3301      	adds	r3, #1
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b75      	cmp	r3, #117	@ 0x75
 8001672:	f300 80a0 	bgt.w	80017b6 <parse_string+0x25a>
 8001676:	2b5c      	cmp	r3, #92	@ 0x5c
 8001678:	da04      	bge.n	8001684 <parse_string+0x128>
 800167a:	2b22      	cmp	r3, #34	@ 0x22
 800167c:	d05c      	beq.n	8001738 <parse_string+0x1dc>
 800167e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001680:	d05a      	beq.n	8001738 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001682:	e098      	b.n	80017b6 <parse_string+0x25a>
            switch (input_pointer[1])
 8001684:	3b5c      	subs	r3, #92	@ 0x5c
 8001686:	2b19      	cmp	r3, #25
 8001688:	f200 8095 	bhi.w	80017b6 <parse_string+0x25a>
 800168c:	a201      	add	r2, pc, #4	@ (adr r2, 8001694 <parse_string+0x138>)
 800168e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001692:	bf00      	nop
 8001694:	08001739 	.word	0x08001739
 8001698:	080017b7 	.word	0x080017b7
 800169c:	080017b7 	.word	0x080017b7
 80016a0:	080017b7 	.word	0x080017b7
 80016a4:	080017b7 	.word	0x080017b7
 80016a8:	080017b7 	.word	0x080017b7
 80016ac:	080016fd 	.word	0x080016fd
 80016b0:	080017b7 	.word	0x080017b7
 80016b4:	080017b7 	.word	0x080017b7
 80016b8:	080017b7 	.word	0x080017b7
 80016bc:	08001709 	.word	0x08001709
 80016c0:	080017b7 	.word	0x080017b7
 80016c4:	080017b7 	.word	0x080017b7
 80016c8:	080017b7 	.word	0x080017b7
 80016cc:	080017b7 	.word	0x080017b7
 80016d0:	080017b7 	.word	0x080017b7
 80016d4:	080017b7 	.word	0x080017b7
 80016d8:	080017b7 	.word	0x080017b7
 80016dc:	08001715 	.word	0x08001715
 80016e0:	080017b7 	.word	0x080017b7
 80016e4:	080017b7 	.word	0x080017b7
 80016e8:	080017b7 	.word	0x080017b7
 80016ec:	08001721 	.word	0x08001721
 80016f0:	080017b7 	.word	0x080017b7
 80016f4:	0800172d 	.word	0x0800172d
 80016f8:	08001749 	.word	0x08001749
                    *output_pointer++ = '\b';
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	60fa      	str	r2, [r7, #12]
 8001702:	2208      	movs	r2, #8
 8001704:	701a      	strb	r2, [r3, #0]
                    break;
 8001706:	e02c      	b.n	8001762 <parse_string+0x206>
                    *output_pointer++ = '\f';
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	60fa      	str	r2, [r7, #12]
 800170e:	220c      	movs	r2, #12
 8001710:	701a      	strb	r2, [r3, #0]
                    break;
 8001712:	e026      	b.n	8001762 <parse_string+0x206>
                    *output_pointer++ = '\n';
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	60fa      	str	r2, [r7, #12]
 800171a:	220a      	movs	r2, #10
 800171c:	701a      	strb	r2, [r3, #0]
                    break;
 800171e:	e020      	b.n	8001762 <parse_string+0x206>
                    *output_pointer++ = '\r';
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	60fa      	str	r2, [r7, #12]
 8001726:	220d      	movs	r2, #13
 8001728:	701a      	strb	r2, [r3, #0]
                    break;
 800172a:	e01a      	b.n	8001762 <parse_string+0x206>
                    *output_pointer++ = '\t';
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	1c5a      	adds	r2, r3, #1
 8001730:	60fa      	str	r2, [r7, #12]
 8001732:	2209      	movs	r2, #9
 8001734:	701a      	strb	r2, [r3, #0]
                    break;
 8001736:	e014      	b.n	8001762 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 8001738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	1c59      	adds	r1, r3, #1
 8001740:	60f9      	str	r1, [r7, #12]
 8001742:	7812      	ldrb	r2, [r2, #0]
 8001744:	701a      	strb	r2, [r3, #0]
                    break;
 8001746:	e00c      	b.n	8001762 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	461a      	mov	r2, r3
 800174e:	6a39      	ldr	r1, [r7, #32]
 8001750:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001752:	f7ff fe1b 	bl	800138c <utf16_literal_to_utf8>
 8001756:	4603      	mov	r3, r0
 8001758:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800175a:	7dfb      	ldrb	r3, [r7, #23]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d02c      	beq.n	80017ba <parse_string+0x25e>
                    break;
 8001760:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001762:	7dfb      	ldrb	r3, [r7, #23]
 8001764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001766:	4413      	add	r3, r2
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 800176a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800176c:	6a3b      	ldr	r3, [r7, #32]
 800176e:	429a      	cmp	r2, r3
 8001770:	f4ff af66 	bcc.w	8001640 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2210      	movs	r2, #16
 800177e:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6a3a      	ldr	r2, [r7, #32]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	461a      	mov	r2, r3
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	1c5a      	adds	r2, r3, #1
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	609a      	str	r2, [r3, #8]

    return true;
 800179e:	2301      	movs	r3, #1
 80017a0:	e020      	b.n	80017e4 <parse_string+0x288>
        goto fail;
 80017a2:	bf00      	nop
 80017a4:	e00a      	b.n	80017bc <parse_string+0x260>
                    goto fail;
 80017a6:	bf00      	nop
 80017a8:	e008      	b.n	80017bc <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 80017aa:	bf00      	nop
 80017ac:	e006      	b.n	80017bc <parse_string+0x260>
            goto fail; /* allocation failure */
 80017ae:	bf00      	nop
 80017b0:	e004      	b.n	80017bc <parse_string+0x260>
                goto fail;
 80017b2:	bf00      	nop
 80017b4:	e002      	b.n	80017bc <parse_string+0x260>
                    goto fail;
 80017b6:	bf00      	nop
 80017b8:	e000      	b.n	80017bc <parse_string+0x260>
                        goto fail;
 80017ba:	bf00      	nop

fail:
    if (output != NULL)
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d005      	beq.n	80017ce <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	69f8      	ldr	r0, [r7, #28]
 80017c8:	4798      	blx	r3
        output = NULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 80017ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d006      	beq.n	80017e2 <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	461a      	mov	r2, r3
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	609a      	str	r2, [r3, #8]
    }

    return false;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3728      	adds	r7, #40	@ 0x28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <buffer_skip_whitespace+0x16>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001802:	2300      	movs	r3, #0
 8001804:	e02c      	b.n	8001860 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d005      	beq.n	8001818 <buffer_skip_whitespace+0x2c>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	429a      	cmp	r2, r3
 8001816:	d306      	bcc.n	8001826 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	e021      	b.n	8001860 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00d      	beq.n	8001848 <buffer_skip_whitespace+0x5c>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	429a      	cmp	r2, r3
 8001836:	d207      	bcs.n	8001848 <buffer_skip_whitespace+0x5c>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	4413      	add	r3, r2
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b20      	cmp	r3, #32
 8001846:	d9e9      	bls.n	800181c <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	429a      	cmp	r2, r3
 8001852:	d104      	bne.n	800185e <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	1e5a      	subs	r2, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800185e:	687b      	ldr	r3, [r7, #4]
}
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d007      	beq.n	800188a <skip_utf8_bom+0x1e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <skip_utf8_bom+0x1e>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <skip_utf8_bom+0x22>
    {
        return NULL;
 800188a:	2300      	movs	r3, #0
 800188c:	e01c      	b.n	80018c8 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d018      	beq.n	80018c6 <skip_utf8_bom+0x5a>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	1d1a      	adds	r2, r3, #4
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d211      	bcs.n	80018c6 <skip_utf8_bom+0x5a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	4413      	add	r3, r2
 80018ac:	2203      	movs	r2, #3
 80018ae:	4908      	ldr	r1, [pc, #32]	@ (80018d0 <skip_utf8_bom+0x64>)
 80018b0:	4618      	mov	r0, r3
 80018b2:	f003 fc8b 	bl	80051cc <strncmp>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d104      	bne.n	80018c6 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	1cda      	adds	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80018c6:	687b      	ldr	r3, [r7, #4]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	08006eb0 	.word	0x08006eb0

080018d4 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e00c      	b.n	8001904 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f7fe fc90 	bl	8000210 <strlen>
 80018f0:	4603      	mov	r3, r0
 80018f2:	3301      	adds	r3, #1
 80018f4:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68ba      	ldr	r2, [r7, #8]
 80018fa:	6979      	ldr	r1, [r7, #20]
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f000 f805 	bl	800190c <cJSON_ParseWithLengthOpts>
 8001902:	4603      	mov	r3, r0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08e      	sub	sp, #56	@ 0x38
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800191a:	f107 0318 	add.w	r3, r7, #24
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	615a      	str	r2, [r3, #20]
 800192c:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800192e:	2300      	movs	r3, #0
 8001930:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 8001932:	4b41      	ldr	r3, [pc, #260]	@ (8001a38 <cJSON_ParseWithLengthOpts+0x12c>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001938:	4b3f      	ldr	r3, [pc, #252]	@ (8001a38 <cJSON_ParseWithLengthOpts+0x12c>)
 800193a:	2200      	movs	r2, #0
 800193c:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d042      	beq.n	80019ca <cJSON_ParseWithLengthOpts+0xbe>
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d03f      	beq.n	80019ca <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001956:	4a39      	ldr	r2, [pc, #228]	@ (8001a3c <cJSON_ParseWithLengthOpts+0x130>)
 8001958:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800195c:	ca07      	ldmia	r2, {r0, r1, r2}
 800195e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001962:	4836      	ldr	r0, [pc, #216]	@ (8001a3c <cJSON_ParseWithLengthOpts+0x130>)
 8001964:	f7ff fb74 	bl	8001050 <cJSON_New_Item>
 8001968:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 800196a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800196c:	2b00      	cmp	r3, #0
 800196e:	d02e      	beq.n	80019ce <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001970:	f107 0318 	add.w	r3, r7, #24
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff79 	bl	800186c <skip_utf8_bom>
 800197a:	4603      	mov	r3, r0
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff35 	bl	80017ec <buffer_skip_whitespace>
 8001982:	4603      	mov	r3, r0
 8001984:	4619      	mov	r1, r3
 8001986:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001988:	f000 f868 	bl	8001a5c <parse_value>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d01f      	beq.n	80019d2 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00e      	beq.n	80019b6 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001998:	f107 0318 	add.w	r3, r7, #24
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff25 	bl	80017ec <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 80019a2:	6a3a      	ldr	r2, [r7, #32]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d215      	bcs.n	80019d6 <cJSON_ParseWithLengthOpts+0xca>
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	6a3b      	ldr	r3, [r7, #32]
 80019ae:	4413      	add	r3, r2
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10f      	bne.n	80019d6 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d004      	beq.n	80019c6 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	6a3b      	ldr	r3, [r7, #32]
 80019c0:	441a      	add	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	601a      	str	r2, [r3, #0]
    }

    return item;
 80019c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019c8:	e031      	b.n	8001a2e <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 80019ca:	bf00      	nop
 80019cc:	e004      	b.n	80019d8 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80019ce:	bf00      	nop
 80019d0:	e002      	b.n	80019d8 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80019d2:	bf00      	nop
 80019d4:	e000      	b.n	80019d8 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 80019d6:	bf00      	nop

fail:
    if (item != NULL)
 80019d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d002      	beq.n	80019e4 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 80019de:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80019e0:	f7ff fb4c 	bl	800107c <cJSON_Delete>
    }

    if (value != NULL)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d020      	beq.n	8001a2c <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 80019f2:	6a3a      	ldr	r2, [r7, #32]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d202      	bcs.n	8001a00 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 80019fa:	6a3b      	ldr	r3, [r7, #32]
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	e005      	b.n	8001a0c <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d002      	beq.n	8001a0c <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d004      	beq.n	8001a1c <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	441a      	add	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <cJSON_ParseWithLengthOpts+0x12c>)
 8001a1e:	461a      	mov	r2, r3
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a28:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3738      	adds	r7, #56	@ 0x38
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000200 	.word	0x20000200
 8001a3c:	20000000 	.word	0x20000000

08001a40 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ff41 	bl	80018d4 <cJSON_ParseWithOpts>
 8001a52:	4603      	mov	r3, r0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <parse_value+0x18>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <parse_value+0x1c>
    {
        return false; /* no input */
 8001a74:	2300      	movs	r3, #0
 8001a76:	e0d2      	b.n	8001c1e <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d01d      	beq.n	8001aba <parse_value+0x5e>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	1d1a      	adds	r2, r3, #4
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d816      	bhi.n	8001aba <parse_value+0x5e>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	4413      	add	r3, r2
 8001a96:	2204      	movs	r2, #4
 8001a98:	4963      	ldr	r1, [pc, #396]	@ (8001c28 <parse_value+0x1cc>)
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f003 fb96 	bl	80051cc <strncmp>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d109      	bne.n	8001aba <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2204      	movs	r2, #4
 8001aaa:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	1d1a      	adds	r2, r3, #4
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	609a      	str	r2, [r3, #8]
        return true;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e0b1      	b.n	8001c1e <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d01d      	beq.n	8001afc <parse_value+0xa0>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	1d5a      	adds	r2, r3, #5
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d816      	bhi.n	8001afc <parse_value+0xa0>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	2205      	movs	r2, #5
 8001ada:	4954      	ldr	r1, [pc, #336]	@ (8001c2c <parse_value+0x1d0>)
 8001adc:	4618      	mov	r0, r3
 8001ade:	f003 fb75 	bl	80051cc <strncmp>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d109      	bne.n	8001afc <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	1d5a      	adds	r2, r3, #5
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	609a      	str	r2, [r3, #8]
        return true;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e090      	b.n	8001c1e <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d020      	beq.n	8001b44 <parse_value+0xe8>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	1d1a      	adds	r2, r3, #4
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d819      	bhi.n	8001b44 <parse_value+0xe8>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	4413      	add	r3, r2
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	4944      	ldr	r1, [pc, #272]	@ (8001c30 <parse_value+0x1d4>)
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f003 fb54 	bl	80051cc <strncmp>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10c      	bne.n	8001b44 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	1d1a      	adds	r2, r3, #4
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	609a      	str	r2, [r3, #8]
        return true;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e06c      	b.n	8001c1e <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d013      	beq.n	8001b72 <parse_value+0x116>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d20d      	bcs.n	8001b72 <parse_value+0x116>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	4413      	add	r3, r2
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b22      	cmp	r3, #34	@ 0x22
 8001b64:	d105      	bne.n	8001b72 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001b66:	6839      	ldr	r1, [r7, #0]
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff fcf7 	bl	800155c <parse_string>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	e055      	b.n	8001c1e <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d023      	beq.n	8001bc0 <parse_value+0x164>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d21d      	bcs.n	8001bc0 <parse_value+0x164>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b2d      	cmp	r3, #45	@ 0x2d
 8001b92:	d00f      	beq.n	8001bb4 <parse_value+0x158>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b2f      	cmp	r3, #47	@ 0x2f
 8001ba2:	d90d      	bls.n	8001bc0 <parse_value+0x164>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	4413      	add	r3, r2
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b39      	cmp	r3, #57	@ 0x39
 8001bb2:	d805      	bhi.n	8001bc0 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001bb4:	6839      	ldr	r1, [r7, #0]
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff faba 	bl	8001130 <parse_number>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	e02e      	b.n	8001c1e <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d013      	beq.n	8001bee <parse_value+0x192>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d20d      	bcs.n	8001bee <parse_value+0x192>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	4413      	add	r3, r2
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b5b      	cmp	r3, #91	@ 0x5b
 8001be0:	d105      	bne.n	8001bee <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001be2:	6839      	ldr	r1, [r7, #0]
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f825 	bl	8001c34 <parse_array>
 8001bea:	4603      	mov	r3, r0
 8001bec:	e017      	b.n	8001c1e <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d013      	beq.n	8001c1c <parse_value+0x1c0>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d20d      	bcs.n	8001c1c <parse_value+0x1c0>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	4413      	add	r3, r2
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b7b      	cmp	r3, #123	@ 0x7b
 8001c0e:	d105      	bne.n	8001c1c <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001c10:	6839      	ldr	r1, [r7, #0]
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f8d2 	bl	8001dbc <parse_object>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	e000      	b.n	8001c1e <parse_value+0x1c2>
    }

    return false;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	08006e84 	.word	0x08006e84
 8001c2c:	08006eb4 	.word	0x08006eb4
 8001c30:	08006ebc 	.word	0x08006ebc

08001c34 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c4e:	d301      	bcc.n	8001c54 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001c50:	2300      	movs	r3, #0
 8001c52:	e0af      	b.n	8001db4 <parse_array+0x180>
    }
    input_buffer->depth++;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	4413      	add	r3, r2
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b5b      	cmp	r3, #91	@ 0x5b
 8001c6c:	f040 8094 	bne.w	8001d98 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	1c5a      	adds	r2, r3, #1
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001c7a:	6838      	ldr	r0, [r7, #0]
 8001c7c:	f7ff fdb6 	bl	80017ec <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00d      	beq.n	8001ca2 <parse_array+0x6e>
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d207      	bcs.n	8001ca2 <parse_array+0x6e>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b5d      	cmp	r3, #93	@ 0x5d
 8001ca0:	d061      	beq.n	8001d66 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <parse_array+0x80>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d305      	bcc.n	8001cc0 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	1e5a      	subs	r2, r3, #1
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	609a      	str	r2, [r3, #8]
        goto fail;
 8001cbe:	e072      	b.n	8001da6 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	1e5a      	subs	r2, r3, #1
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	3310      	adds	r3, #16
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff f9be 	bl	8001050 <cJSON_New_Item>
 8001cd4:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d05f      	beq.n	8001d9c <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d104      	bne.n	8001cec <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	e007      	b.n	8001cfc <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001d06:	6838      	ldr	r0, [r7, #0]
 8001d08:	f7ff fd70 	bl	80017ec <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001d0c:	6839      	ldr	r1, [r7, #0]
 8001d0e:	6938      	ldr	r0, [r7, #16]
 8001d10:	f7ff fea4 	bl	8001a5c <parse_value>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d042      	beq.n	8001da0 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001d1a:	6838      	ldr	r0, [r7, #0]
 8001d1c:	f7ff fd66 	bl	80017ec <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00d      	beq.n	8001d42 <parse_array+0x10e>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d207      	bcs.n	8001d42 <parse_array+0x10e>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001d40:	d0c3      	beq.n	8001cca <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d02d      	beq.n	8001da4 <parse_array+0x170>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d227      	bcs.n	8001da4 <parse_array+0x170>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b5d      	cmp	r3, #93	@ 0x5d
 8001d62:	d11f      	bne.n	8001da4 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001d64:	e000      	b.n	8001d68 <parse_array+0x134>
        goto success;
 8001d66:	bf00      	nop
    input_buffer->depth--;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	1e5a      	subs	r2, r3, #1
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <parse_array+0x14a>
        head->prev = current_item;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2220      	movs	r2, #32
 8001d82:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	609a      	str	r2, [r3, #8]

    return true;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e00d      	b.n	8001db4 <parse_array+0x180>
        goto fail;
 8001d98:	bf00      	nop
 8001d9a:	e004      	b.n	8001da6 <parse_array+0x172>
            goto fail; /* allocation failure */
 8001d9c:	bf00      	nop
 8001d9e:	e002      	b.n	8001da6 <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001da0:	bf00      	nop
 8001da2:	e000      	b.n	8001da6 <parse_array+0x172>
        goto fail; /* expected end of array */
 8001da4:	bf00      	nop

fail:
    if (head != NULL)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001dac:	6978      	ldr	r0, [r7, #20]
 8001dae:	f7ff f965 	bl	800107c <cJSON_Delete>
    }

    return false;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001dd6:	d301      	bcc.n	8001ddc <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001dd8:	2300      	movs	r3, #0
 8001dda:	e0f7      	b.n	8001fcc <parse_object+0x210>
    }
    input_buffer->depth++;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 80db 	beq.w	8001fa4 <parse_object+0x1e8>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	f080 80d4 	bcs.w	8001fa4 <parse_object+0x1e8>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	4413      	add	r3, r2
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b7b      	cmp	r3, #123	@ 0x7b
 8001e0a:	f040 80cb 	bne.w	8001fa4 <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001e18:	6838      	ldr	r0, [r7, #0]
 8001e1a:	f7ff fce7 	bl	80017ec <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00e      	beq.n	8001e42 <parse_object+0x86>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d208      	bcs.n	8001e42 <parse_object+0x86>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	4413      	add	r3, r2
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b7d      	cmp	r3, #125	@ 0x7d
 8001e3e:	f000 8098 	beq.w	8001f72 <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <parse_object+0x98>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d305      	bcc.n	8001e60 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	1e5a      	subs	r2, r3, #1
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	609a      	str	r2, [r3, #8]
        goto fail;
 8001e5e:	e0ae      	b.n	8001fbe <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	1e5a      	subs	r2, r3, #1
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	3310      	adds	r3, #16
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff f8ee 	bl	8001050 <cJSON_New_Item>
 8001e74:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 8095 	beq.w	8001fa8 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d104      	bne.n	8001e8e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	e007      	b.n	8001e9e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 8083 	beq.w	8001fac <parse_object+0x1f0>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d27b      	bcs.n	8001fac <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001ebe:	6838      	ldr	r0, [r7, #0]
 8001ec0:	f7ff fc94 	bl	80017ec <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001ec4:	6839      	ldr	r1, [r7, #0]
 8001ec6:	6938      	ldr	r0, [r7, #16]
 8001ec8:	f7ff fb48 	bl	800155c <parse_string>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d06e      	beq.n	8001fb0 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8001ed2:	6838      	ldr	r0, [r7, #0]
 8001ed4:	f7ff fc8a 	bl	80017ec <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	691a      	ldr	r2, [r3, #16]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d063      	beq.n	8001fb4 <parse_object+0x1f8>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d25d      	bcs.n	8001fb4 <parse_object+0x1f8>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	4413      	add	r3, r2
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b3a      	cmp	r3, #58	@ 0x3a
 8001f06:	d155      	bne.n	8001fb4 <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	1c5a      	adds	r2, r3, #1
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001f12:	6838      	ldr	r0, [r7, #0]
 8001f14:	f7ff fc6a 	bl	80017ec <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001f18:	6839      	ldr	r1, [r7, #0]
 8001f1a:	6938      	ldr	r0, [r7, #16]
 8001f1c:	f7ff fd9e 	bl	8001a5c <parse_value>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d048      	beq.n	8001fb8 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001f26:	6838      	ldr	r0, [r7, #0]
 8001f28:	f7ff fc60 	bl	80017ec <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00d      	beq.n	8001f4e <parse_object+0x192>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d207      	bcs.n	8001f4e <parse_object+0x192>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	4413      	add	r3, r2
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b2c      	cmp	r3, #44	@ 0x2c
 8001f4c:	d08d      	beq.n	8001e6a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d033      	beq.n	8001fbc <parse_object+0x200>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d22d      	bcs.n	8001fbc <parse_object+0x200>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4413      	add	r3, r2
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b7d      	cmp	r3, #125	@ 0x7d
 8001f6e:	d125      	bne.n	8001fbc <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 8001f70:	e000      	b.n	8001f74 <parse_object+0x1b8>
        goto success; /* empty object */
 8001f72:	bf00      	nop
    input_buffer->depth--;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	1e5a      	subs	r2, r3, #1
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <parse_object+0x1ce>
        head->prev = current_item;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2240      	movs	r2, #64	@ 0x40
 8001f8e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	609a      	str	r2, [r3, #8]
    return true;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e013      	b.n	8001fcc <parse_object+0x210>
        goto fail; /* not an object */
 8001fa4:	bf00      	nop
 8001fa6:	e00a      	b.n	8001fbe <parse_object+0x202>
            goto fail; /* allocation failure */
 8001fa8:	bf00      	nop
 8001faa:	e008      	b.n	8001fbe <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 8001fac:	bf00      	nop
 8001fae:	e006      	b.n	8001fbe <parse_object+0x202>
            goto fail; /* failed to parse name */
 8001fb0:	bf00      	nop
 8001fb2:	e004      	b.n	8001fbe <parse_object+0x202>
            goto fail; /* invalid object */
 8001fb4:	bf00      	nop
 8001fb6:	e002      	b.n	8001fbe <parse_object+0x202>
            goto fail; /* failed to parse value */
 8001fb8:	bf00      	nop
 8001fba:	e000      	b.n	8001fbe <parse_object+0x202>
        goto fail; /* expected end of object */
 8001fbc:	bf00      	nop

fail:
    if (head != NULL)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d002      	beq.n	8001fca <parse_object+0x20e>
    {
        cJSON_Delete(head);
 8001fc4:	6978      	ldr	r0, [r7, #20]
 8001fc6:	f7ff f859 	bl	800107c <cJSON_Delete>
    }

    return false;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <cJSON_GetArraySize>:
    return true;
}

/* Get Array size/item / object item. */
CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
    cJSON *child = NULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
    size_t size = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60bb      	str	r3, [r7, #8]

    if (array == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <cJSON_GetArraySize+0x1a>
    {
        return 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e00d      	b.n	800200a <cJSON_GetArraySize+0x36>
    }

    child = array->child;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	60fb      	str	r3, [r7, #12]

    while(child != NULL)
 8001ff4:	e005      	b.n	8002002 <cJSON_GetArraySize+0x2e>
    {
        size++;
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	60bb      	str	r3, [r7, #8]
        child = child->next;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60fb      	str	r3, [r7, #12]
    while(child != NULL)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1f6      	bne.n	8001ff6 <cJSON_GetArraySize+0x22>
    }

    /* FIXME: Can overflow here. Cannot be fixed without breaking the API */

    return (int)size;
 8002008:	68bb      	ldr	r3, [r7, #8]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <get_array_item>:

static cJSON* get_array_item(const cJSON *array, size_t index)
{
 8002016:	b480      	push	{r7}
 8002018:	b085      	sub	sp, #20
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
    cJSON *current_child = NULL;
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]

    if (array == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <get_array_item+0x18>
    {
        return NULL;
 800202a:	2300      	movs	r3, #0
 800202c:	e010      	b.n	8002050 <get_array_item+0x3a>
    }

    current_child = array->child;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 8002034:	e005      	b.n	8002042 <get_array_item+0x2c>
    {
        index--;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	3b01      	subs	r3, #1
 800203a:	603b      	str	r3, [r7, #0]
        current_child = current_child->next;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <get_array_item+0x38>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f3      	bne.n	8002036 <get_array_item+0x20>
    }

    return current_child;
 800204e:	68fb      	ldr	r3, [r7, #12]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <cJSON_GetArrayItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
    if (index < 0)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	da01      	bge.n	8002070 <cJSON_GetArrayItem+0x14>
    {
        return NULL;
 800206c:	2300      	movs	r3, #0
 800206e:	e005      	b.n	800207c <cJSON_GetArrayItem+0x20>
    }

    return get_array_item(array, (size_t)index);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	4619      	mov	r1, r3
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff ffce 	bl	8002016 <get_array_item>
 800207a:	4603      	mov	r3, r0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <get_object_item>:

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d002      	beq.n	80020a0 <get_object_item+0x1c>
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <get_object_item+0x20>
    {
        return NULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	e033      	b.n	800210c <get_object_item+0x88>
    }

    current_element = object->child;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d017      	beq.n	80020e0 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80020b0:	e002      	b.n	80020b8 <get_object_item+0x34>
        {
            current_element = current_element->next;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d01c      	beq.n	80020f8 <get_object_item+0x74>
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d018      	beq.n	80020f8 <get_object_item+0x74>
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	4619      	mov	r1, r3
 80020cc:	68b8      	ldr	r0, [r7, #8]
 80020ce:	f7fe f8a7 	bl	8000220 <strcmp>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1ec      	bne.n	80020b2 <get_object_item+0x2e>
 80020d8:	e00e      	b.n	80020f8 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d008      	beq.n	80020f8 <get_object_item+0x74>
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	4619      	mov	r1, r3
 80020ec:	68b8      	ldr	r0, [r7, #8]
 80020ee:	f7fe ff43 	bl	8000f78 <case_insensitive_strcmp>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f0      	bne.n	80020da <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <get_object_item+0x82>
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <get_object_item+0x86>
        return NULL;
 8002106:	2300      	movs	r3, #0
 8002108:	e000      	b.n	800210c <get_object_item+0x88>
    }

    return current_element;
 800210a:	697b      	ldr	r3, [r7, #20]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 800211e:	2200      	movs	r2, #0
 8002120:	6839      	ldr	r1, [r7, #0]
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ffae 	bl	8002084 <get_object_item>
 8002128:	4603      	mov	r3, r0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <cJSON_IsNumber+0x12>
    {
        return false;
 8002140:	2300      	movs	r3, #0
 8002142:	e007      	b.n	8002154 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b08      	cmp	r3, #8
 800214c:	bf0c      	ite	eq
 800214e:	2301      	moveq	r3, #1
 8002150:	2300      	movne	r3, #0
 8002152:	b2db      	uxtb	r3, r3
}
 8002154:	4618      	mov	r0, r3
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <cJSON_IsString+0x12>
    {
        return false;
 800216e:	2300      	movs	r3, #0
 8002170:	e007      	b.n	8002182 <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b10      	cmp	r3, #16
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <cJSON_IsArray>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <cJSON_IsArray+0x12>
    {
        return false;
 800219c:	2300      	movs	r3, #0
 800219e:	e007      	b.n	80021b0 <cJSON_IsArray+0x22>
    }

    return (item->type & 0xFF) == cJSON_Array;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b20      	cmp	r3, #32
 80021a8:	bf0c      	ite	eq
 80021aa:	2301      	moveq	r3, #1
 80021ac:	2300      	movne	r3, #0
 80021ae:	b2db      	uxtb	r3, r3
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <cJSON_IsObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <cJSON_IsObject+0x12>
    {
        return false;
 80021ca:	2300      	movs	r3, #0
 80021cc:	e007      	b.n	80021de <cJSON_IsObject+0x22>
    }

    return (item->type & 0xFF) == cJSON_Object;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b40      	cmp	r3, #64	@ 0x40
 80021d6:	bf0c      	ite	eq
 80021d8:	2301      	moveq	r3, #1
 80021da:	2300      	movne	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021f2:	f000 fb87 	bl	8002904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021f6:	f000 f851 	bl	800229c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021fa:	f000 f8d9 	bl	80023b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80021fe:	f000 f8ad 	bl	800235c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Simulate receiving JSON message
   process_json_message(jsonEx);
 8002202:	4b1e      	ldr	r3, [pc, #120]	@ (800227c <main+0x90>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f000 f902 	bl	8002410 <process_json_message>

      // Print out the events parsed
   	   send_uart_message("Events parsed:\n");
 800220c:	481c      	ldr	r0, [pc, #112]	@ (8002280 <main+0x94>)
 800220e:	f000 f8e9 	bl	80023e4 <send_uart_message>
          for (int i = 0; i < eventCount; i++) {
 8002212:	2300      	movs	r3, #0
 8002214:	607b      	str	r3, [r7, #4]
 8002216:	e029      	b.n	800226c <main+0x80>
        	  send_uart_message("Event %d:\n", i + 1);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3301      	adds	r3, #1
 800221c:	4619      	mov	r1, r3
 800221e:	4819      	ldr	r0, [pc, #100]	@ (8002284 <main+0x98>)
 8002220:	f000 f8e0 	bl	80023e4 <send_uart_message>
        	  send_uart_message("  Melody Name: %s\n", events[i].melodyName);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	22cc      	movs	r2, #204	@ 0xcc
 8002228:	fb02 f303 	mul.w	r3, r2, r3
 800222c:	4a16      	ldr	r2, [pc, #88]	@ (8002288 <main+0x9c>)
 800222e:	4413      	add	r3, r2
 8002230:	4619      	mov	r1, r3
 8002232:	4816      	ldr	r0, [pc, #88]	@ (800228c <main+0xa0>)
 8002234:	f000 f8d6 	bl	80023e4 <send_uart_message>
        	  send_uart_message("  Melody Number: %d\n", events[i].melodyNumber);
 8002238:	4a13      	ldr	r2, [pc, #76]	@ (8002288 <main+0x9c>)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	21cc      	movs	r1, #204	@ 0xcc
 800223e:	fb01 f303 	mul.w	r3, r1, r3
 8002242:	4413      	add	r3, r2
 8002244:	3364      	adds	r3, #100	@ 0x64
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4619      	mov	r1, r3
 800224a:	4811      	ldr	r0, [pc, #68]	@ (8002290 <main+0xa4>)
 800224c:	f000 f8ca 	bl	80023e4 <send_uart_message>
        	  send_uart_message("  Time: %s\n", events[i].time);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	22cc      	movs	r2, #204	@ 0xcc
 8002254:	fb02 f303 	mul.w	r3, r2, r3
 8002258:	3368      	adds	r3, #104	@ 0x68
 800225a:	4a0b      	ldr	r2, [pc, #44]	@ (8002288 <main+0x9c>)
 800225c:	4413      	add	r3, r2
 800225e:	4619      	mov	r1, r3
 8002260:	480c      	ldr	r0, [pc, #48]	@ (8002294 <main+0xa8>)
 8002262:	f000 f8bf 	bl	80023e4 <send_uart_message>
          for (int i = 0; i < eventCount; i++) {
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3301      	adds	r3, #1
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	4b0a      	ldr	r3, [pc, #40]	@ (8002298 <main+0xac>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	429a      	cmp	r2, r3
 8002274:	dbd0      	blt.n	8002218 <main+0x2c>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002276:	bf00      	nop
 8002278:	e7fd      	b.n	8002276 <main+0x8a>
 800227a:	bf00      	nop
 800227c:	2000000c 	.word	0x2000000c
 8002280:	08007890 	.word	0x08007890
 8002284:	080078a0 	.word	0x080078a0
 8002288:	20000250 	.word	0x20000250
 800228c:	080078ac 	.word	0x080078ac
 8002290:	080078c0 	.word	0x080078c0
 8002294:	080078d8 	.word	0x080078d8
 8002298:	20005200 	.word	0x20005200

0800229c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b094      	sub	sp, #80	@ 0x50
 80022a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022a2:	f107 031c 	add.w	r3, r7, #28
 80022a6:	2234      	movs	r2, #52	@ 0x34
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f002 ffb3 	bl	8005216 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022b0:	f107 0308 	add.w	r3, r7, #8
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c0:	2300      	movs	r3, #0
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	4b23      	ldr	r3, [pc, #140]	@ (8002354 <SystemClock_Config+0xb8>)
 80022c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c8:	4a22      	ldr	r2, [pc, #136]	@ (8002354 <SystemClock_Config+0xb8>)
 80022ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80022d0:	4b20      	ldr	r3, [pc, #128]	@ (8002354 <SystemClock_Config+0xb8>)
 80022d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80022dc:	2300      	movs	r3, #0
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002358 <SystemClock_Config+0xbc>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80022e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002358 <SystemClock_Config+0xbc>)
 80022ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	4b19      	ldr	r3, [pc, #100]	@ (8002358 <SystemClock_Config+0xbc>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80022f8:	603b      	str	r3, [r7, #0]
 80022fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022fc:	2302      	movs	r3, #2
 80022fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002300:	2301      	movs	r3, #1
 8002302:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002304:	2310      	movs	r3, #16
 8002306:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002308:	2300      	movs	r3, #0
 800230a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800230c:	f107 031c 	add.w	r3, r7, #28
 8002310:	4618      	mov	r0, r3
 8002312:	f001 f8a7 	bl	8003464 <HAL_RCC_OscConfig>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800231c:	f000 f94a 	bl	80025b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002320:	230f      	movs	r3, #15
 8002322:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002328:	2300      	movs	r3, #0
 800232a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002330:	2300      	movs	r3, #0
 8002332:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002334:	f107 0308 	add.w	r3, r7, #8
 8002338:	2100      	movs	r1, #0
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fdce 	bl	8002edc <HAL_RCC_ClockConfig>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002346:	f000 f935 	bl	80025b4 <Error_Handler>
  }
}
 800234a:	bf00      	nop
 800234c:	3750      	adds	r7, #80	@ 0x50
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40023800 	.word	0x40023800
 8002358:	40007000 	.word	0x40007000

0800235c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002360:	4b11      	ldr	r3, [pc, #68]	@ (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002362:	4a12      	ldr	r2, [pc, #72]	@ (80023ac <MX_USART2_UART_Init+0x50>)
 8002364:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002366:	4b10      	ldr	r3, [pc, #64]	@ (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002368:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800236c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800236e:	4b0e      	ldr	r3, [pc, #56]	@ (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002370:	2200      	movs	r2, #0
 8002372:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002374:	4b0c      	ldr	r3, [pc, #48]	@ (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002376:	2200      	movs	r2, #0
 8002378:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800237a:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <MX_USART2_UART_Init+0x4c>)
 800237c:	2200      	movs	r2, #0
 800237e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002380:	4b09      	ldr	r3, [pc, #36]	@ (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002382:	220c      	movs	r2, #12
 8002384:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002386:	4b08      	ldr	r3, [pc, #32]	@ (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002388:	2200      	movs	r2, #0
 800238a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800238c:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <MX_USART2_UART_Init+0x4c>)
 800238e:	2200      	movs	r2, #0
 8002390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002392:	4805      	ldr	r0, [pc, #20]	@ (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002394:	f001 fb04 	bl	80039a0 <HAL_UART_Init>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800239e:	f000 f909 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000208 	.word	0x20000208
 80023ac:	40004400 	.word	0x40004400

080023b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	4b09      	ldr	r3, [pc, #36]	@ (80023e0 <MX_GPIO_Init+0x30>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023be:	4a08      	ldr	r2, [pc, #32]	@ (80023e0 <MX_GPIO_Init+0x30>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023c6:	4b06      	ldr	r3, [pc, #24]	@ (80023e0 <MX_GPIO_Init+0x30>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800

080023e4 <send_uart_message>:

/* USER CODE BEGIN 4 */

void send_uart_message(char *message) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7fd ff0f 	bl	8000210 <strlen>
 80023f2:	4603      	mov	r3, r0
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4803      	ldr	r0, [pc, #12]	@ (800240c <send_uart_message+0x28>)
 80023fe:	f001 fb1f 	bl	8003a40 <HAL_UART_Transmit>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000208 	.word	0x20000208

08002410 <process_json_message>:

/**
 * @brief Parse and save the event in the array
 * @param message, pointer to the string parsed as a json
 */
void process_json_message(const char *message) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b0be      	sub	sp, #248	@ 0xf8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
    cJSON *json = cJSON_Parse(message);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff fb11 	bl	8001a40 <cJSON_Parse>
 800241e:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
    if (json == NULL) {
 8002422:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 80b1 	beq.w	800258e <process_json_message+0x17e>
        // JSON parsing failed
        return;
    }

    // Get the "documents" array
    cJSON *documents = cJSON_GetObjectItem(json, "documents");
 800242c:	495a      	ldr	r1, [pc, #360]	@ (8002598 <process_json_message+0x188>)
 800242e:	f8d7 00f0 	ldr.w	r0, [r7, #240]	@ 0xf0
 8002432:	f7ff fe6f 	bl	8002114 <cJSON_GetObjectItem>
 8002436:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
    if (documents == NULL || !cJSON_IsArray(documents)) {
 800243a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800243e:	2b00      	cmp	r3, #0
 8002440:	d006      	beq.n	8002450 <process_json_message+0x40>
 8002442:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8002446:	f7ff fea2 	bl	800218e <cJSON_IsArray>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d104      	bne.n	800245a <process_json_message+0x4a>
        // No valid "documents" array found
        cJSON_Delete(json);
 8002450:	f8d7 00f0 	ldr.w	r0, [r7, #240]	@ 0xf0
 8002454:	f7fe fe12 	bl	800107c <cJSON_Delete>
        return;
 8002458:	e09a      	b.n	8002590 <process_json_message+0x180>
    }

    int arraySize = cJSON_GetArraySize(documents);
 800245a:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 800245e:	f7ff fdb9 	bl	8001fd4 <cJSON_GetArraySize>
 8002462:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
    for (int i = 0; i < arraySize; i++) {
 8002466:	2300      	movs	r3, #0
 8002468:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800246c:	e083      	b.n	8002576 <process_json_message+0x166>
        cJSON *eventObj = cJSON_GetArrayItem(documents, i);
 800246e:	f8d7 10f4 	ldr.w	r1, [r7, #244]	@ 0xf4
 8002472:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8002476:	f7ff fdf1 	bl	800205c <cJSON_GetArrayItem>
 800247a:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
        if (eventObj == NULL || !cJSON_IsObject(eventObj)) {
 800247e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002482:	2b00      	cmp	r3, #0
 8002484:	d06f      	beq.n	8002566 <process_json_message+0x156>
 8002486:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800248a:	f7ff fe97 	bl	80021bc <cJSON_IsObject>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d068      	beq.n	8002566 <process_json_message+0x156>
            continue; // Skip if not a valid object
        }

        // Extract fields from the event object
        cJSON *fields = cJSON_GetObjectItem(eventObj, "fields");
 8002494:	4941      	ldr	r1, [pc, #260]	@ (800259c <process_json_message+0x18c>)
 8002496:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800249a:	f7ff fe3b 	bl	8002114 <cJSON_GetObjectItem>
 800249e:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
        if (fields == NULL || !cJSON_IsObject(fields)) {
 80024a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d05f      	beq.n	800256a <process_json_message+0x15a>
 80024aa:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 80024ae:	f7ff fe85 	bl	80021bc <cJSON_IsObject>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d058      	beq.n	800256a <process_json_message+0x15a>
            continue; // Skip if no valid "fields" object
        }

        cJSON *melodyNameObj = cJSON_GetObjectItem(fields, "melodyName");
 80024b8:	4939      	ldr	r1, [pc, #228]	@ (80025a0 <process_json_message+0x190>)
 80024ba:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 80024be:	f7ff fe29 	bl	8002114 <cJSON_GetObjectItem>
 80024c2:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        cJSON *melodyNumberObj = cJSON_GetObjectItem(fields, "melodyNumber");
 80024c6:	4937      	ldr	r1, [pc, #220]	@ (80025a4 <process_json_message+0x194>)
 80024c8:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 80024cc:	f7ff fe22 	bl	8002114 <cJSON_GetObjectItem>
 80024d0:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
        cJSON *timeObj = cJSON_GetObjectItem(fields, "time");
 80024d4:	4934      	ldr	r1, [pc, #208]	@ (80025a8 <process_json_message+0x198>)
 80024d6:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 80024da:	f7ff fe1b 	bl	8002114 <cJSON_GetObjectItem>
 80024de:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        if (cJSON_IsString(melodyNameObj) && cJSON_IsNumber(melodyNumberObj) && cJSON_IsString(timeObj)) {
 80024e2:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80024e6:	f7ff fe3b 	bl	8002160 <cJSON_IsString>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d03d      	beq.n	800256c <process_json_message+0x15c>
 80024f0:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 80024f4:	f7ff fe1d 	bl	8002132 <cJSON_IsNumber>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d036      	beq.n	800256c <process_json_message+0x15c>
 80024fe:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8002502:	f7ff fe2d 	bl	8002160 <cJSON_IsString>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d02f      	beq.n	800256c <process_json_message+0x15c>
            // Create a new event
            Event newEvent;
            strncpy(newEvent.melodyName, melodyNameObj->valuestring, MAX_STRING_SIZE);
 800250c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002510:	6919      	ldr	r1, [r3, #16]
 8002512:	f107 0308 	add.w	r3, r7, #8
 8002516:	2264      	movs	r2, #100	@ 0x64
 8002518:	4618      	mov	r0, r3
 800251a:	f002 fe69 	bl	80051f0 <strncpy>
            newEvent.melodyNumber = melodyNumberObj->valueint;
 800251e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	66fb      	str	r3, [r7, #108]	@ 0x6c
            strncpy(newEvent.time, timeObj->valuestring, MAX_STRING_SIZE);
 8002526:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800252a:	6919      	ldr	r1, [r3, #16]
 800252c:	f107 0308 	add.w	r3, r7, #8
 8002530:	3368      	adds	r3, #104	@ 0x68
 8002532:	2264      	movs	r2, #100	@ 0x64
 8002534:	4618      	mov	r0, r3
 8002536:	f002 fe5b 	bl	80051f0 <strncpy>

            // Add the event to the array if there's space
            if (eventCount < MAX_EVENTS) {
 800253a:	4b1c      	ldr	r3, [pc, #112]	@ (80025ac <process_json_message+0x19c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b63      	cmp	r3, #99	@ 0x63
 8002540:	dc14      	bgt.n	800256c <process_json_message+0x15c>
                events[eventCount++] = newEvent;
 8002542:	4b1a      	ldr	r3, [pc, #104]	@ (80025ac <process_json_message+0x19c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	4918      	ldr	r1, [pc, #96]	@ (80025ac <process_json_message+0x19c>)
 800254a:	600a      	str	r2, [r1, #0]
 800254c:	4a18      	ldr	r2, [pc, #96]	@ (80025b0 <process_json_message+0x1a0>)
 800254e:	21cc      	movs	r1, #204	@ 0xcc
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	4413      	add	r3, r2
 8002556:	4618      	mov	r0, r3
 8002558:	f107 0308 	add.w	r3, r7, #8
 800255c:	22cc      	movs	r2, #204	@ 0xcc
 800255e:	4619      	mov	r1, r3
 8002560:	f002 fee5 	bl	800532e <memcpy>
 8002564:	e002      	b.n	800256c <process_json_message+0x15c>
            continue; // Skip if not a valid object
 8002566:	bf00      	nop
 8002568:	e000      	b.n	800256c <process_json_message+0x15c>
            continue; // Skip if no valid "fields" object
 800256a:	bf00      	nop
    for (int i = 0; i < arraySize; i++) {
 800256c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002570:	3301      	adds	r3, #1
 8002572:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002576:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800257a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800257e:	429a      	cmp	r2, r3
 8002580:	f6ff af75 	blt.w	800246e <process_json_message+0x5e>
            }
        }
    }

    // Free JSON object
    cJSON_Delete(json);
 8002584:	f8d7 00f0 	ldr.w	r0, [r7, #240]	@ 0xf0
 8002588:	f7fe fd78 	bl	800107c <cJSON_Delete>
 800258c:	e000      	b.n	8002590 <process_json_message+0x180>
        return;
 800258e:	bf00      	nop
}
 8002590:	37f8      	adds	r7, #248	@ 0xf8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	080078e4 	.word	0x080078e4
 800259c:	080078f0 	.word	0x080078f0
 80025a0:	080078f8 	.word	0x080078f8
 80025a4:	08007904 	.word	0x08007904
 80025a8:	08007914 	.word	0x08007914
 80025ac:	20005200 	.word	0x20005200
 80025b0:	20000250 	.word	0x20000250

080025b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025b8:	b672      	cpsid	i
}
 80025ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025bc:	bf00      	nop
 80025be:	e7fd      	b.n	80025bc <Error_Handler+0x8>

080025c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	607b      	str	r3, [r7, #4]
 80025ca:	4b10      	ldr	r3, [pc, #64]	@ (800260c <HAL_MspInit+0x4c>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ce:	4a0f      	ldr	r2, [pc, #60]	@ (800260c <HAL_MspInit+0x4c>)
 80025d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025d6:	4b0d      	ldr	r3, [pc, #52]	@ (800260c <HAL_MspInit+0x4c>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025de:	607b      	str	r3, [r7, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	603b      	str	r3, [r7, #0]
 80025e6:	4b09      	ldr	r3, [pc, #36]	@ (800260c <HAL_MspInit+0x4c>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ea:	4a08      	ldr	r2, [pc, #32]	@ (800260c <HAL_MspInit+0x4c>)
 80025ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025f2:	4b06      	ldr	r3, [pc, #24]	@ (800260c <HAL_MspInit+0x4c>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40023800 	.word	0x40023800

08002610 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08a      	sub	sp, #40	@ 0x28
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a19      	ldr	r2, [pc, #100]	@ (8002694 <HAL_UART_MspInit+0x84>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d12b      	bne.n	800268a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	4b18      	ldr	r3, [pc, #96]	@ (8002698 <HAL_UART_MspInit+0x88>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263a:	4a17      	ldr	r2, [pc, #92]	@ (8002698 <HAL_UART_MspInit+0x88>)
 800263c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002640:	6413      	str	r3, [r2, #64]	@ 0x40
 8002642:	4b15      	ldr	r3, [pc, #84]	@ (8002698 <HAL_UART_MspInit+0x88>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	4b11      	ldr	r3, [pc, #68]	@ (8002698 <HAL_UART_MspInit+0x88>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	4a10      	ldr	r2, [pc, #64]	@ (8002698 <HAL_UART_MspInit+0x88>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	6313      	str	r3, [r2, #48]	@ 0x30
 800265e:	4b0e      	ldr	r3, [pc, #56]	@ (8002698 <HAL_UART_MspInit+0x88>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800266a:	230c      	movs	r3, #12
 800266c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266e:	2302      	movs	r3, #2
 8002670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002676:	2303      	movs	r3, #3
 8002678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800267a:	2307      	movs	r3, #7
 800267c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267e:	f107 0314 	add.w	r3, r7, #20
 8002682:	4619      	mov	r1, r3
 8002684:	4805      	ldr	r0, [pc, #20]	@ (800269c <HAL_UART_MspInit+0x8c>)
 8002686:	f000 fa95 	bl	8002bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800268a:	bf00      	nop
 800268c:	3728      	adds	r7, #40	@ 0x28
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40004400 	.word	0x40004400
 8002698:	40023800 	.word	0x40023800
 800269c:	40020000 	.word	0x40020000

080026a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <NMI_Handler+0x4>

080026a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ac:	bf00      	nop
 80026ae:	e7fd      	b.n	80026ac <HardFault_Handler+0x4>

080026b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026b4:	bf00      	nop
 80026b6:	e7fd      	b.n	80026b4 <MemManage_Handler+0x4>

080026b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026bc:	bf00      	nop
 80026be:	e7fd      	b.n	80026bc <BusFault_Handler+0x4>

080026c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026c4:	bf00      	nop
 80026c6:	e7fd      	b.n	80026c4 <UsageFault_Handler+0x4>

080026c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026f6:	f000 f957 	bl	80029a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}

080026fe <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026fe:	b480      	push	{r7}
 8002700:	af00      	add	r7, sp, #0
  return 1;
 8002702:	2301      	movs	r3, #1
}
 8002704:	4618      	mov	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <_kill>:

int _kill(int pid, int sig)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002718:	f002 fddc 	bl	80052d4 <__errno>
 800271c:	4603      	mov	r3, r0
 800271e:	2216      	movs	r2, #22
 8002720:	601a      	str	r2, [r3, #0]
  return -1;
 8002722:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <_exit>:

void _exit (int status)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002736:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff ffe7 	bl	800270e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002740:	bf00      	nop
 8002742:	e7fd      	b.n	8002740 <_exit+0x12>

08002744 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	e00a      	b.n	800276c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002756:	f3af 8000 	nop.w
 800275a:	4601      	mov	r1, r0
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	60ba      	str	r2, [r7, #8]
 8002762:	b2ca      	uxtb	r2, r1
 8002764:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	3301      	adds	r3, #1
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	429a      	cmp	r2, r3
 8002772:	dbf0      	blt.n	8002756 <_read+0x12>
  }

  return len;
 8002774:	687b      	ldr	r3, [r7, #4]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b086      	sub	sp, #24
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	e009      	b.n	80027a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	60ba      	str	r2, [r7, #8]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	3301      	adds	r3, #1
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	dbf1      	blt.n	8002790 <_write+0x12>
  }
  return len;
 80027ac:	687b      	ldr	r3, [r7, #4]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <_close>:

int _close(int file)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027de:	605a      	str	r2, [r3, #4]
  return 0;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <_isatty>:

int _isatty(int file)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027f6:	2301      	movs	r3, #1
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002828:	4a14      	ldr	r2, [pc, #80]	@ (800287c <_sbrk+0x5c>)
 800282a:	4b15      	ldr	r3, [pc, #84]	@ (8002880 <_sbrk+0x60>)
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002834:	4b13      	ldr	r3, [pc, #76]	@ (8002884 <_sbrk+0x64>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d102      	bne.n	8002842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800283c:	4b11      	ldr	r3, [pc, #68]	@ (8002884 <_sbrk+0x64>)
 800283e:	4a12      	ldr	r2, [pc, #72]	@ (8002888 <_sbrk+0x68>)
 8002840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002842:	4b10      	ldr	r3, [pc, #64]	@ (8002884 <_sbrk+0x64>)
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4413      	add	r3, r2
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	429a      	cmp	r2, r3
 800284e:	d207      	bcs.n	8002860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002850:	f002 fd40 	bl	80052d4 <__errno>
 8002854:	4603      	mov	r3, r0
 8002856:	220c      	movs	r2, #12
 8002858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800285a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800285e:	e009      	b.n	8002874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002860:	4b08      	ldr	r3, [pc, #32]	@ (8002884 <_sbrk+0x64>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002866:	4b07      	ldr	r3, [pc, #28]	@ (8002884 <_sbrk+0x64>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	4a05      	ldr	r2, [pc, #20]	@ (8002884 <_sbrk+0x64>)
 8002870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002872:	68fb      	ldr	r3, [r7, #12]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20020000 	.word	0x20020000
 8002880:	00000400 	.word	0x00000400
 8002884:	20005204 	.word	0x20005204
 8002888:	20005358 	.word	0x20005358

0800288c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002890:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <SystemInit+0x20>)
 8002892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002896:	4a05      	ldr	r2, [pc, #20]	@ (80028ac <SystemInit+0x20>)
 8002898:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800289c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80028b4:	f7ff ffea 	bl	800288c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028b8:	480c      	ldr	r0, [pc, #48]	@ (80028ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028ba:	490d      	ldr	r1, [pc, #52]	@ (80028f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028bc:	4a0d      	ldr	r2, [pc, #52]	@ (80028f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028c0:	e002      	b.n	80028c8 <LoopCopyDataInit>

080028c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028c6:	3304      	adds	r3, #4

080028c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028cc:	d3f9      	bcc.n	80028c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ce:	4a0a      	ldr	r2, [pc, #40]	@ (80028f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028d0:	4c0a      	ldr	r4, [pc, #40]	@ (80028fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80028d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028d4:	e001      	b.n	80028da <LoopFillZerobss>

080028d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028d8:	3204      	adds	r2, #4

080028da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028dc:	d3fb      	bcc.n	80028d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80028de:	f002 fcff 	bl	80052e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028e2:	f7ff fc83 	bl	80021ec <main>
  bx  lr    
 80028e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028f0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80028f4:	08007d00 	.word	0x08007d00
  ldr r2, =_sbss
 80028f8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80028fc:	20005358 	.word	0x20005358

08002900 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002900:	e7fe      	b.n	8002900 <ADC_IRQHandler>
	...

08002904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002908:	4b0e      	ldr	r3, [pc, #56]	@ (8002944 <HAL_Init+0x40>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0d      	ldr	r2, [pc, #52]	@ (8002944 <HAL_Init+0x40>)
 800290e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002912:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002914:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <HAL_Init+0x40>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a0a      	ldr	r2, [pc, #40]	@ (8002944 <HAL_Init+0x40>)
 800291a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800291e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002920:	4b08      	ldr	r3, [pc, #32]	@ (8002944 <HAL_Init+0x40>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a07      	ldr	r2, [pc, #28]	@ (8002944 <HAL_Init+0x40>)
 8002926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800292a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800292c:	2003      	movs	r0, #3
 800292e:	f000 f90d 	bl	8002b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002932:	200f      	movs	r0, #15
 8002934:	f000 f808 	bl	8002948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002938:	f7ff fe42 	bl	80025c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40023c00 	.word	0x40023c00

08002948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002950:	4b12      	ldr	r3, [pc, #72]	@ (800299c <HAL_InitTick+0x54>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	4b12      	ldr	r3, [pc, #72]	@ (80029a0 <HAL_InitTick+0x58>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	4619      	mov	r1, r3
 800295a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800295e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002962:	fbb2 f3f3 	udiv	r3, r2, r3
 8002966:	4618      	mov	r0, r3
 8002968:	f000 f917 	bl	8002b9a <HAL_SYSTICK_Config>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e00e      	b.n	8002994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b0f      	cmp	r3, #15
 800297a:	d80a      	bhi.n	8002992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800297c:	2200      	movs	r2, #0
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002984:	f000 f8ed 	bl	8002b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002988:	4a06      	ldr	r2, [pc, #24]	@ (80029a4 <HAL_InitTick+0x5c>)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	e000      	b.n	8002994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
}
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	20000010 	.word	0x20000010
 80029a0:	20000018 	.word	0x20000018
 80029a4:	20000014 	.word	0x20000014

080029a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029ac:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <HAL_IncTick+0x20>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <HAL_IncTick+0x24>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4413      	add	r3, r2
 80029b8:	4a04      	ldr	r2, [pc, #16]	@ (80029cc <HAL_IncTick+0x24>)
 80029ba:	6013      	str	r3, [r2, #0]
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	20000018 	.word	0x20000018
 80029cc:	20005208 	.word	0x20005208

080029d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return uwTick;
 80029d4:	4b03      	ldr	r3, [pc, #12]	@ (80029e4 <HAL_GetTick+0x14>)
 80029d6:	681b      	ldr	r3, [r3, #0]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	20005208 	.word	0x20005208

080029e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f8:	4b0c      	ldr	r3, [pc, #48]	@ (8002a2c <__NVIC_SetPriorityGrouping+0x44>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a04:	4013      	ands	r3, r2
 8002a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a1a:	4a04      	ldr	r2, [pc, #16]	@ (8002a2c <__NVIC_SetPriorityGrouping+0x44>)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	60d3      	str	r3, [r2, #12]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a34:	4b04      	ldr	r3, [pc, #16]	@ (8002a48 <__NVIC_GetPriorityGrouping+0x18>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	0a1b      	lsrs	r3, r3, #8
 8002a3a:	f003 0307 	and.w	r3, r3, #7
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	6039      	str	r1, [r7, #0]
 8002a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	db0a      	blt.n	8002a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	490c      	ldr	r1, [pc, #48]	@ (8002a98 <__NVIC_SetPriority+0x4c>)
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	0112      	lsls	r2, r2, #4
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	440b      	add	r3, r1
 8002a70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a74:	e00a      	b.n	8002a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	4908      	ldr	r1, [pc, #32]	@ (8002a9c <__NVIC_SetPriority+0x50>)
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	3b04      	subs	r3, #4
 8002a84:	0112      	lsls	r2, r2, #4
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	440b      	add	r3, r1
 8002a8a:	761a      	strb	r2, [r3, #24]
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	e000e100 	.word	0xe000e100
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b089      	sub	sp, #36	@ 0x24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f1c3 0307 	rsb	r3, r3, #7
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	bf28      	it	cs
 8002abe:	2304      	movcs	r3, #4
 8002ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	2b06      	cmp	r3, #6
 8002ac8:	d902      	bls.n	8002ad0 <NVIC_EncodePriority+0x30>
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	3b03      	subs	r3, #3
 8002ace:	e000      	b.n	8002ad2 <NVIC_EncodePriority+0x32>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43da      	mvns	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	401a      	ands	r2, r3
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ae8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	fa01 f303 	lsl.w	r3, r1, r3
 8002af2:	43d9      	mvns	r1, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af8:	4313      	orrs	r3, r2
         );
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3724      	adds	r7, #36	@ 0x24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
	...

08002b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b18:	d301      	bcc.n	8002b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e00f      	b.n	8002b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b48 <SysTick_Config+0x40>)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b26:	210f      	movs	r1, #15
 8002b28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b2c:	f7ff ff8e 	bl	8002a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b30:	4b05      	ldr	r3, [pc, #20]	@ (8002b48 <SysTick_Config+0x40>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b36:	4b04      	ldr	r3, [pc, #16]	@ (8002b48 <SysTick_Config+0x40>)
 8002b38:	2207      	movs	r2, #7
 8002b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	e000e010 	.word	0xe000e010

08002b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff ff47 	bl	80029e8 <__NVIC_SetPriorityGrouping>
}
 8002b5a:	bf00      	nop
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b086      	sub	sp, #24
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	4603      	mov	r3, r0
 8002b6a:	60b9      	str	r1, [r7, #8]
 8002b6c:	607a      	str	r2, [r7, #4]
 8002b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b74:	f7ff ff5c 	bl	8002a30 <__NVIC_GetPriorityGrouping>
 8002b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	68b9      	ldr	r1, [r7, #8]
 8002b7e:	6978      	ldr	r0, [r7, #20]
 8002b80:	f7ff ff8e 	bl	8002aa0 <NVIC_EncodePriority>
 8002b84:	4602      	mov	r2, r0
 8002b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff ff5d 	bl	8002a4c <__NVIC_SetPriority>
}
 8002b92:	bf00      	nop
 8002b94:	3718      	adds	r7, #24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7ff ffb0 	bl	8002b08 <SysTick_Config>
 8002ba8:	4603      	mov	r3, r0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b089      	sub	sp, #36	@ 0x24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61fb      	str	r3, [r7, #28]
 8002bce:	e165      	b.n	8002e9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	4013      	ands	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	f040 8154 	bne.w	8002e96 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d005      	beq.n	8002c06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d130      	bne.n	8002c68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	2203      	movs	r2, #3
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	091b      	lsrs	r3, r3, #4
 8002c52:	f003 0201 	and.w	r2, r3, #1
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d017      	beq.n	8002ca4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	2203      	movs	r2, #3
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d123      	bne.n	8002cf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	08da      	lsrs	r2, r3, #3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3208      	adds	r2, #8
 8002cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	220f      	movs	r2, #15
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	08da      	lsrs	r2, r3, #3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3208      	adds	r2, #8
 8002cf2:	69b9      	ldr	r1, [r7, #24]
 8002cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	2203      	movs	r2, #3
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 0203 	and.w	r2, r3, #3
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 80ae 	beq.w	8002e96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	4b5d      	ldr	r3, [pc, #372]	@ (8002eb4 <HAL_GPIO_Init+0x300>)
 8002d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d42:	4a5c      	ldr	r2, [pc, #368]	@ (8002eb4 <HAL_GPIO_Init+0x300>)
 8002d44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d48:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d4a:	4b5a      	ldr	r3, [pc, #360]	@ (8002eb4 <HAL_GPIO_Init+0x300>)
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d56:	4a58      	ldr	r2, [pc, #352]	@ (8002eb8 <HAL_GPIO_Init+0x304>)
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	089b      	lsrs	r3, r3, #2
 8002d5c:	3302      	adds	r3, #2
 8002d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	220f      	movs	r2, #15
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a4f      	ldr	r2, [pc, #316]	@ (8002ebc <HAL_GPIO_Init+0x308>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d025      	beq.n	8002dce <HAL_GPIO_Init+0x21a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a4e      	ldr	r2, [pc, #312]	@ (8002ec0 <HAL_GPIO_Init+0x30c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d01f      	beq.n	8002dca <HAL_GPIO_Init+0x216>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a4d      	ldr	r2, [pc, #308]	@ (8002ec4 <HAL_GPIO_Init+0x310>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d019      	beq.n	8002dc6 <HAL_GPIO_Init+0x212>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a4c      	ldr	r2, [pc, #304]	@ (8002ec8 <HAL_GPIO_Init+0x314>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d013      	beq.n	8002dc2 <HAL_GPIO_Init+0x20e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a4b      	ldr	r2, [pc, #300]	@ (8002ecc <HAL_GPIO_Init+0x318>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d00d      	beq.n	8002dbe <HAL_GPIO_Init+0x20a>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a4a      	ldr	r2, [pc, #296]	@ (8002ed0 <HAL_GPIO_Init+0x31c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d007      	beq.n	8002dba <HAL_GPIO_Init+0x206>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a49      	ldr	r2, [pc, #292]	@ (8002ed4 <HAL_GPIO_Init+0x320>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d101      	bne.n	8002db6 <HAL_GPIO_Init+0x202>
 8002db2:	2306      	movs	r3, #6
 8002db4:	e00c      	b.n	8002dd0 <HAL_GPIO_Init+0x21c>
 8002db6:	2307      	movs	r3, #7
 8002db8:	e00a      	b.n	8002dd0 <HAL_GPIO_Init+0x21c>
 8002dba:	2305      	movs	r3, #5
 8002dbc:	e008      	b.n	8002dd0 <HAL_GPIO_Init+0x21c>
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	e006      	b.n	8002dd0 <HAL_GPIO_Init+0x21c>
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e004      	b.n	8002dd0 <HAL_GPIO_Init+0x21c>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e002      	b.n	8002dd0 <HAL_GPIO_Init+0x21c>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <HAL_GPIO_Init+0x21c>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	69fa      	ldr	r2, [r7, #28]
 8002dd2:	f002 0203 	and.w	r2, r2, #3
 8002dd6:	0092      	lsls	r2, r2, #2
 8002dd8:	4093      	lsls	r3, r2
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002de0:	4935      	ldr	r1, [pc, #212]	@ (8002eb8 <HAL_GPIO_Init+0x304>)
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	3302      	adds	r3, #2
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dee:	4b3a      	ldr	r3, [pc, #232]	@ (8002ed8 <HAL_GPIO_Init+0x324>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e12:	4a31      	ldr	r2, [pc, #196]	@ (8002ed8 <HAL_GPIO_Init+0x324>)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e18:	4b2f      	ldr	r3, [pc, #188]	@ (8002ed8 <HAL_GPIO_Init+0x324>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e3c:	4a26      	ldr	r2, [pc, #152]	@ (8002ed8 <HAL_GPIO_Init+0x324>)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e42:	4b25      	ldr	r3, [pc, #148]	@ (8002ed8 <HAL_GPIO_Init+0x324>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e66:	4a1c      	ldr	r2, [pc, #112]	@ (8002ed8 <HAL_GPIO_Init+0x324>)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ed8 <HAL_GPIO_Init+0x324>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e90:	4a11      	ldr	r2, [pc, #68]	@ (8002ed8 <HAL_GPIO_Init+0x324>)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	61fb      	str	r3, [r7, #28]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2b0f      	cmp	r3, #15
 8002ea0:	f67f ae96 	bls.w	8002bd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop
 8002ea8:	3724      	adds	r7, #36	@ 0x24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40013800 	.word	0x40013800
 8002ebc:	40020000 	.word	0x40020000
 8002ec0:	40020400 	.word	0x40020400
 8002ec4:	40020800 	.word	0x40020800
 8002ec8:	40020c00 	.word	0x40020c00
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40021400 	.word	0x40021400
 8002ed4:	40021800 	.word	0x40021800
 8002ed8:	40013c00 	.word	0x40013c00

08002edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e0cc      	b.n	800308a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef0:	4b68      	ldr	r3, [pc, #416]	@ (8003094 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d90c      	bls.n	8002f18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efe:	4b65      	ldr	r3, [pc, #404]	@ (8003094 <HAL_RCC_ClockConfig+0x1b8>)
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f06:	4b63      	ldr	r3, [pc, #396]	@ (8003094 <HAL_RCC_ClockConfig+0x1b8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d001      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0b8      	b.n	800308a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d020      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d005      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f30:	4b59      	ldr	r3, [pc, #356]	@ (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	4a58      	ldr	r2, [pc, #352]	@ (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f48:	4b53      	ldr	r3, [pc, #332]	@ (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	4a52      	ldr	r2, [pc, #328]	@ (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f54:	4b50      	ldr	r3, [pc, #320]	@ (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	494d      	ldr	r1, [pc, #308]	@ (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d044      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d107      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7a:	4b47      	ldr	r3, [pc, #284]	@ (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d119      	bne.n	8002fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e07f      	b.n	800308a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d003      	beq.n	8002f9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d107      	bne.n	8002faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9a:	4b3f      	ldr	r3, [pc, #252]	@ (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d109      	bne.n	8002fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e06f      	b.n	800308a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002faa:	4b3b      	ldr	r3, [pc, #236]	@ (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e067      	b.n	800308a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fba:	4b37      	ldr	r3, [pc, #220]	@ (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f023 0203 	bic.w	r2, r3, #3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	4934      	ldr	r1, [pc, #208]	@ (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fcc:	f7ff fd00 	bl	80029d0 <HAL_GetTick>
 8002fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd2:	e00a      	b.n	8002fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd4:	f7ff fcfc 	bl	80029d0 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e04f      	b.n	800308a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fea:	4b2b      	ldr	r3, [pc, #172]	@ (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 020c 	and.w	r2, r3, #12
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d1eb      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ffc:	4b25      	ldr	r3, [pc, #148]	@ (8003094 <HAL_RCC_ClockConfig+0x1b8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d20c      	bcs.n	8003024 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300a:	4b22      	ldr	r3, [pc, #136]	@ (8003094 <HAL_RCC_ClockConfig+0x1b8>)
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003012:	4b20      	ldr	r3, [pc, #128]	@ (8003094 <HAL_RCC_ClockConfig+0x1b8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d001      	beq.n	8003024 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e032      	b.n	800308a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003030:	4b19      	ldr	r3, [pc, #100]	@ (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	4916      	ldr	r1, [pc, #88]	@ (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	4313      	orrs	r3, r2
 8003040:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d009      	beq.n	8003062 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800304e:	4b12      	ldr	r3, [pc, #72]	@ (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	490e      	ldr	r1, [pc, #56]	@ (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	4313      	orrs	r3, r2
 8003060:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003062:	f000 f855 	bl	8003110 <HAL_RCC_GetSysClockFreq>
 8003066:	4602      	mov	r2, r0
 8003068:	4b0b      	ldr	r3, [pc, #44]	@ (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	091b      	lsrs	r3, r3, #4
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	490a      	ldr	r1, [pc, #40]	@ (800309c <HAL_RCC_ClockConfig+0x1c0>)
 8003074:	5ccb      	ldrb	r3, [r1, r3]
 8003076:	fa22 f303 	lsr.w	r3, r2, r3
 800307a:	4a09      	ldr	r2, [pc, #36]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 800307c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800307e:	4b09      	ldr	r3, [pc, #36]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff fc60 	bl	8002948 <HAL_InitTick>

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40023c00 	.word	0x40023c00
 8003098:	40023800 	.word	0x40023800
 800309c:	0800791c 	.word	0x0800791c
 80030a0:	20000010 	.word	0x20000010
 80030a4:	20000014 	.word	0x20000014

080030a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030ac:	4b03      	ldr	r3, [pc, #12]	@ (80030bc <HAL_RCC_GetHCLKFreq+0x14>)
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20000010 	.word	0x20000010

080030c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030c4:	f7ff fff0 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 80030c8:	4602      	mov	r2, r0
 80030ca:	4b05      	ldr	r3, [pc, #20]	@ (80030e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	0a9b      	lsrs	r3, r3, #10
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	4903      	ldr	r1, [pc, #12]	@ (80030e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030d6:	5ccb      	ldrb	r3, [r1, r3]
 80030d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030dc:	4618      	mov	r0, r3
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40023800 	.word	0x40023800
 80030e4:	0800792c 	.word	0x0800792c

080030e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030ec:	f7ff ffdc 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 80030f0:	4602      	mov	r2, r0
 80030f2:	4b05      	ldr	r3, [pc, #20]	@ (8003108 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	0b5b      	lsrs	r3, r3, #13
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	4903      	ldr	r1, [pc, #12]	@ (800310c <HAL_RCC_GetPCLK2Freq+0x24>)
 80030fe:	5ccb      	ldrb	r3, [r1, r3]
 8003100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003104:	4618      	mov	r0, r3
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40023800 	.word	0x40023800
 800310c:	0800792c 	.word	0x0800792c

08003110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003114:	b0a6      	sub	sp, #152	@ 0x98
 8003116:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003136:	4bc8      	ldr	r3, [pc, #800]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x348>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 030c 	and.w	r3, r3, #12
 800313e:	2b0c      	cmp	r3, #12
 8003140:	f200 817e 	bhi.w	8003440 <HAL_RCC_GetSysClockFreq+0x330>
 8003144:	a201      	add	r2, pc, #4	@ (adr r2, 800314c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314a:	bf00      	nop
 800314c:	08003181 	.word	0x08003181
 8003150:	08003441 	.word	0x08003441
 8003154:	08003441 	.word	0x08003441
 8003158:	08003441 	.word	0x08003441
 800315c:	08003189 	.word	0x08003189
 8003160:	08003441 	.word	0x08003441
 8003164:	08003441 	.word	0x08003441
 8003168:	08003441 	.word	0x08003441
 800316c:	08003191 	.word	0x08003191
 8003170:	08003441 	.word	0x08003441
 8003174:	08003441 	.word	0x08003441
 8003178:	08003441 	.word	0x08003441
 800317c:	080032fb 	.word	0x080032fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003180:	4bb6      	ldr	r3, [pc, #728]	@ (800345c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003182:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8003186:	e15f      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003188:	4bb5      	ldr	r3, [pc, #724]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x350>)
 800318a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800318e:	e15b      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003190:	4bb1      	ldr	r3, [pc, #708]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x348>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003198:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800319c:	4bae      	ldr	r3, [pc, #696]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x348>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d031      	beq.n	800320c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a8:	4bab      	ldr	r3, [pc, #684]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x348>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	099b      	lsrs	r3, r3, #6
 80031ae:	2200      	movs	r2, #0
 80031b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80031b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80031bc:	2300      	movs	r3, #0
 80031be:	667b      	str	r3, [r7, #100]	@ 0x64
 80031c0:	4ba7      	ldr	r3, [pc, #668]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x350>)
 80031c2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80031c6:	462a      	mov	r2, r5
 80031c8:	fb03 f202 	mul.w	r2, r3, r2
 80031cc:	2300      	movs	r3, #0
 80031ce:	4621      	mov	r1, r4
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
 80031d4:	4413      	add	r3, r2
 80031d6:	4aa2      	ldr	r2, [pc, #648]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x350>)
 80031d8:	4621      	mov	r1, r4
 80031da:	fba1 1202 	umull	r1, r2, r1, r2
 80031de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80031e0:	460a      	mov	r2, r1
 80031e2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80031e4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80031e6:	4413      	add	r3, r2
 80031e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80031ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031ee:	2200      	movs	r2, #0
 80031f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80031f2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80031f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80031f8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80031fc:	f7fd fd0e 	bl	8000c1c <__aeabi_uldivmod>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	4613      	mov	r3, r2
 8003206:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800320a:	e064      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800320c:	4b92      	ldr	r3, [pc, #584]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x348>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	099b      	lsrs	r3, r3, #6
 8003212:	2200      	movs	r2, #0
 8003214:	653b      	str	r3, [r7, #80]	@ 0x50
 8003216:	657a      	str	r2, [r7, #84]	@ 0x54
 8003218:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800321a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800321e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003220:	2300      	movs	r3, #0
 8003222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003224:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003228:	4622      	mov	r2, r4
 800322a:	462b      	mov	r3, r5
 800322c:	f04f 0000 	mov.w	r0, #0
 8003230:	f04f 0100 	mov.w	r1, #0
 8003234:	0159      	lsls	r1, r3, #5
 8003236:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800323a:	0150      	lsls	r0, r2, #5
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4621      	mov	r1, r4
 8003242:	1a51      	subs	r1, r2, r1
 8003244:	6139      	str	r1, [r7, #16]
 8003246:	4629      	mov	r1, r5
 8003248:	eb63 0301 	sbc.w	r3, r3, r1
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800325a:	4659      	mov	r1, fp
 800325c:	018b      	lsls	r3, r1, #6
 800325e:	4651      	mov	r1, sl
 8003260:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003264:	4651      	mov	r1, sl
 8003266:	018a      	lsls	r2, r1, #6
 8003268:	4651      	mov	r1, sl
 800326a:	ebb2 0801 	subs.w	r8, r2, r1
 800326e:	4659      	mov	r1, fp
 8003270:	eb63 0901 	sbc.w	r9, r3, r1
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003280:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003284:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003288:	4690      	mov	r8, r2
 800328a:	4699      	mov	r9, r3
 800328c:	4623      	mov	r3, r4
 800328e:	eb18 0303 	adds.w	r3, r8, r3
 8003292:	60bb      	str	r3, [r7, #8]
 8003294:	462b      	mov	r3, r5
 8003296:	eb49 0303 	adc.w	r3, r9, r3
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032a8:	4629      	mov	r1, r5
 80032aa:	028b      	lsls	r3, r1, #10
 80032ac:	4621      	mov	r1, r4
 80032ae:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032b2:	4621      	mov	r1, r4
 80032b4:	028a      	lsls	r2, r1, #10
 80032b6:	4610      	mov	r0, r2
 80032b8:	4619      	mov	r1, r3
 80032ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032be:	2200      	movs	r2, #0
 80032c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80032c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80032c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80032c8:	f7fd fca8 	bl	8000c1c <__aeabi_uldivmod>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4613      	mov	r3, r2
 80032d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032d6:	4b60      	ldr	r3, [pc, #384]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x348>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	0c1b      	lsrs	r3, r3, #16
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	3301      	adds	r3, #1
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 80032e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80032ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80032f8:	e0a6      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032fa:	4b57      	ldr	r3, [pc, #348]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x348>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003302:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003306:	4b54      	ldr	r3, [pc, #336]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x348>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d02a      	beq.n	8003368 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003312:	4b51      	ldr	r3, [pc, #324]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x348>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	099b      	lsrs	r3, r3, #6
 8003318:	2200      	movs	r2, #0
 800331a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800331c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800331e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003320:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003324:	2100      	movs	r1, #0
 8003326:	4b4e      	ldr	r3, [pc, #312]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x350>)
 8003328:	fb03 f201 	mul.w	r2, r3, r1
 800332c:	2300      	movs	r3, #0
 800332e:	fb00 f303 	mul.w	r3, r0, r3
 8003332:	4413      	add	r3, r2
 8003334:	4a4a      	ldr	r2, [pc, #296]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x350>)
 8003336:	fba0 1202 	umull	r1, r2, r0, r2
 800333a:	677a      	str	r2, [r7, #116]	@ 0x74
 800333c:	460a      	mov	r2, r1
 800333e:	673a      	str	r2, [r7, #112]	@ 0x70
 8003340:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003342:	4413      	add	r3, r2
 8003344:	677b      	str	r3, [r7, #116]	@ 0x74
 8003346:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800334a:	2200      	movs	r2, #0
 800334c:	633b      	str	r3, [r7, #48]	@ 0x30
 800334e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003350:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003354:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003358:	f7fd fc60 	bl	8000c1c <__aeabi_uldivmod>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4613      	mov	r3, r2
 8003362:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003366:	e05b      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003368:	4b3b      	ldr	r3, [pc, #236]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x348>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	099b      	lsrs	r3, r3, #6
 800336e:	2200      	movs	r2, #0
 8003370:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003372:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800337a:	623b      	str	r3, [r7, #32]
 800337c:	2300      	movs	r3, #0
 800337e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003380:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003384:	4642      	mov	r2, r8
 8003386:	464b      	mov	r3, r9
 8003388:	f04f 0000 	mov.w	r0, #0
 800338c:	f04f 0100 	mov.w	r1, #0
 8003390:	0159      	lsls	r1, r3, #5
 8003392:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003396:	0150      	lsls	r0, r2, #5
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4641      	mov	r1, r8
 800339e:	ebb2 0a01 	subs.w	sl, r2, r1
 80033a2:	4649      	mov	r1, r9
 80033a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	f04f 0300 	mov.w	r3, #0
 80033b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033bc:	ebb2 040a 	subs.w	r4, r2, sl
 80033c0:	eb63 050b 	sbc.w	r5, r3, fp
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	00eb      	lsls	r3, r5, #3
 80033ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033d2:	00e2      	lsls	r2, r4, #3
 80033d4:	4614      	mov	r4, r2
 80033d6:	461d      	mov	r5, r3
 80033d8:	4643      	mov	r3, r8
 80033da:	18e3      	adds	r3, r4, r3
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	464b      	mov	r3, r9
 80033e0:	eb45 0303 	adc.w	r3, r5, r3
 80033e4:	607b      	str	r3, [r7, #4]
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033f2:	4629      	mov	r1, r5
 80033f4:	028b      	lsls	r3, r1, #10
 80033f6:	4621      	mov	r1, r4
 80033f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033fc:	4621      	mov	r1, r4
 80033fe:	028a      	lsls	r2, r1, #10
 8003400:	4610      	mov	r0, r2
 8003402:	4619      	mov	r1, r3
 8003404:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003408:	2200      	movs	r2, #0
 800340a:	61bb      	str	r3, [r7, #24]
 800340c:	61fa      	str	r2, [r7, #28]
 800340e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003412:	f7fd fc03 	bl	8000c1c <__aeabi_uldivmod>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4613      	mov	r3, r2
 800341c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003420:	4b0d      	ldr	r3, [pc, #52]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x348>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	0f1b      	lsrs	r3, r3, #28
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 800342e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003432:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003436:	fbb2 f3f3 	udiv	r3, r2, r3
 800343a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800343e:	e003      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003440:	4b06      	ldr	r3, [pc, #24]	@ (800345c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003442:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003446:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003448:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800344c:	4618      	mov	r0, r3
 800344e:	3798      	adds	r7, #152	@ 0x98
 8003450:	46bd      	mov	sp, r7
 8003452:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003456:	bf00      	nop
 8003458:	40023800 	.word	0x40023800
 800345c:	00f42400 	.word	0x00f42400
 8003460:	017d7840 	.word	0x017d7840

08003464 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e28d      	b.n	8003992 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 8083 	beq.w	800358a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003484:	4b94      	ldr	r3, [pc, #592]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 030c 	and.w	r3, r3, #12
 800348c:	2b04      	cmp	r3, #4
 800348e:	d019      	beq.n	80034c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003490:	4b91      	ldr	r3, [pc, #580]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003498:	2b08      	cmp	r3, #8
 800349a:	d106      	bne.n	80034aa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800349c:	4b8e      	ldr	r3, [pc, #568]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034a8:	d00c      	beq.n	80034c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034aa:	4b8b      	ldr	r3, [pc, #556]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034b2:	2b0c      	cmp	r3, #12
 80034b4:	d112      	bne.n	80034dc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034b6:	4b88      	ldr	r3, [pc, #544]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034c2:	d10b      	bne.n	80034dc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c4:	4b84      	ldr	r3, [pc, #528]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d05b      	beq.n	8003588 <HAL_RCC_OscConfig+0x124>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d157      	bne.n	8003588 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e25a      	b.n	8003992 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034e4:	d106      	bne.n	80034f4 <HAL_RCC_OscConfig+0x90>
 80034e6:	4b7c      	ldr	r3, [pc, #496]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a7b      	ldr	r2, [pc, #492]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 80034ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	e01d      	b.n	8003530 <HAL_RCC_OscConfig+0xcc>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034fc:	d10c      	bne.n	8003518 <HAL_RCC_OscConfig+0xb4>
 80034fe:	4b76      	ldr	r3, [pc, #472]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a75      	ldr	r2, [pc, #468]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 8003504:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	4b73      	ldr	r3, [pc, #460]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a72      	ldr	r2, [pc, #456]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 8003510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	e00b      	b.n	8003530 <HAL_RCC_OscConfig+0xcc>
 8003518:	4b6f      	ldr	r3, [pc, #444]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a6e      	ldr	r2, [pc, #440]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 800351e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	4b6c      	ldr	r3, [pc, #432]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a6b      	ldr	r2, [pc, #428]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 800352a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800352e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d013      	beq.n	8003560 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003538:	f7ff fa4a 	bl	80029d0 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003540:	f7ff fa46 	bl	80029d0 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b64      	cmp	r3, #100	@ 0x64
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e21f      	b.n	8003992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003552:	4b61      	ldr	r3, [pc, #388]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0f0      	beq.n	8003540 <HAL_RCC_OscConfig+0xdc>
 800355e:	e014      	b.n	800358a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7ff fa36 	bl	80029d0 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003568:	f7ff fa32 	bl	80029d0 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b64      	cmp	r3, #100	@ 0x64
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e20b      	b.n	8003992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800357a:	4b57      	ldr	r3, [pc, #348]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x104>
 8003586:	e000      	b.n	800358a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d06f      	beq.n	8003676 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003596:	4b50      	ldr	r3, [pc, #320]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 030c 	and.w	r3, r3, #12
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d017      	beq.n	80035d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035a2:	4b4d      	ldr	r3, [pc, #308]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d105      	bne.n	80035ba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035ae:	4b4a      	ldr	r3, [pc, #296]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00b      	beq.n	80035d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ba:	4b47      	ldr	r3, [pc, #284]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035c2:	2b0c      	cmp	r3, #12
 80035c4:	d11c      	bne.n	8003600 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035c6:	4b44      	ldr	r3, [pc, #272]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d116      	bne.n	8003600 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d2:	4b41      	ldr	r3, [pc, #260]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_RCC_OscConfig+0x186>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d001      	beq.n	80035ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e1d3      	b.n	8003992 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ea:	4b3b      	ldr	r3, [pc, #236]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	4937      	ldr	r1, [pc, #220]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fe:	e03a      	b.n	8003676 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d020      	beq.n	800364a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003608:	4b34      	ldr	r3, [pc, #208]	@ (80036dc <HAL_RCC_OscConfig+0x278>)
 800360a:	2201      	movs	r2, #1
 800360c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360e:	f7ff f9df 	bl	80029d0 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003616:	f7ff f9db 	bl	80029d0 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e1b4      	b.n	8003992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003628:	4b2b      	ldr	r3, [pc, #172]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003634:	4b28      	ldr	r3, [pc, #160]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4925      	ldr	r1, [pc, #148]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 8003644:	4313      	orrs	r3, r2
 8003646:	600b      	str	r3, [r1, #0]
 8003648:	e015      	b.n	8003676 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800364a:	4b24      	ldr	r3, [pc, #144]	@ (80036dc <HAL_RCC_OscConfig+0x278>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7ff f9be 	bl	80029d0 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003658:	f7ff f9ba 	bl	80029d0 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e193      	b.n	8003992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366a:	4b1b      	ldr	r3, [pc, #108]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d036      	beq.n	80036f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d016      	beq.n	80036b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800368a:	4b15      	ldr	r3, [pc, #84]	@ (80036e0 <HAL_RCC_OscConfig+0x27c>)
 800368c:	2201      	movs	r2, #1
 800368e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003690:	f7ff f99e 	bl	80029d0 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003698:	f7ff f99a 	bl	80029d0 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e173      	b.n	8003992 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036aa:	4b0b      	ldr	r3, [pc, #44]	@ (80036d8 <HAL_RCC_OscConfig+0x274>)
 80036ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0x234>
 80036b6:	e01b      	b.n	80036f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036b8:	4b09      	ldr	r3, [pc, #36]	@ (80036e0 <HAL_RCC_OscConfig+0x27c>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036be:	f7ff f987 	bl	80029d0 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c4:	e00e      	b.n	80036e4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036c6:	f7ff f983 	bl	80029d0 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d907      	bls.n	80036e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e15c      	b.n	8003992 <HAL_RCC_OscConfig+0x52e>
 80036d8:	40023800 	.word	0x40023800
 80036dc:	42470000 	.word	0x42470000
 80036e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e4:	4b8a      	ldr	r3, [pc, #552]	@ (8003910 <HAL_RCC_OscConfig+0x4ac>)
 80036e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1ea      	bne.n	80036c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 8097 	beq.w	800382c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036fe:	2300      	movs	r3, #0
 8003700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003702:	4b83      	ldr	r3, [pc, #524]	@ (8003910 <HAL_RCC_OscConfig+0x4ac>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10f      	bne.n	800372e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	4b7f      	ldr	r3, [pc, #508]	@ (8003910 <HAL_RCC_OscConfig+0x4ac>)
 8003714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003716:	4a7e      	ldr	r2, [pc, #504]	@ (8003910 <HAL_RCC_OscConfig+0x4ac>)
 8003718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800371c:	6413      	str	r3, [r2, #64]	@ 0x40
 800371e:	4b7c      	ldr	r3, [pc, #496]	@ (8003910 <HAL_RCC_OscConfig+0x4ac>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800372a:	2301      	movs	r3, #1
 800372c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372e:	4b79      	ldr	r3, [pc, #484]	@ (8003914 <HAL_RCC_OscConfig+0x4b0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d118      	bne.n	800376c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800373a:	4b76      	ldr	r3, [pc, #472]	@ (8003914 <HAL_RCC_OscConfig+0x4b0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a75      	ldr	r2, [pc, #468]	@ (8003914 <HAL_RCC_OscConfig+0x4b0>)
 8003740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003746:	f7ff f943 	bl	80029d0 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800374e:	f7ff f93f 	bl	80029d0 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e118      	b.n	8003992 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003760:	4b6c      	ldr	r3, [pc, #432]	@ (8003914 <HAL_RCC_OscConfig+0x4b0>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d106      	bne.n	8003782 <HAL_RCC_OscConfig+0x31e>
 8003774:	4b66      	ldr	r3, [pc, #408]	@ (8003910 <HAL_RCC_OscConfig+0x4ac>)
 8003776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003778:	4a65      	ldr	r2, [pc, #404]	@ (8003910 <HAL_RCC_OscConfig+0x4ac>)
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003780:	e01c      	b.n	80037bc <HAL_RCC_OscConfig+0x358>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	2b05      	cmp	r3, #5
 8003788:	d10c      	bne.n	80037a4 <HAL_RCC_OscConfig+0x340>
 800378a:	4b61      	ldr	r3, [pc, #388]	@ (8003910 <HAL_RCC_OscConfig+0x4ac>)
 800378c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800378e:	4a60      	ldr	r2, [pc, #384]	@ (8003910 <HAL_RCC_OscConfig+0x4ac>)
 8003790:	f043 0304 	orr.w	r3, r3, #4
 8003794:	6713      	str	r3, [r2, #112]	@ 0x70
 8003796:	4b5e      	ldr	r3, [pc, #376]	@ (8003910 <HAL_RCC_OscConfig+0x4ac>)
 8003798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800379a:	4a5d      	ldr	r2, [pc, #372]	@ (8003910 <HAL_RCC_OscConfig+0x4ac>)
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80037a2:	e00b      	b.n	80037bc <HAL_RCC_OscConfig+0x358>
 80037a4:	4b5a      	ldr	r3, [pc, #360]	@ (8003910 <HAL_RCC_OscConfig+0x4ac>)
 80037a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a8:	4a59      	ldr	r2, [pc, #356]	@ (8003910 <HAL_RCC_OscConfig+0x4ac>)
 80037aa:	f023 0301 	bic.w	r3, r3, #1
 80037ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80037b0:	4b57      	ldr	r3, [pc, #348]	@ (8003910 <HAL_RCC_OscConfig+0x4ac>)
 80037b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b4:	4a56      	ldr	r2, [pc, #344]	@ (8003910 <HAL_RCC_OscConfig+0x4ac>)
 80037b6:	f023 0304 	bic.w	r3, r3, #4
 80037ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d015      	beq.n	80037f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c4:	f7ff f904 	bl	80029d0 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ca:	e00a      	b.n	80037e2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037cc:	f7ff f900 	bl	80029d0 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037da:	4293      	cmp	r3, r2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e0d7      	b.n	8003992 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e2:	4b4b      	ldr	r3, [pc, #300]	@ (8003910 <HAL_RCC_OscConfig+0x4ac>)
 80037e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0ee      	beq.n	80037cc <HAL_RCC_OscConfig+0x368>
 80037ee:	e014      	b.n	800381a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f0:	f7ff f8ee 	bl	80029d0 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f6:	e00a      	b.n	800380e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037f8:	f7ff f8ea 	bl	80029d0 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003806:	4293      	cmp	r3, r2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e0c1      	b.n	8003992 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800380e:	4b40      	ldr	r3, [pc, #256]	@ (8003910 <HAL_RCC_OscConfig+0x4ac>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1ee      	bne.n	80037f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800381a:	7dfb      	ldrb	r3, [r7, #23]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d105      	bne.n	800382c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003820:	4b3b      	ldr	r3, [pc, #236]	@ (8003910 <HAL_RCC_OscConfig+0x4ac>)
 8003822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003824:	4a3a      	ldr	r2, [pc, #232]	@ (8003910 <HAL_RCC_OscConfig+0x4ac>)
 8003826:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800382a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80ad 	beq.w	8003990 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003836:	4b36      	ldr	r3, [pc, #216]	@ (8003910 <HAL_RCC_OscConfig+0x4ac>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	2b08      	cmp	r3, #8
 8003840:	d060      	beq.n	8003904 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d145      	bne.n	80038d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800384a:	4b33      	ldr	r3, [pc, #204]	@ (8003918 <HAL_RCC_OscConfig+0x4b4>)
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003850:	f7ff f8be 	bl	80029d0 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003858:	f7ff f8ba 	bl	80029d0 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e093      	b.n	8003992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800386a:	4b29      	ldr	r3, [pc, #164]	@ (8003910 <HAL_RCC_OscConfig+0x4ac>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69da      	ldr	r2, [r3, #28]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003884:	019b      	lsls	r3, r3, #6
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388c:	085b      	lsrs	r3, r3, #1
 800388e:	3b01      	subs	r3, #1
 8003890:	041b      	lsls	r3, r3, #16
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003898:	061b      	lsls	r3, r3, #24
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a0:	071b      	lsls	r3, r3, #28
 80038a2:	491b      	ldr	r1, [pc, #108]	@ (8003910 <HAL_RCC_OscConfig+0x4ac>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003918 <HAL_RCC_OscConfig+0x4b4>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ae:	f7ff f88f 	bl	80029d0 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b6:	f7ff f88b 	bl	80029d0 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e064      	b.n	8003992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c8:	4b11      	ldr	r3, [pc, #68]	@ (8003910 <HAL_RCC_OscConfig+0x4ac>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0f0      	beq.n	80038b6 <HAL_RCC_OscConfig+0x452>
 80038d4:	e05c      	b.n	8003990 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d6:	4b10      	ldr	r3, [pc, #64]	@ (8003918 <HAL_RCC_OscConfig+0x4b4>)
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038dc:	f7ff f878 	bl	80029d0 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e4:	f7ff f874 	bl	80029d0 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e04d      	b.n	8003992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f6:	4b06      	ldr	r3, [pc, #24]	@ (8003910 <HAL_RCC_OscConfig+0x4ac>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f0      	bne.n	80038e4 <HAL_RCC_OscConfig+0x480>
 8003902:	e045      	b.n	8003990 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d107      	bne.n	800391c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e040      	b.n	8003992 <HAL_RCC_OscConfig+0x52e>
 8003910:	40023800 	.word	0x40023800
 8003914:	40007000 	.word	0x40007000
 8003918:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800391c:	4b1f      	ldr	r3, [pc, #124]	@ (800399c <HAL_RCC_OscConfig+0x538>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d030      	beq.n	800398c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003934:	429a      	cmp	r2, r3
 8003936:	d129      	bne.n	800398c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003942:	429a      	cmp	r2, r3
 8003944:	d122      	bne.n	800398c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800394c:	4013      	ands	r3, r2
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003952:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003954:	4293      	cmp	r3, r2
 8003956:	d119      	bne.n	800398c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003962:	085b      	lsrs	r3, r3, #1
 8003964:	3b01      	subs	r3, #1
 8003966:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003968:	429a      	cmp	r2, r3
 800396a:	d10f      	bne.n	800398c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003976:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003978:	429a      	cmp	r2, r3
 800397a:	d107      	bne.n	800398c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003986:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003988:	429a      	cmp	r2, r3
 800398a:	d001      	beq.n	8003990 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	40023800 	.word	0x40023800

080039a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e042      	b.n	8003a38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d106      	bne.n	80039cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7fe fe22 	bl	8002610 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2224      	movs	r2, #36	@ 0x24
 80039d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f973 	bl	8003cd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695a      	ldr	r2, [r3, #20]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08a      	sub	sp, #40	@ 0x28
 8003a44:	af02      	add	r7, sp, #8
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	603b      	str	r3, [r7, #0]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	d175      	bne.n	8003b4c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <HAL_UART_Transmit+0x2c>
 8003a66:	88fb      	ldrh	r3, [r7, #6]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e06e      	b.n	8003b4e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2221      	movs	r2, #33	@ 0x21
 8003a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a7e:	f7fe ffa7 	bl	80029d0 <HAL_GetTick>
 8003a82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	88fa      	ldrh	r2, [r7, #6]
 8003a88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	88fa      	ldrh	r2, [r7, #6]
 8003a8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a98:	d108      	bne.n	8003aac <HAL_UART_Transmit+0x6c>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d104      	bne.n	8003aac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	61bb      	str	r3, [r7, #24]
 8003aaa:	e003      	b.n	8003ab4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ab4:	e02e      	b.n	8003b14 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2200      	movs	r2, #0
 8003abe:	2180      	movs	r1, #128	@ 0x80
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 f848 	bl	8003b56 <UART_WaitOnFlagUntilTimeout>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e03a      	b.n	8003b4e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10b      	bne.n	8003af6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	3302      	adds	r3, #2
 8003af2:	61bb      	str	r3, [r7, #24]
 8003af4:	e007      	b.n	8003b06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	781a      	ldrb	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	3301      	adds	r3, #1
 8003b04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1cb      	bne.n	8003ab6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2200      	movs	r2, #0
 8003b26:	2140      	movs	r1, #64	@ 0x40
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 f814 	bl	8003b56 <UART_WaitOnFlagUntilTimeout>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e006      	b.n	8003b4e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	e000      	b.n	8003b4e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b4c:	2302      	movs	r3, #2
  }
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3720      	adds	r7, #32
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b086      	sub	sp, #24
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	603b      	str	r3, [r7, #0]
 8003b62:	4613      	mov	r3, r2
 8003b64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b66:	e03b      	b.n	8003be0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b6e:	d037      	beq.n	8003be0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b70:	f7fe ff2e 	bl	80029d0 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	6a3a      	ldr	r2, [r7, #32]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d302      	bcc.n	8003b86 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e03a      	b.n	8003c00 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d023      	beq.n	8003be0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b80      	cmp	r3, #128	@ 0x80
 8003b9c:	d020      	beq.n	8003be0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2b40      	cmp	r3, #64	@ 0x40
 8003ba2:	d01d      	beq.n	8003be0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d116      	bne.n	8003be0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 f81d 	bl	8003c08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2208      	movs	r2, #8
 8003bd2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e00f      	b.n	8003c00 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	4013      	ands	r3, r2
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	bf0c      	ite	eq
 8003bf0:	2301      	moveq	r3, #1
 8003bf2:	2300      	movne	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	79fb      	ldrb	r3, [r7, #7]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d0b4      	beq.n	8003b68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b095      	sub	sp, #84	@ 0x54
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	330c      	adds	r3, #12
 8003c16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c1a:	e853 3f00 	ldrex	r3, [r3]
 8003c1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	330c      	adds	r3, #12
 8003c2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c30:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c38:	e841 2300 	strex	r3, r2, [r1]
 8003c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1e5      	bne.n	8003c10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3314      	adds	r3, #20
 8003c4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	e853 3f00 	ldrex	r3, [r3]
 8003c52:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f023 0301 	bic.w	r3, r3, #1
 8003c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3314      	adds	r3, #20
 8003c62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c6c:	e841 2300 	strex	r3, r2, [r1]
 8003c70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1e5      	bne.n	8003c44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d119      	bne.n	8003cb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	330c      	adds	r3, #12
 8003c86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	e853 3f00 	ldrex	r3, [r3]
 8003c8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f023 0310 	bic.w	r3, r3, #16
 8003c96:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	330c      	adds	r3, #12
 8003c9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ca0:	61ba      	str	r2, [r7, #24]
 8003ca2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca4:	6979      	ldr	r1, [r7, #20]
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	e841 2300 	strex	r3, r2, [r1]
 8003cac:	613b      	str	r3, [r7, #16]
   return(result);
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1e5      	bne.n	8003c80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003cc2:	bf00      	nop
 8003cc4:	3754      	adds	r7, #84	@ 0x54
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
	...

08003cd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cd4:	b0c0      	sub	sp, #256	@ 0x100
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cec:	68d9      	ldr	r1, [r3, #12]
 8003cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	ea40 0301 	orr.w	r3, r0, r1
 8003cf8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d28:	f021 010c 	bic.w	r1, r1, #12
 8003d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d36:	430b      	orrs	r3, r1
 8003d38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d4a:	6999      	ldr	r1, [r3, #24]
 8003d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	ea40 0301 	orr.w	r3, r0, r1
 8003d56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	4b8f      	ldr	r3, [pc, #572]	@ (8003f9c <UART_SetConfig+0x2cc>)
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d005      	beq.n	8003d70 <UART_SetConfig+0xa0>
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	4b8d      	ldr	r3, [pc, #564]	@ (8003fa0 <UART_SetConfig+0x2d0>)
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d104      	bne.n	8003d7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d70:	f7ff f9ba 	bl	80030e8 <HAL_RCC_GetPCLK2Freq>
 8003d74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d78:	e003      	b.n	8003d82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d7a:	f7ff f9a1 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 8003d7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d8c:	f040 810c 	bne.w	8003fa8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d94:	2200      	movs	r2, #0
 8003d96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003da2:	4622      	mov	r2, r4
 8003da4:	462b      	mov	r3, r5
 8003da6:	1891      	adds	r1, r2, r2
 8003da8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003daa:	415b      	adcs	r3, r3
 8003dac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003dae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003db2:	4621      	mov	r1, r4
 8003db4:	eb12 0801 	adds.w	r8, r2, r1
 8003db8:	4629      	mov	r1, r5
 8003dba:	eb43 0901 	adc.w	r9, r3, r1
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dd2:	4690      	mov	r8, r2
 8003dd4:	4699      	mov	r9, r3
 8003dd6:	4623      	mov	r3, r4
 8003dd8:	eb18 0303 	adds.w	r3, r8, r3
 8003ddc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003de0:	462b      	mov	r3, r5
 8003de2:	eb49 0303 	adc.w	r3, r9, r3
 8003de6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003df6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003dfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003dfe:	460b      	mov	r3, r1
 8003e00:	18db      	adds	r3, r3, r3
 8003e02:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e04:	4613      	mov	r3, r2
 8003e06:	eb42 0303 	adc.w	r3, r2, r3
 8003e0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e14:	f7fc ff02 	bl	8000c1c <__aeabi_uldivmod>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4b61      	ldr	r3, [pc, #388]	@ (8003fa4 <UART_SetConfig+0x2d4>)
 8003e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	011c      	lsls	r4, r3, #4
 8003e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e30:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e38:	4642      	mov	r2, r8
 8003e3a:	464b      	mov	r3, r9
 8003e3c:	1891      	adds	r1, r2, r2
 8003e3e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e40:	415b      	adcs	r3, r3
 8003e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e48:	4641      	mov	r1, r8
 8003e4a:	eb12 0a01 	adds.w	sl, r2, r1
 8003e4e:	4649      	mov	r1, r9
 8003e50:	eb43 0b01 	adc.w	fp, r3, r1
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e68:	4692      	mov	sl, r2
 8003e6a:	469b      	mov	fp, r3
 8003e6c:	4643      	mov	r3, r8
 8003e6e:	eb1a 0303 	adds.w	r3, sl, r3
 8003e72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e76:	464b      	mov	r3, r9
 8003e78:	eb4b 0303 	adc.w	r3, fp, r3
 8003e7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e8c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e94:	460b      	mov	r3, r1
 8003e96:	18db      	adds	r3, r3, r3
 8003e98:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ea0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ea2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ea6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003eaa:	f7fc feb7 	bl	8000c1c <__aeabi_uldivmod>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8003fa4 <UART_SetConfig+0x2d4>)
 8003eb6:	fba3 2301 	umull	r2, r3, r3, r1
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	2264      	movs	r2, #100	@ 0x64
 8003ebe:	fb02 f303 	mul.w	r3, r2, r3
 8003ec2:	1acb      	subs	r3, r1, r3
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003eca:	4b36      	ldr	r3, [pc, #216]	@ (8003fa4 <UART_SetConfig+0x2d4>)
 8003ecc:	fba3 2302 	umull	r2, r3, r3, r2
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003ed8:	441c      	add	r4, r3
 8003eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ee4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ee8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003eec:	4642      	mov	r2, r8
 8003eee:	464b      	mov	r3, r9
 8003ef0:	1891      	adds	r1, r2, r2
 8003ef2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ef4:	415b      	adcs	r3, r3
 8003ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ef8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003efc:	4641      	mov	r1, r8
 8003efe:	1851      	adds	r1, r2, r1
 8003f00:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f02:	4649      	mov	r1, r9
 8003f04:	414b      	adcs	r3, r1
 8003f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f14:	4659      	mov	r1, fp
 8003f16:	00cb      	lsls	r3, r1, #3
 8003f18:	4651      	mov	r1, sl
 8003f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f1e:	4651      	mov	r1, sl
 8003f20:	00ca      	lsls	r2, r1, #3
 8003f22:	4610      	mov	r0, r2
 8003f24:	4619      	mov	r1, r3
 8003f26:	4603      	mov	r3, r0
 8003f28:	4642      	mov	r2, r8
 8003f2a:	189b      	adds	r3, r3, r2
 8003f2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f30:	464b      	mov	r3, r9
 8003f32:	460a      	mov	r2, r1
 8003f34:	eb42 0303 	adc.w	r3, r2, r3
 8003f38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f48:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f50:	460b      	mov	r3, r1
 8003f52:	18db      	adds	r3, r3, r3
 8003f54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f56:	4613      	mov	r3, r2
 8003f58:	eb42 0303 	adc.w	r3, r2, r3
 8003f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f66:	f7fc fe59 	bl	8000c1c <__aeabi_uldivmod>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa4 <UART_SetConfig+0x2d4>)
 8003f70:	fba3 1302 	umull	r1, r3, r3, r2
 8003f74:	095b      	lsrs	r3, r3, #5
 8003f76:	2164      	movs	r1, #100	@ 0x64
 8003f78:	fb01 f303 	mul.w	r3, r1, r3
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	3332      	adds	r3, #50	@ 0x32
 8003f82:	4a08      	ldr	r2, [pc, #32]	@ (8003fa4 <UART_SetConfig+0x2d4>)
 8003f84:	fba2 2303 	umull	r2, r3, r2, r3
 8003f88:	095b      	lsrs	r3, r3, #5
 8003f8a:	f003 0207 	and.w	r2, r3, #7
 8003f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4422      	add	r2, r4
 8003f96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f98:	e106      	b.n	80041a8 <UART_SetConfig+0x4d8>
 8003f9a:	bf00      	nop
 8003f9c:	40011000 	.word	0x40011000
 8003fa0:	40011400 	.word	0x40011400
 8003fa4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fac:	2200      	movs	r2, #0
 8003fae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003fb2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003fb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003fba:	4642      	mov	r2, r8
 8003fbc:	464b      	mov	r3, r9
 8003fbe:	1891      	adds	r1, r2, r2
 8003fc0:	6239      	str	r1, [r7, #32]
 8003fc2:	415b      	adcs	r3, r3
 8003fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fca:	4641      	mov	r1, r8
 8003fcc:	1854      	adds	r4, r2, r1
 8003fce:	4649      	mov	r1, r9
 8003fd0:	eb43 0501 	adc.w	r5, r3, r1
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	00eb      	lsls	r3, r5, #3
 8003fde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fe2:	00e2      	lsls	r2, r4, #3
 8003fe4:	4614      	mov	r4, r2
 8003fe6:	461d      	mov	r5, r3
 8003fe8:	4643      	mov	r3, r8
 8003fea:	18e3      	adds	r3, r4, r3
 8003fec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ff0:	464b      	mov	r3, r9
 8003ff2:	eb45 0303 	adc.w	r3, r5, r3
 8003ff6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004006:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004016:	4629      	mov	r1, r5
 8004018:	008b      	lsls	r3, r1, #2
 800401a:	4621      	mov	r1, r4
 800401c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004020:	4621      	mov	r1, r4
 8004022:	008a      	lsls	r2, r1, #2
 8004024:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004028:	f7fc fdf8 	bl	8000c1c <__aeabi_uldivmod>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4b60      	ldr	r3, [pc, #384]	@ (80041b4 <UART_SetConfig+0x4e4>)
 8004032:	fba3 2302 	umull	r2, r3, r3, r2
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	011c      	lsls	r4, r3, #4
 800403a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800403e:	2200      	movs	r2, #0
 8004040:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004044:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004048:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800404c:	4642      	mov	r2, r8
 800404e:	464b      	mov	r3, r9
 8004050:	1891      	adds	r1, r2, r2
 8004052:	61b9      	str	r1, [r7, #24]
 8004054:	415b      	adcs	r3, r3
 8004056:	61fb      	str	r3, [r7, #28]
 8004058:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800405c:	4641      	mov	r1, r8
 800405e:	1851      	adds	r1, r2, r1
 8004060:	6139      	str	r1, [r7, #16]
 8004062:	4649      	mov	r1, r9
 8004064:	414b      	adcs	r3, r1
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004074:	4659      	mov	r1, fp
 8004076:	00cb      	lsls	r3, r1, #3
 8004078:	4651      	mov	r1, sl
 800407a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800407e:	4651      	mov	r1, sl
 8004080:	00ca      	lsls	r2, r1, #3
 8004082:	4610      	mov	r0, r2
 8004084:	4619      	mov	r1, r3
 8004086:	4603      	mov	r3, r0
 8004088:	4642      	mov	r2, r8
 800408a:	189b      	adds	r3, r3, r2
 800408c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004090:	464b      	mov	r3, r9
 8004092:	460a      	mov	r2, r1
 8004094:	eb42 0303 	adc.w	r3, r2, r3
 8004098:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80040b4:	4649      	mov	r1, r9
 80040b6:	008b      	lsls	r3, r1, #2
 80040b8:	4641      	mov	r1, r8
 80040ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040be:	4641      	mov	r1, r8
 80040c0:	008a      	lsls	r2, r1, #2
 80040c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80040c6:	f7fc fda9 	bl	8000c1c <__aeabi_uldivmod>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	4611      	mov	r1, r2
 80040d0:	4b38      	ldr	r3, [pc, #224]	@ (80041b4 <UART_SetConfig+0x4e4>)
 80040d2:	fba3 2301 	umull	r2, r3, r3, r1
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	2264      	movs	r2, #100	@ 0x64
 80040da:	fb02 f303 	mul.w	r3, r2, r3
 80040de:	1acb      	subs	r3, r1, r3
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	3332      	adds	r3, #50	@ 0x32
 80040e4:	4a33      	ldr	r2, [pc, #204]	@ (80041b4 <UART_SetConfig+0x4e4>)
 80040e6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ea:	095b      	lsrs	r3, r3, #5
 80040ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040f0:	441c      	add	r4, r3
 80040f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040f6:	2200      	movs	r2, #0
 80040f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80040fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80040fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004100:	4642      	mov	r2, r8
 8004102:	464b      	mov	r3, r9
 8004104:	1891      	adds	r1, r2, r2
 8004106:	60b9      	str	r1, [r7, #8]
 8004108:	415b      	adcs	r3, r3
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004110:	4641      	mov	r1, r8
 8004112:	1851      	adds	r1, r2, r1
 8004114:	6039      	str	r1, [r7, #0]
 8004116:	4649      	mov	r1, r9
 8004118:	414b      	adcs	r3, r1
 800411a:	607b      	str	r3, [r7, #4]
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004128:	4659      	mov	r1, fp
 800412a:	00cb      	lsls	r3, r1, #3
 800412c:	4651      	mov	r1, sl
 800412e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004132:	4651      	mov	r1, sl
 8004134:	00ca      	lsls	r2, r1, #3
 8004136:	4610      	mov	r0, r2
 8004138:	4619      	mov	r1, r3
 800413a:	4603      	mov	r3, r0
 800413c:	4642      	mov	r2, r8
 800413e:	189b      	adds	r3, r3, r2
 8004140:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004142:	464b      	mov	r3, r9
 8004144:	460a      	mov	r2, r1
 8004146:	eb42 0303 	adc.w	r3, r2, r3
 800414a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800414c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	663b      	str	r3, [r7, #96]	@ 0x60
 8004156:	667a      	str	r2, [r7, #100]	@ 0x64
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004164:	4649      	mov	r1, r9
 8004166:	008b      	lsls	r3, r1, #2
 8004168:	4641      	mov	r1, r8
 800416a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800416e:	4641      	mov	r1, r8
 8004170:	008a      	lsls	r2, r1, #2
 8004172:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004176:	f7fc fd51 	bl	8000c1c <__aeabi_uldivmod>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4b0d      	ldr	r3, [pc, #52]	@ (80041b4 <UART_SetConfig+0x4e4>)
 8004180:	fba3 1302 	umull	r1, r3, r3, r2
 8004184:	095b      	lsrs	r3, r3, #5
 8004186:	2164      	movs	r1, #100	@ 0x64
 8004188:	fb01 f303 	mul.w	r3, r1, r3
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	3332      	adds	r3, #50	@ 0x32
 8004192:	4a08      	ldr	r2, [pc, #32]	@ (80041b4 <UART_SetConfig+0x4e4>)
 8004194:	fba2 2303 	umull	r2, r3, r2, r3
 8004198:	095b      	lsrs	r3, r3, #5
 800419a:	f003 020f 	and.w	r2, r3, #15
 800419e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4422      	add	r2, r4
 80041a6:	609a      	str	r2, [r3, #8]
}
 80041a8:	bf00      	nop
 80041aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80041ae:	46bd      	mov	sp, r7
 80041b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041b4:	51eb851f 	.word	0x51eb851f

080041b8 <malloc>:
 80041b8:	4b02      	ldr	r3, [pc, #8]	@ (80041c4 <malloc+0xc>)
 80041ba:	4601      	mov	r1, r0
 80041bc:	6818      	ldr	r0, [r3, #0]
 80041be:	f000 b82d 	b.w	800421c <_malloc_r>
 80041c2:	bf00      	nop
 80041c4:	20000194 	.word	0x20000194

080041c8 <free>:
 80041c8:	4b02      	ldr	r3, [pc, #8]	@ (80041d4 <free+0xc>)
 80041ca:	4601      	mov	r1, r0
 80041cc:	6818      	ldr	r0, [r3, #0]
 80041ce:	f001 b8c7 	b.w	8005360 <_free_r>
 80041d2:	bf00      	nop
 80041d4:	20000194 	.word	0x20000194

080041d8 <sbrk_aligned>:
 80041d8:	b570      	push	{r4, r5, r6, lr}
 80041da:	4e0f      	ldr	r6, [pc, #60]	@ (8004218 <sbrk_aligned+0x40>)
 80041dc:	460c      	mov	r4, r1
 80041de:	6831      	ldr	r1, [r6, #0]
 80041e0:	4605      	mov	r5, r0
 80041e2:	b911      	cbnz	r1, 80041ea <sbrk_aligned+0x12>
 80041e4:	f001 f854 	bl	8005290 <_sbrk_r>
 80041e8:	6030      	str	r0, [r6, #0]
 80041ea:	4621      	mov	r1, r4
 80041ec:	4628      	mov	r0, r5
 80041ee:	f001 f84f 	bl	8005290 <_sbrk_r>
 80041f2:	1c43      	adds	r3, r0, #1
 80041f4:	d103      	bne.n	80041fe <sbrk_aligned+0x26>
 80041f6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80041fa:	4620      	mov	r0, r4
 80041fc:	bd70      	pop	{r4, r5, r6, pc}
 80041fe:	1cc4      	adds	r4, r0, #3
 8004200:	f024 0403 	bic.w	r4, r4, #3
 8004204:	42a0      	cmp	r0, r4
 8004206:	d0f8      	beq.n	80041fa <sbrk_aligned+0x22>
 8004208:	1a21      	subs	r1, r4, r0
 800420a:	4628      	mov	r0, r5
 800420c:	f001 f840 	bl	8005290 <_sbrk_r>
 8004210:	3001      	adds	r0, #1
 8004212:	d1f2      	bne.n	80041fa <sbrk_aligned+0x22>
 8004214:	e7ef      	b.n	80041f6 <sbrk_aligned+0x1e>
 8004216:	bf00      	nop
 8004218:	2000520c 	.word	0x2000520c

0800421c <_malloc_r>:
 800421c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004220:	1ccd      	adds	r5, r1, #3
 8004222:	f025 0503 	bic.w	r5, r5, #3
 8004226:	3508      	adds	r5, #8
 8004228:	2d0c      	cmp	r5, #12
 800422a:	bf38      	it	cc
 800422c:	250c      	movcc	r5, #12
 800422e:	2d00      	cmp	r5, #0
 8004230:	4606      	mov	r6, r0
 8004232:	db01      	blt.n	8004238 <_malloc_r+0x1c>
 8004234:	42a9      	cmp	r1, r5
 8004236:	d904      	bls.n	8004242 <_malloc_r+0x26>
 8004238:	230c      	movs	r3, #12
 800423a:	6033      	str	r3, [r6, #0]
 800423c:	2000      	movs	r0, #0
 800423e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004242:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004318 <_malloc_r+0xfc>
 8004246:	f000 f869 	bl	800431c <__malloc_lock>
 800424a:	f8d8 3000 	ldr.w	r3, [r8]
 800424e:	461c      	mov	r4, r3
 8004250:	bb44      	cbnz	r4, 80042a4 <_malloc_r+0x88>
 8004252:	4629      	mov	r1, r5
 8004254:	4630      	mov	r0, r6
 8004256:	f7ff ffbf 	bl	80041d8 <sbrk_aligned>
 800425a:	1c43      	adds	r3, r0, #1
 800425c:	4604      	mov	r4, r0
 800425e:	d158      	bne.n	8004312 <_malloc_r+0xf6>
 8004260:	f8d8 4000 	ldr.w	r4, [r8]
 8004264:	4627      	mov	r7, r4
 8004266:	2f00      	cmp	r7, #0
 8004268:	d143      	bne.n	80042f2 <_malloc_r+0xd6>
 800426a:	2c00      	cmp	r4, #0
 800426c:	d04b      	beq.n	8004306 <_malloc_r+0xea>
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	4639      	mov	r1, r7
 8004272:	4630      	mov	r0, r6
 8004274:	eb04 0903 	add.w	r9, r4, r3
 8004278:	f001 f80a 	bl	8005290 <_sbrk_r>
 800427c:	4581      	cmp	r9, r0
 800427e:	d142      	bne.n	8004306 <_malloc_r+0xea>
 8004280:	6821      	ldr	r1, [r4, #0]
 8004282:	1a6d      	subs	r5, r5, r1
 8004284:	4629      	mov	r1, r5
 8004286:	4630      	mov	r0, r6
 8004288:	f7ff ffa6 	bl	80041d8 <sbrk_aligned>
 800428c:	3001      	adds	r0, #1
 800428e:	d03a      	beq.n	8004306 <_malloc_r+0xea>
 8004290:	6823      	ldr	r3, [r4, #0]
 8004292:	442b      	add	r3, r5
 8004294:	6023      	str	r3, [r4, #0]
 8004296:	f8d8 3000 	ldr.w	r3, [r8]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	bb62      	cbnz	r2, 80042f8 <_malloc_r+0xdc>
 800429e:	f8c8 7000 	str.w	r7, [r8]
 80042a2:	e00f      	b.n	80042c4 <_malloc_r+0xa8>
 80042a4:	6822      	ldr	r2, [r4, #0]
 80042a6:	1b52      	subs	r2, r2, r5
 80042a8:	d420      	bmi.n	80042ec <_malloc_r+0xd0>
 80042aa:	2a0b      	cmp	r2, #11
 80042ac:	d917      	bls.n	80042de <_malloc_r+0xc2>
 80042ae:	1961      	adds	r1, r4, r5
 80042b0:	42a3      	cmp	r3, r4
 80042b2:	6025      	str	r5, [r4, #0]
 80042b4:	bf18      	it	ne
 80042b6:	6059      	strne	r1, [r3, #4]
 80042b8:	6863      	ldr	r3, [r4, #4]
 80042ba:	bf08      	it	eq
 80042bc:	f8c8 1000 	streq.w	r1, [r8]
 80042c0:	5162      	str	r2, [r4, r5]
 80042c2:	604b      	str	r3, [r1, #4]
 80042c4:	4630      	mov	r0, r6
 80042c6:	f000 f82f 	bl	8004328 <__malloc_unlock>
 80042ca:	f104 000b 	add.w	r0, r4, #11
 80042ce:	1d23      	adds	r3, r4, #4
 80042d0:	f020 0007 	bic.w	r0, r0, #7
 80042d4:	1ac2      	subs	r2, r0, r3
 80042d6:	bf1c      	itt	ne
 80042d8:	1a1b      	subne	r3, r3, r0
 80042da:	50a3      	strne	r3, [r4, r2]
 80042dc:	e7af      	b.n	800423e <_malloc_r+0x22>
 80042de:	6862      	ldr	r2, [r4, #4]
 80042e0:	42a3      	cmp	r3, r4
 80042e2:	bf0c      	ite	eq
 80042e4:	f8c8 2000 	streq.w	r2, [r8]
 80042e8:	605a      	strne	r2, [r3, #4]
 80042ea:	e7eb      	b.n	80042c4 <_malloc_r+0xa8>
 80042ec:	4623      	mov	r3, r4
 80042ee:	6864      	ldr	r4, [r4, #4]
 80042f0:	e7ae      	b.n	8004250 <_malloc_r+0x34>
 80042f2:	463c      	mov	r4, r7
 80042f4:	687f      	ldr	r7, [r7, #4]
 80042f6:	e7b6      	b.n	8004266 <_malloc_r+0x4a>
 80042f8:	461a      	mov	r2, r3
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	42a3      	cmp	r3, r4
 80042fe:	d1fb      	bne.n	80042f8 <_malloc_r+0xdc>
 8004300:	2300      	movs	r3, #0
 8004302:	6053      	str	r3, [r2, #4]
 8004304:	e7de      	b.n	80042c4 <_malloc_r+0xa8>
 8004306:	230c      	movs	r3, #12
 8004308:	6033      	str	r3, [r6, #0]
 800430a:	4630      	mov	r0, r6
 800430c:	f000 f80c 	bl	8004328 <__malloc_unlock>
 8004310:	e794      	b.n	800423c <_malloc_r+0x20>
 8004312:	6005      	str	r5, [r0, #0]
 8004314:	e7d6      	b.n	80042c4 <_malloc_r+0xa8>
 8004316:	bf00      	nop
 8004318:	20005210 	.word	0x20005210

0800431c <__malloc_lock>:
 800431c:	4801      	ldr	r0, [pc, #4]	@ (8004324 <__malloc_lock+0x8>)
 800431e:	f001 b804 	b.w	800532a <__retarget_lock_acquire_recursive>
 8004322:	bf00      	nop
 8004324:	20005354 	.word	0x20005354

08004328 <__malloc_unlock>:
 8004328:	4801      	ldr	r0, [pc, #4]	@ (8004330 <__malloc_unlock+0x8>)
 800432a:	f000 bfff 	b.w	800532c <__retarget_lock_release_recursive>
 800432e:	bf00      	nop
 8004330:	20005354 	.word	0x20005354

08004334 <__sread>:
 8004334:	b510      	push	{r4, lr}
 8004336:	460c      	mov	r4, r1
 8004338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800433c:	f000 ff96 	bl	800526c <_read_r>
 8004340:	2800      	cmp	r0, #0
 8004342:	bfab      	itete	ge
 8004344:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004346:	89a3      	ldrhlt	r3, [r4, #12]
 8004348:	181b      	addge	r3, r3, r0
 800434a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800434e:	bfac      	ite	ge
 8004350:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004352:	81a3      	strhlt	r3, [r4, #12]
 8004354:	bd10      	pop	{r4, pc}

08004356 <__swrite>:
 8004356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800435a:	461f      	mov	r7, r3
 800435c:	898b      	ldrh	r3, [r1, #12]
 800435e:	05db      	lsls	r3, r3, #23
 8004360:	4605      	mov	r5, r0
 8004362:	460c      	mov	r4, r1
 8004364:	4616      	mov	r6, r2
 8004366:	d505      	bpl.n	8004374 <__swrite+0x1e>
 8004368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800436c:	2302      	movs	r3, #2
 800436e:	2200      	movs	r2, #0
 8004370:	f000 ff6a 	bl	8005248 <_lseek_r>
 8004374:	89a3      	ldrh	r3, [r4, #12]
 8004376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800437a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800437e:	81a3      	strh	r3, [r4, #12]
 8004380:	4632      	mov	r2, r6
 8004382:	463b      	mov	r3, r7
 8004384:	4628      	mov	r0, r5
 8004386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800438a:	f000 bf91 	b.w	80052b0 <_write_r>

0800438e <__sseek>:
 800438e:	b510      	push	{r4, lr}
 8004390:	460c      	mov	r4, r1
 8004392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004396:	f000 ff57 	bl	8005248 <_lseek_r>
 800439a:	1c43      	adds	r3, r0, #1
 800439c:	89a3      	ldrh	r3, [r4, #12]
 800439e:	bf15      	itete	ne
 80043a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80043a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80043a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80043aa:	81a3      	strheq	r3, [r4, #12]
 80043ac:	bf18      	it	ne
 80043ae:	81a3      	strhne	r3, [r4, #12]
 80043b0:	bd10      	pop	{r4, pc}

080043b2 <__sclose>:
 80043b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043b6:	f000 bf37 	b.w	8005228 <_close_r>
	...

080043bc <realloc>:
 80043bc:	4b02      	ldr	r3, [pc, #8]	@ (80043c8 <realloc+0xc>)
 80043be:	460a      	mov	r2, r1
 80043c0:	4601      	mov	r1, r0
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	f000 b8a6 	b.w	8004514 <_realloc_r>
 80043c8:	20000194 	.word	0x20000194

080043cc <std>:
 80043cc:	2300      	movs	r3, #0
 80043ce:	b510      	push	{r4, lr}
 80043d0:	4604      	mov	r4, r0
 80043d2:	e9c0 3300 	strd	r3, r3, [r0]
 80043d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043da:	6083      	str	r3, [r0, #8]
 80043dc:	8181      	strh	r1, [r0, #12]
 80043de:	6643      	str	r3, [r0, #100]	@ 0x64
 80043e0:	81c2      	strh	r2, [r0, #14]
 80043e2:	6183      	str	r3, [r0, #24]
 80043e4:	4619      	mov	r1, r3
 80043e6:	2208      	movs	r2, #8
 80043e8:	305c      	adds	r0, #92	@ 0x5c
 80043ea:	f000 ff14 	bl	8005216 <memset>
 80043ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004424 <std+0x58>)
 80043f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80043f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004428 <std+0x5c>)
 80043f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80043f6:	4b0d      	ldr	r3, [pc, #52]	@ (800442c <std+0x60>)
 80043f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80043fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004430 <std+0x64>)
 80043fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80043fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004434 <std+0x68>)
 8004400:	6224      	str	r4, [r4, #32]
 8004402:	429c      	cmp	r4, r3
 8004404:	d006      	beq.n	8004414 <std+0x48>
 8004406:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800440a:	4294      	cmp	r4, r2
 800440c:	d002      	beq.n	8004414 <std+0x48>
 800440e:	33d0      	adds	r3, #208	@ 0xd0
 8004410:	429c      	cmp	r4, r3
 8004412:	d105      	bne.n	8004420 <std+0x54>
 8004414:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800441c:	f000 bf84 	b.w	8005328 <__retarget_lock_init_recursive>
 8004420:	bd10      	pop	{r4, pc}
 8004422:	bf00      	nop
 8004424:	08004335 	.word	0x08004335
 8004428:	08004357 	.word	0x08004357
 800442c:	0800438f 	.word	0x0800438f
 8004430:	080043b3 	.word	0x080043b3
 8004434:	20005214 	.word	0x20005214

08004438 <stdio_exit_handler>:
 8004438:	4a02      	ldr	r2, [pc, #8]	@ (8004444 <stdio_exit_handler+0xc>)
 800443a:	4903      	ldr	r1, [pc, #12]	@ (8004448 <stdio_exit_handler+0x10>)
 800443c:	4803      	ldr	r0, [pc, #12]	@ (800444c <stdio_exit_handler+0x14>)
 800443e:	f000 bea7 	b.w	8005190 <_fwalk_sglue>
 8004442:	bf00      	nop
 8004444:	2000001c 	.word	0x2000001c
 8004448:	08005ead 	.word	0x08005ead
 800444c:	20000198 	.word	0x20000198

08004450 <cleanup_stdio>:
 8004450:	6841      	ldr	r1, [r0, #4]
 8004452:	4b0c      	ldr	r3, [pc, #48]	@ (8004484 <cleanup_stdio+0x34>)
 8004454:	4299      	cmp	r1, r3
 8004456:	b510      	push	{r4, lr}
 8004458:	4604      	mov	r4, r0
 800445a:	d001      	beq.n	8004460 <cleanup_stdio+0x10>
 800445c:	f001 fd26 	bl	8005eac <_fflush_r>
 8004460:	68a1      	ldr	r1, [r4, #8]
 8004462:	4b09      	ldr	r3, [pc, #36]	@ (8004488 <cleanup_stdio+0x38>)
 8004464:	4299      	cmp	r1, r3
 8004466:	d002      	beq.n	800446e <cleanup_stdio+0x1e>
 8004468:	4620      	mov	r0, r4
 800446a:	f001 fd1f 	bl	8005eac <_fflush_r>
 800446e:	68e1      	ldr	r1, [r4, #12]
 8004470:	4b06      	ldr	r3, [pc, #24]	@ (800448c <cleanup_stdio+0x3c>)
 8004472:	4299      	cmp	r1, r3
 8004474:	d004      	beq.n	8004480 <cleanup_stdio+0x30>
 8004476:	4620      	mov	r0, r4
 8004478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800447c:	f001 bd16 	b.w	8005eac <_fflush_r>
 8004480:	bd10      	pop	{r4, pc}
 8004482:	bf00      	nop
 8004484:	20005214 	.word	0x20005214
 8004488:	2000527c 	.word	0x2000527c
 800448c:	200052e4 	.word	0x200052e4

08004490 <global_stdio_init.part.0>:
 8004490:	b510      	push	{r4, lr}
 8004492:	4b0b      	ldr	r3, [pc, #44]	@ (80044c0 <global_stdio_init.part.0+0x30>)
 8004494:	4c0b      	ldr	r4, [pc, #44]	@ (80044c4 <global_stdio_init.part.0+0x34>)
 8004496:	4a0c      	ldr	r2, [pc, #48]	@ (80044c8 <global_stdio_init.part.0+0x38>)
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	4620      	mov	r0, r4
 800449c:	2200      	movs	r2, #0
 800449e:	2104      	movs	r1, #4
 80044a0:	f7ff ff94 	bl	80043cc <std>
 80044a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80044a8:	2201      	movs	r2, #1
 80044aa:	2109      	movs	r1, #9
 80044ac:	f7ff ff8e 	bl	80043cc <std>
 80044b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80044b4:	2202      	movs	r2, #2
 80044b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044ba:	2112      	movs	r1, #18
 80044bc:	f7ff bf86 	b.w	80043cc <std>
 80044c0:	2000534c 	.word	0x2000534c
 80044c4:	20005214 	.word	0x20005214
 80044c8:	08004439 	.word	0x08004439

080044cc <__sfp_lock_acquire>:
 80044cc:	4801      	ldr	r0, [pc, #4]	@ (80044d4 <__sfp_lock_acquire+0x8>)
 80044ce:	f000 bf2c 	b.w	800532a <__retarget_lock_acquire_recursive>
 80044d2:	bf00      	nop
 80044d4:	20005355 	.word	0x20005355

080044d8 <__sfp_lock_release>:
 80044d8:	4801      	ldr	r0, [pc, #4]	@ (80044e0 <__sfp_lock_release+0x8>)
 80044da:	f000 bf27 	b.w	800532c <__retarget_lock_release_recursive>
 80044de:	bf00      	nop
 80044e0:	20005355 	.word	0x20005355

080044e4 <__sinit>:
 80044e4:	b510      	push	{r4, lr}
 80044e6:	4604      	mov	r4, r0
 80044e8:	f7ff fff0 	bl	80044cc <__sfp_lock_acquire>
 80044ec:	6a23      	ldr	r3, [r4, #32]
 80044ee:	b11b      	cbz	r3, 80044f8 <__sinit+0x14>
 80044f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044f4:	f7ff bff0 	b.w	80044d8 <__sfp_lock_release>
 80044f8:	4b04      	ldr	r3, [pc, #16]	@ (800450c <__sinit+0x28>)
 80044fa:	6223      	str	r3, [r4, #32]
 80044fc:	4b04      	ldr	r3, [pc, #16]	@ (8004510 <__sinit+0x2c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1f5      	bne.n	80044f0 <__sinit+0xc>
 8004504:	f7ff ffc4 	bl	8004490 <global_stdio_init.part.0>
 8004508:	e7f2      	b.n	80044f0 <__sinit+0xc>
 800450a:	bf00      	nop
 800450c:	08004451 	.word	0x08004451
 8004510:	2000534c 	.word	0x2000534c

08004514 <_realloc_r>:
 8004514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004518:	4680      	mov	r8, r0
 800451a:	4615      	mov	r5, r2
 800451c:	460c      	mov	r4, r1
 800451e:	b921      	cbnz	r1, 800452a <_realloc_r+0x16>
 8004520:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004524:	4611      	mov	r1, r2
 8004526:	f7ff be79 	b.w	800421c <_malloc_r>
 800452a:	b92a      	cbnz	r2, 8004538 <_realloc_r+0x24>
 800452c:	f000 ff18 	bl	8005360 <_free_r>
 8004530:	2400      	movs	r4, #0
 8004532:	4620      	mov	r0, r4
 8004534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004538:	f002 f992 	bl	8006860 <_malloc_usable_size_r>
 800453c:	4285      	cmp	r5, r0
 800453e:	4606      	mov	r6, r0
 8004540:	d802      	bhi.n	8004548 <_realloc_r+0x34>
 8004542:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004546:	d8f4      	bhi.n	8004532 <_realloc_r+0x1e>
 8004548:	4629      	mov	r1, r5
 800454a:	4640      	mov	r0, r8
 800454c:	f7ff fe66 	bl	800421c <_malloc_r>
 8004550:	4607      	mov	r7, r0
 8004552:	2800      	cmp	r0, #0
 8004554:	d0ec      	beq.n	8004530 <_realloc_r+0x1c>
 8004556:	42b5      	cmp	r5, r6
 8004558:	462a      	mov	r2, r5
 800455a:	4621      	mov	r1, r4
 800455c:	bf28      	it	cs
 800455e:	4632      	movcs	r2, r6
 8004560:	f000 fee5 	bl	800532e <memcpy>
 8004564:	4621      	mov	r1, r4
 8004566:	4640      	mov	r0, r8
 8004568:	f000 fefa 	bl	8005360 <_free_r>
 800456c:	463c      	mov	r4, r7
 800456e:	e7e0      	b.n	8004532 <_realloc_r+0x1e>

08004570 <sulp>:
 8004570:	b570      	push	{r4, r5, r6, lr}
 8004572:	4604      	mov	r4, r0
 8004574:	460d      	mov	r5, r1
 8004576:	ec45 4b10 	vmov	d0, r4, r5
 800457a:	4616      	mov	r6, r2
 800457c:	f002 f832 	bl	80065e4 <__ulp>
 8004580:	ec51 0b10 	vmov	r0, r1, d0
 8004584:	b17e      	cbz	r6, 80045a6 <sulp+0x36>
 8004586:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800458a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800458e:	2b00      	cmp	r3, #0
 8004590:	dd09      	ble.n	80045a6 <sulp+0x36>
 8004592:	051b      	lsls	r3, r3, #20
 8004594:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8004598:	2400      	movs	r4, #0
 800459a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800459e:	4622      	mov	r2, r4
 80045a0:	462b      	mov	r3, r5
 80045a2:	f7fc f859 	bl	8000658 <__aeabi_dmul>
 80045a6:	ec41 0b10 	vmov	d0, r0, r1
 80045aa:	bd70      	pop	{r4, r5, r6, pc}
 80045ac:	0000      	movs	r0, r0
	...

080045b0 <_strtod_l>:
 80045b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045b4:	b09f      	sub	sp, #124	@ 0x7c
 80045b6:	460c      	mov	r4, r1
 80045b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80045ba:	2200      	movs	r2, #0
 80045bc:	921a      	str	r2, [sp, #104]	@ 0x68
 80045be:	9005      	str	r0, [sp, #20]
 80045c0:	f04f 0a00 	mov.w	sl, #0
 80045c4:	f04f 0b00 	mov.w	fp, #0
 80045c8:	460a      	mov	r2, r1
 80045ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80045cc:	7811      	ldrb	r1, [r2, #0]
 80045ce:	292b      	cmp	r1, #43	@ 0x2b
 80045d0:	d04a      	beq.n	8004668 <_strtod_l+0xb8>
 80045d2:	d838      	bhi.n	8004646 <_strtod_l+0x96>
 80045d4:	290d      	cmp	r1, #13
 80045d6:	d832      	bhi.n	800463e <_strtod_l+0x8e>
 80045d8:	2908      	cmp	r1, #8
 80045da:	d832      	bhi.n	8004642 <_strtod_l+0x92>
 80045dc:	2900      	cmp	r1, #0
 80045de:	d03b      	beq.n	8004658 <_strtod_l+0xa8>
 80045e0:	2200      	movs	r2, #0
 80045e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80045e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80045e6:	782a      	ldrb	r2, [r5, #0]
 80045e8:	2a30      	cmp	r2, #48	@ 0x30
 80045ea:	f040 80b3 	bne.w	8004754 <_strtod_l+0x1a4>
 80045ee:	786a      	ldrb	r2, [r5, #1]
 80045f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80045f4:	2a58      	cmp	r2, #88	@ 0x58
 80045f6:	d16e      	bne.n	80046d6 <_strtod_l+0x126>
 80045f8:	9302      	str	r3, [sp, #8]
 80045fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80045fc:	9301      	str	r3, [sp, #4]
 80045fe:	ab1a      	add	r3, sp, #104	@ 0x68
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	4a8e      	ldr	r2, [pc, #568]	@ (800483c <_strtod_l+0x28c>)
 8004604:	9805      	ldr	r0, [sp, #20]
 8004606:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004608:	a919      	add	r1, sp, #100	@ 0x64
 800460a:	f000 ff5b 	bl	80054c4 <__gethex>
 800460e:	f010 060f 	ands.w	r6, r0, #15
 8004612:	4604      	mov	r4, r0
 8004614:	d005      	beq.n	8004622 <_strtod_l+0x72>
 8004616:	2e06      	cmp	r6, #6
 8004618:	d128      	bne.n	800466c <_strtod_l+0xbc>
 800461a:	3501      	adds	r5, #1
 800461c:	2300      	movs	r3, #0
 800461e:	9519      	str	r5, [sp, #100]	@ 0x64
 8004620:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004622:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004624:	2b00      	cmp	r3, #0
 8004626:	f040 858e 	bne.w	8005146 <_strtod_l+0xb96>
 800462a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800462c:	b1cb      	cbz	r3, 8004662 <_strtod_l+0xb2>
 800462e:	4652      	mov	r2, sl
 8004630:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8004634:	ec43 2b10 	vmov	d0, r2, r3
 8004638:	b01f      	add	sp, #124	@ 0x7c
 800463a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800463e:	2920      	cmp	r1, #32
 8004640:	d1ce      	bne.n	80045e0 <_strtod_l+0x30>
 8004642:	3201      	adds	r2, #1
 8004644:	e7c1      	b.n	80045ca <_strtod_l+0x1a>
 8004646:	292d      	cmp	r1, #45	@ 0x2d
 8004648:	d1ca      	bne.n	80045e0 <_strtod_l+0x30>
 800464a:	2101      	movs	r1, #1
 800464c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800464e:	1c51      	adds	r1, r2, #1
 8004650:	9119      	str	r1, [sp, #100]	@ 0x64
 8004652:	7852      	ldrb	r2, [r2, #1]
 8004654:	2a00      	cmp	r2, #0
 8004656:	d1c5      	bne.n	80045e4 <_strtod_l+0x34>
 8004658:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800465a:	9419      	str	r4, [sp, #100]	@ 0x64
 800465c:	2b00      	cmp	r3, #0
 800465e:	f040 8570 	bne.w	8005142 <_strtod_l+0xb92>
 8004662:	4652      	mov	r2, sl
 8004664:	465b      	mov	r3, fp
 8004666:	e7e5      	b.n	8004634 <_strtod_l+0x84>
 8004668:	2100      	movs	r1, #0
 800466a:	e7ef      	b.n	800464c <_strtod_l+0x9c>
 800466c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800466e:	b13a      	cbz	r2, 8004680 <_strtod_l+0xd0>
 8004670:	2135      	movs	r1, #53	@ 0x35
 8004672:	a81c      	add	r0, sp, #112	@ 0x70
 8004674:	f002 f8b0 	bl	80067d8 <__copybits>
 8004678:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800467a:	9805      	ldr	r0, [sp, #20]
 800467c:	f001 fc7e 	bl	8005f7c <_Bfree>
 8004680:	3e01      	subs	r6, #1
 8004682:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8004684:	2e04      	cmp	r6, #4
 8004686:	d806      	bhi.n	8004696 <_strtod_l+0xe6>
 8004688:	e8df f006 	tbb	[pc, r6]
 800468c:	201d0314 	.word	0x201d0314
 8004690:	14          	.byte	0x14
 8004691:	00          	.byte	0x00
 8004692:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8004696:	05e1      	lsls	r1, r4, #23
 8004698:	bf48      	it	mi
 800469a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800469e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80046a2:	0d1b      	lsrs	r3, r3, #20
 80046a4:	051b      	lsls	r3, r3, #20
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1bb      	bne.n	8004622 <_strtod_l+0x72>
 80046aa:	f000 fe13 	bl	80052d4 <__errno>
 80046ae:	2322      	movs	r3, #34	@ 0x22
 80046b0:	6003      	str	r3, [r0, #0]
 80046b2:	e7b6      	b.n	8004622 <_strtod_l+0x72>
 80046b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80046b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80046bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80046c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80046c4:	e7e7      	b.n	8004696 <_strtod_l+0xe6>
 80046c6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8004844 <_strtod_l+0x294>
 80046ca:	e7e4      	b.n	8004696 <_strtod_l+0xe6>
 80046cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80046d0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80046d4:	e7df      	b.n	8004696 <_strtod_l+0xe6>
 80046d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	9219      	str	r2, [sp, #100]	@ 0x64
 80046dc:	785b      	ldrb	r3, [r3, #1]
 80046de:	2b30      	cmp	r3, #48	@ 0x30
 80046e0:	d0f9      	beq.n	80046d6 <_strtod_l+0x126>
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d09d      	beq.n	8004622 <_strtod_l+0x72>
 80046e6:	2301      	movs	r3, #1
 80046e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80046ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80046ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80046ee:	2300      	movs	r3, #0
 80046f0:	9308      	str	r3, [sp, #32]
 80046f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80046f4:	461f      	mov	r7, r3
 80046f6:	220a      	movs	r2, #10
 80046f8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80046fa:	7805      	ldrb	r5, [r0, #0]
 80046fc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8004700:	b2d9      	uxtb	r1, r3
 8004702:	2909      	cmp	r1, #9
 8004704:	d928      	bls.n	8004758 <_strtod_l+0x1a8>
 8004706:	494e      	ldr	r1, [pc, #312]	@ (8004840 <_strtod_l+0x290>)
 8004708:	2201      	movs	r2, #1
 800470a:	f000 fd5f 	bl	80051cc <strncmp>
 800470e:	2800      	cmp	r0, #0
 8004710:	d032      	beq.n	8004778 <_strtod_l+0x1c8>
 8004712:	2000      	movs	r0, #0
 8004714:	462a      	mov	r2, r5
 8004716:	4681      	mov	r9, r0
 8004718:	463d      	mov	r5, r7
 800471a:	4603      	mov	r3, r0
 800471c:	2a65      	cmp	r2, #101	@ 0x65
 800471e:	d001      	beq.n	8004724 <_strtod_l+0x174>
 8004720:	2a45      	cmp	r2, #69	@ 0x45
 8004722:	d114      	bne.n	800474e <_strtod_l+0x19e>
 8004724:	b91d      	cbnz	r5, 800472e <_strtod_l+0x17e>
 8004726:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004728:	4302      	orrs	r2, r0
 800472a:	d095      	beq.n	8004658 <_strtod_l+0xa8>
 800472c:	2500      	movs	r5, #0
 800472e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8004730:	1c62      	adds	r2, r4, #1
 8004732:	9219      	str	r2, [sp, #100]	@ 0x64
 8004734:	7862      	ldrb	r2, [r4, #1]
 8004736:	2a2b      	cmp	r2, #43	@ 0x2b
 8004738:	d077      	beq.n	800482a <_strtod_l+0x27a>
 800473a:	2a2d      	cmp	r2, #45	@ 0x2d
 800473c:	d07b      	beq.n	8004836 <_strtod_l+0x286>
 800473e:	f04f 0c00 	mov.w	ip, #0
 8004742:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8004746:	2909      	cmp	r1, #9
 8004748:	f240 8082 	bls.w	8004850 <_strtod_l+0x2a0>
 800474c:	9419      	str	r4, [sp, #100]	@ 0x64
 800474e:	f04f 0800 	mov.w	r8, #0
 8004752:	e0a2      	b.n	800489a <_strtod_l+0x2ea>
 8004754:	2300      	movs	r3, #0
 8004756:	e7c7      	b.n	80046e8 <_strtod_l+0x138>
 8004758:	2f08      	cmp	r7, #8
 800475a:	bfd5      	itete	le
 800475c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800475e:	9908      	ldrgt	r1, [sp, #32]
 8004760:	fb02 3301 	mlale	r3, r2, r1, r3
 8004764:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004768:	f100 0001 	add.w	r0, r0, #1
 800476c:	bfd4      	ite	le
 800476e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8004770:	9308      	strgt	r3, [sp, #32]
 8004772:	3701      	adds	r7, #1
 8004774:	9019      	str	r0, [sp, #100]	@ 0x64
 8004776:	e7bf      	b.n	80046f8 <_strtod_l+0x148>
 8004778:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	9219      	str	r2, [sp, #100]	@ 0x64
 800477e:	785a      	ldrb	r2, [r3, #1]
 8004780:	b37f      	cbz	r7, 80047e2 <_strtod_l+0x232>
 8004782:	4681      	mov	r9, r0
 8004784:	463d      	mov	r5, r7
 8004786:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800478a:	2b09      	cmp	r3, #9
 800478c:	d912      	bls.n	80047b4 <_strtod_l+0x204>
 800478e:	2301      	movs	r3, #1
 8004790:	e7c4      	b.n	800471c <_strtod_l+0x16c>
 8004792:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	9219      	str	r2, [sp, #100]	@ 0x64
 8004798:	785a      	ldrb	r2, [r3, #1]
 800479a:	3001      	adds	r0, #1
 800479c:	2a30      	cmp	r2, #48	@ 0x30
 800479e:	d0f8      	beq.n	8004792 <_strtod_l+0x1e2>
 80047a0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	f200 84d3 	bhi.w	8005150 <_strtod_l+0xba0>
 80047aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80047ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80047ae:	4681      	mov	r9, r0
 80047b0:	2000      	movs	r0, #0
 80047b2:	4605      	mov	r5, r0
 80047b4:	3a30      	subs	r2, #48	@ 0x30
 80047b6:	f100 0301 	add.w	r3, r0, #1
 80047ba:	d02a      	beq.n	8004812 <_strtod_l+0x262>
 80047bc:	4499      	add	r9, r3
 80047be:	eb00 0c05 	add.w	ip, r0, r5
 80047c2:	462b      	mov	r3, r5
 80047c4:	210a      	movs	r1, #10
 80047c6:	4563      	cmp	r3, ip
 80047c8:	d10d      	bne.n	80047e6 <_strtod_l+0x236>
 80047ca:	1c69      	adds	r1, r5, #1
 80047cc:	4401      	add	r1, r0
 80047ce:	4428      	add	r0, r5
 80047d0:	2808      	cmp	r0, #8
 80047d2:	dc16      	bgt.n	8004802 <_strtod_l+0x252>
 80047d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80047d6:	230a      	movs	r3, #10
 80047d8:	fb03 2300 	mla	r3, r3, r0, r2
 80047dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80047de:	2300      	movs	r3, #0
 80047e0:	e018      	b.n	8004814 <_strtod_l+0x264>
 80047e2:	4638      	mov	r0, r7
 80047e4:	e7da      	b.n	800479c <_strtod_l+0x1ec>
 80047e6:	2b08      	cmp	r3, #8
 80047e8:	f103 0301 	add.w	r3, r3, #1
 80047ec:	dc03      	bgt.n	80047f6 <_strtod_l+0x246>
 80047ee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80047f0:	434e      	muls	r6, r1
 80047f2:	960a      	str	r6, [sp, #40]	@ 0x28
 80047f4:	e7e7      	b.n	80047c6 <_strtod_l+0x216>
 80047f6:	2b10      	cmp	r3, #16
 80047f8:	bfde      	ittt	le
 80047fa:	9e08      	ldrle	r6, [sp, #32]
 80047fc:	434e      	mulle	r6, r1
 80047fe:	9608      	strle	r6, [sp, #32]
 8004800:	e7e1      	b.n	80047c6 <_strtod_l+0x216>
 8004802:	280f      	cmp	r0, #15
 8004804:	dceb      	bgt.n	80047de <_strtod_l+0x22e>
 8004806:	9808      	ldr	r0, [sp, #32]
 8004808:	230a      	movs	r3, #10
 800480a:	fb03 2300 	mla	r3, r3, r0, r2
 800480e:	9308      	str	r3, [sp, #32]
 8004810:	e7e5      	b.n	80047de <_strtod_l+0x22e>
 8004812:	4629      	mov	r1, r5
 8004814:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004816:	1c50      	adds	r0, r2, #1
 8004818:	9019      	str	r0, [sp, #100]	@ 0x64
 800481a:	7852      	ldrb	r2, [r2, #1]
 800481c:	4618      	mov	r0, r3
 800481e:	460d      	mov	r5, r1
 8004820:	e7b1      	b.n	8004786 <_strtod_l+0x1d6>
 8004822:	f04f 0900 	mov.w	r9, #0
 8004826:	2301      	movs	r3, #1
 8004828:	e77d      	b.n	8004726 <_strtod_l+0x176>
 800482a:	f04f 0c00 	mov.w	ip, #0
 800482e:	1ca2      	adds	r2, r4, #2
 8004830:	9219      	str	r2, [sp, #100]	@ 0x64
 8004832:	78a2      	ldrb	r2, [r4, #2]
 8004834:	e785      	b.n	8004742 <_strtod_l+0x192>
 8004836:	f04f 0c01 	mov.w	ip, #1
 800483a:	e7f8      	b.n	800482e <_strtod_l+0x27e>
 800483c:	08007958 	.word	0x08007958
 8004840:	08007934 	.word	0x08007934
 8004844:	7ff00000 	.word	0x7ff00000
 8004848:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800484a:	1c51      	adds	r1, r2, #1
 800484c:	9119      	str	r1, [sp, #100]	@ 0x64
 800484e:	7852      	ldrb	r2, [r2, #1]
 8004850:	2a30      	cmp	r2, #48	@ 0x30
 8004852:	d0f9      	beq.n	8004848 <_strtod_l+0x298>
 8004854:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8004858:	2908      	cmp	r1, #8
 800485a:	f63f af78 	bhi.w	800474e <_strtod_l+0x19e>
 800485e:	3a30      	subs	r2, #48	@ 0x30
 8004860:	920e      	str	r2, [sp, #56]	@ 0x38
 8004862:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004864:	920f      	str	r2, [sp, #60]	@ 0x3c
 8004866:	f04f 080a 	mov.w	r8, #10
 800486a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800486c:	1c56      	adds	r6, r2, #1
 800486e:	9619      	str	r6, [sp, #100]	@ 0x64
 8004870:	7852      	ldrb	r2, [r2, #1]
 8004872:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8004876:	f1be 0f09 	cmp.w	lr, #9
 800487a:	d939      	bls.n	80048f0 <_strtod_l+0x340>
 800487c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800487e:	1a76      	subs	r6, r6, r1
 8004880:	2e08      	cmp	r6, #8
 8004882:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8004886:	dc03      	bgt.n	8004890 <_strtod_l+0x2e0>
 8004888:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800488a:	4588      	cmp	r8, r1
 800488c:	bfa8      	it	ge
 800488e:	4688      	movge	r8, r1
 8004890:	f1bc 0f00 	cmp.w	ip, #0
 8004894:	d001      	beq.n	800489a <_strtod_l+0x2ea>
 8004896:	f1c8 0800 	rsb	r8, r8, #0
 800489a:	2d00      	cmp	r5, #0
 800489c:	d14e      	bne.n	800493c <_strtod_l+0x38c>
 800489e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80048a0:	4308      	orrs	r0, r1
 80048a2:	f47f aebe 	bne.w	8004622 <_strtod_l+0x72>
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f47f aed6 	bne.w	8004658 <_strtod_l+0xa8>
 80048ac:	2a69      	cmp	r2, #105	@ 0x69
 80048ae:	d028      	beq.n	8004902 <_strtod_l+0x352>
 80048b0:	dc25      	bgt.n	80048fe <_strtod_l+0x34e>
 80048b2:	2a49      	cmp	r2, #73	@ 0x49
 80048b4:	d025      	beq.n	8004902 <_strtod_l+0x352>
 80048b6:	2a4e      	cmp	r2, #78	@ 0x4e
 80048b8:	f47f aece 	bne.w	8004658 <_strtod_l+0xa8>
 80048bc:	499b      	ldr	r1, [pc, #620]	@ (8004b2c <_strtod_l+0x57c>)
 80048be:	a819      	add	r0, sp, #100	@ 0x64
 80048c0:	f001 f822 	bl	8005908 <__match>
 80048c4:	2800      	cmp	r0, #0
 80048c6:	f43f aec7 	beq.w	8004658 <_strtod_l+0xa8>
 80048ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2b28      	cmp	r3, #40	@ 0x28
 80048d0:	d12e      	bne.n	8004930 <_strtod_l+0x380>
 80048d2:	4997      	ldr	r1, [pc, #604]	@ (8004b30 <_strtod_l+0x580>)
 80048d4:	aa1c      	add	r2, sp, #112	@ 0x70
 80048d6:	a819      	add	r0, sp, #100	@ 0x64
 80048d8:	f001 f82a 	bl	8005930 <__hexnan>
 80048dc:	2805      	cmp	r0, #5
 80048de:	d127      	bne.n	8004930 <_strtod_l+0x380>
 80048e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80048e2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80048e6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80048ea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80048ee:	e698      	b.n	8004622 <_strtod_l+0x72>
 80048f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80048f2:	fb08 2101 	mla	r1, r8, r1, r2
 80048f6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80048fa:	920e      	str	r2, [sp, #56]	@ 0x38
 80048fc:	e7b5      	b.n	800486a <_strtod_l+0x2ba>
 80048fe:	2a6e      	cmp	r2, #110	@ 0x6e
 8004900:	e7da      	b.n	80048b8 <_strtod_l+0x308>
 8004902:	498c      	ldr	r1, [pc, #560]	@ (8004b34 <_strtod_l+0x584>)
 8004904:	a819      	add	r0, sp, #100	@ 0x64
 8004906:	f000 ffff 	bl	8005908 <__match>
 800490a:	2800      	cmp	r0, #0
 800490c:	f43f aea4 	beq.w	8004658 <_strtod_l+0xa8>
 8004910:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004912:	4989      	ldr	r1, [pc, #548]	@ (8004b38 <_strtod_l+0x588>)
 8004914:	3b01      	subs	r3, #1
 8004916:	a819      	add	r0, sp, #100	@ 0x64
 8004918:	9319      	str	r3, [sp, #100]	@ 0x64
 800491a:	f000 fff5 	bl	8005908 <__match>
 800491e:	b910      	cbnz	r0, 8004926 <_strtod_l+0x376>
 8004920:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004922:	3301      	adds	r3, #1
 8004924:	9319      	str	r3, [sp, #100]	@ 0x64
 8004926:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8004b48 <_strtod_l+0x598>
 800492a:	f04f 0a00 	mov.w	sl, #0
 800492e:	e678      	b.n	8004622 <_strtod_l+0x72>
 8004930:	4882      	ldr	r0, [pc, #520]	@ (8004b3c <_strtod_l+0x58c>)
 8004932:	f000 fd0d 	bl	8005350 <nan>
 8004936:	ec5b ab10 	vmov	sl, fp, d0
 800493a:	e672      	b.n	8004622 <_strtod_l+0x72>
 800493c:	eba8 0309 	sub.w	r3, r8, r9
 8004940:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004942:	9309      	str	r3, [sp, #36]	@ 0x24
 8004944:	2f00      	cmp	r7, #0
 8004946:	bf08      	it	eq
 8004948:	462f      	moveq	r7, r5
 800494a:	2d10      	cmp	r5, #16
 800494c:	462c      	mov	r4, r5
 800494e:	bfa8      	it	ge
 8004950:	2410      	movge	r4, #16
 8004952:	f7fb fe07 	bl	8000564 <__aeabi_ui2d>
 8004956:	2d09      	cmp	r5, #9
 8004958:	4682      	mov	sl, r0
 800495a:	468b      	mov	fp, r1
 800495c:	dc13      	bgt.n	8004986 <_strtod_l+0x3d6>
 800495e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004960:	2b00      	cmp	r3, #0
 8004962:	f43f ae5e 	beq.w	8004622 <_strtod_l+0x72>
 8004966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004968:	dd78      	ble.n	8004a5c <_strtod_l+0x4ac>
 800496a:	2b16      	cmp	r3, #22
 800496c:	dc5f      	bgt.n	8004a2e <_strtod_l+0x47e>
 800496e:	4974      	ldr	r1, [pc, #464]	@ (8004b40 <_strtod_l+0x590>)
 8004970:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004974:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004978:	4652      	mov	r2, sl
 800497a:	465b      	mov	r3, fp
 800497c:	f7fb fe6c 	bl	8000658 <__aeabi_dmul>
 8004980:	4682      	mov	sl, r0
 8004982:	468b      	mov	fp, r1
 8004984:	e64d      	b.n	8004622 <_strtod_l+0x72>
 8004986:	4b6e      	ldr	r3, [pc, #440]	@ (8004b40 <_strtod_l+0x590>)
 8004988:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800498c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8004990:	f7fb fe62 	bl	8000658 <__aeabi_dmul>
 8004994:	4682      	mov	sl, r0
 8004996:	9808      	ldr	r0, [sp, #32]
 8004998:	468b      	mov	fp, r1
 800499a:	f7fb fde3 	bl	8000564 <__aeabi_ui2d>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4650      	mov	r0, sl
 80049a4:	4659      	mov	r1, fp
 80049a6:	f7fb fca1 	bl	80002ec <__adddf3>
 80049aa:	2d0f      	cmp	r5, #15
 80049ac:	4682      	mov	sl, r0
 80049ae:	468b      	mov	fp, r1
 80049b0:	ddd5      	ble.n	800495e <_strtod_l+0x3ae>
 80049b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049b4:	1b2c      	subs	r4, r5, r4
 80049b6:	441c      	add	r4, r3
 80049b8:	2c00      	cmp	r4, #0
 80049ba:	f340 8096 	ble.w	8004aea <_strtod_l+0x53a>
 80049be:	f014 030f 	ands.w	r3, r4, #15
 80049c2:	d00a      	beq.n	80049da <_strtod_l+0x42a>
 80049c4:	495e      	ldr	r1, [pc, #376]	@ (8004b40 <_strtod_l+0x590>)
 80049c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80049ca:	4652      	mov	r2, sl
 80049cc:	465b      	mov	r3, fp
 80049ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049d2:	f7fb fe41 	bl	8000658 <__aeabi_dmul>
 80049d6:	4682      	mov	sl, r0
 80049d8:	468b      	mov	fp, r1
 80049da:	f034 040f 	bics.w	r4, r4, #15
 80049de:	d073      	beq.n	8004ac8 <_strtod_l+0x518>
 80049e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80049e4:	dd48      	ble.n	8004a78 <_strtod_l+0x4c8>
 80049e6:	2400      	movs	r4, #0
 80049e8:	46a0      	mov	r8, r4
 80049ea:	940a      	str	r4, [sp, #40]	@ 0x28
 80049ec:	46a1      	mov	r9, r4
 80049ee:	9a05      	ldr	r2, [sp, #20]
 80049f0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8004b48 <_strtod_l+0x598>
 80049f4:	2322      	movs	r3, #34	@ 0x22
 80049f6:	6013      	str	r3, [r2, #0]
 80049f8:	f04f 0a00 	mov.w	sl, #0
 80049fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f43f ae0f 	beq.w	8004622 <_strtod_l+0x72>
 8004a04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004a06:	9805      	ldr	r0, [sp, #20]
 8004a08:	f001 fab8 	bl	8005f7c <_Bfree>
 8004a0c:	9805      	ldr	r0, [sp, #20]
 8004a0e:	4649      	mov	r1, r9
 8004a10:	f001 fab4 	bl	8005f7c <_Bfree>
 8004a14:	9805      	ldr	r0, [sp, #20]
 8004a16:	4641      	mov	r1, r8
 8004a18:	f001 fab0 	bl	8005f7c <_Bfree>
 8004a1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004a1e:	9805      	ldr	r0, [sp, #20]
 8004a20:	f001 faac 	bl	8005f7c <_Bfree>
 8004a24:	9805      	ldr	r0, [sp, #20]
 8004a26:	4621      	mov	r1, r4
 8004a28:	f001 faa8 	bl	8005f7c <_Bfree>
 8004a2c:	e5f9      	b.n	8004622 <_strtod_l+0x72>
 8004a2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a30:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8004a34:	4293      	cmp	r3, r2
 8004a36:	dbbc      	blt.n	80049b2 <_strtod_l+0x402>
 8004a38:	4c41      	ldr	r4, [pc, #260]	@ (8004b40 <_strtod_l+0x590>)
 8004a3a:	f1c5 050f 	rsb	r5, r5, #15
 8004a3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004a42:	4652      	mov	r2, sl
 8004a44:	465b      	mov	r3, fp
 8004a46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a4a:	f7fb fe05 	bl	8000658 <__aeabi_dmul>
 8004a4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a50:	1b5d      	subs	r5, r3, r5
 8004a52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004a56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004a5a:	e78f      	b.n	800497c <_strtod_l+0x3cc>
 8004a5c:	3316      	adds	r3, #22
 8004a5e:	dba8      	blt.n	80049b2 <_strtod_l+0x402>
 8004a60:	4b37      	ldr	r3, [pc, #220]	@ (8004b40 <_strtod_l+0x590>)
 8004a62:	eba9 0808 	sub.w	r8, r9, r8
 8004a66:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8004a6a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8004a6e:	4650      	mov	r0, sl
 8004a70:	4659      	mov	r1, fp
 8004a72:	f7fb ff1b 	bl	80008ac <__aeabi_ddiv>
 8004a76:	e783      	b.n	8004980 <_strtod_l+0x3d0>
 8004a78:	4b32      	ldr	r3, [pc, #200]	@ (8004b44 <_strtod_l+0x594>)
 8004a7a:	9308      	str	r3, [sp, #32]
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	1124      	asrs	r4, r4, #4
 8004a80:	4650      	mov	r0, sl
 8004a82:	4659      	mov	r1, fp
 8004a84:	461e      	mov	r6, r3
 8004a86:	2c01      	cmp	r4, #1
 8004a88:	dc21      	bgt.n	8004ace <_strtod_l+0x51e>
 8004a8a:	b10b      	cbz	r3, 8004a90 <_strtod_l+0x4e0>
 8004a8c:	4682      	mov	sl, r0
 8004a8e:	468b      	mov	fp, r1
 8004a90:	492c      	ldr	r1, [pc, #176]	@ (8004b44 <_strtod_l+0x594>)
 8004a92:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8004a96:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8004a9a:	4652      	mov	r2, sl
 8004a9c:	465b      	mov	r3, fp
 8004a9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004aa2:	f7fb fdd9 	bl	8000658 <__aeabi_dmul>
 8004aa6:	4b28      	ldr	r3, [pc, #160]	@ (8004b48 <_strtod_l+0x598>)
 8004aa8:	460a      	mov	r2, r1
 8004aaa:	400b      	ands	r3, r1
 8004aac:	4927      	ldr	r1, [pc, #156]	@ (8004b4c <_strtod_l+0x59c>)
 8004aae:	428b      	cmp	r3, r1
 8004ab0:	4682      	mov	sl, r0
 8004ab2:	d898      	bhi.n	80049e6 <_strtod_l+0x436>
 8004ab4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8004ab8:	428b      	cmp	r3, r1
 8004aba:	bf86      	itte	hi
 8004abc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8004b50 <_strtod_l+0x5a0>
 8004ac0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8004ac4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8004ac8:	2300      	movs	r3, #0
 8004aca:	9308      	str	r3, [sp, #32]
 8004acc:	e07a      	b.n	8004bc4 <_strtod_l+0x614>
 8004ace:	07e2      	lsls	r2, r4, #31
 8004ad0:	d505      	bpl.n	8004ade <_strtod_l+0x52e>
 8004ad2:	9b08      	ldr	r3, [sp, #32]
 8004ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad8:	f7fb fdbe 	bl	8000658 <__aeabi_dmul>
 8004adc:	2301      	movs	r3, #1
 8004ade:	9a08      	ldr	r2, [sp, #32]
 8004ae0:	3208      	adds	r2, #8
 8004ae2:	3601      	adds	r6, #1
 8004ae4:	1064      	asrs	r4, r4, #1
 8004ae6:	9208      	str	r2, [sp, #32]
 8004ae8:	e7cd      	b.n	8004a86 <_strtod_l+0x4d6>
 8004aea:	d0ed      	beq.n	8004ac8 <_strtod_l+0x518>
 8004aec:	4264      	negs	r4, r4
 8004aee:	f014 020f 	ands.w	r2, r4, #15
 8004af2:	d00a      	beq.n	8004b0a <_strtod_l+0x55a>
 8004af4:	4b12      	ldr	r3, [pc, #72]	@ (8004b40 <_strtod_l+0x590>)
 8004af6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004afa:	4650      	mov	r0, sl
 8004afc:	4659      	mov	r1, fp
 8004afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b02:	f7fb fed3 	bl	80008ac <__aeabi_ddiv>
 8004b06:	4682      	mov	sl, r0
 8004b08:	468b      	mov	fp, r1
 8004b0a:	1124      	asrs	r4, r4, #4
 8004b0c:	d0dc      	beq.n	8004ac8 <_strtod_l+0x518>
 8004b0e:	2c1f      	cmp	r4, #31
 8004b10:	dd20      	ble.n	8004b54 <_strtod_l+0x5a4>
 8004b12:	2400      	movs	r4, #0
 8004b14:	46a0      	mov	r8, r4
 8004b16:	940a      	str	r4, [sp, #40]	@ 0x28
 8004b18:	46a1      	mov	r9, r4
 8004b1a:	9a05      	ldr	r2, [sp, #20]
 8004b1c:	2322      	movs	r3, #34	@ 0x22
 8004b1e:	f04f 0a00 	mov.w	sl, #0
 8004b22:	f04f 0b00 	mov.w	fp, #0
 8004b26:	6013      	str	r3, [r2, #0]
 8004b28:	e768      	b.n	80049fc <_strtod_l+0x44c>
 8004b2a:	bf00      	nop
 8004b2c:	0800793f 	.word	0x0800793f
 8004b30:	08007944 	.word	0x08007944
 8004b34:	08007936 	.word	0x08007936
 8004b38:	08007939 	.word	0x08007939
 8004b3c:	08007cdb 	.word	0x08007cdb
 8004b40:	08007bd8 	.word	0x08007bd8
 8004b44:	08007bb0 	.word	0x08007bb0
 8004b48:	7ff00000 	.word	0x7ff00000
 8004b4c:	7ca00000 	.word	0x7ca00000
 8004b50:	7fefffff 	.word	0x7fefffff
 8004b54:	f014 0310 	ands.w	r3, r4, #16
 8004b58:	bf18      	it	ne
 8004b5a:	236a      	movne	r3, #106	@ 0x6a
 8004b5c:	4ea9      	ldr	r6, [pc, #676]	@ (8004e04 <_strtod_l+0x854>)
 8004b5e:	9308      	str	r3, [sp, #32]
 8004b60:	4650      	mov	r0, sl
 8004b62:	4659      	mov	r1, fp
 8004b64:	2300      	movs	r3, #0
 8004b66:	07e2      	lsls	r2, r4, #31
 8004b68:	d504      	bpl.n	8004b74 <_strtod_l+0x5c4>
 8004b6a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004b6e:	f7fb fd73 	bl	8000658 <__aeabi_dmul>
 8004b72:	2301      	movs	r3, #1
 8004b74:	1064      	asrs	r4, r4, #1
 8004b76:	f106 0608 	add.w	r6, r6, #8
 8004b7a:	d1f4      	bne.n	8004b66 <_strtod_l+0x5b6>
 8004b7c:	b10b      	cbz	r3, 8004b82 <_strtod_l+0x5d2>
 8004b7e:	4682      	mov	sl, r0
 8004b80:	468b      	mov	fp, r1
 8004b82:	9b08      	ldr	r3, [sp, #32]
 8004b84:	b1b3      	cbz	r3, 8004bb4 <_strtod_l+0x604>
 8004b86:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8004b8a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	4659      	mov	r1, fp
 8004b92:	dd0f      	ble.n	8004bb4 <_strtod_l+0x604>
 8004b94:	2b1f      	cmp	r3, #31
 8004b96:	dd55      	ble.n	8004c44 <_strtod_l+0x694>
 8004b98:	2b34      	cmp	r3, #52	@ 0x34
 8004b9a:	bfde      	ittt	le
 8004b9c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8004ba0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8004ba4:	4093      	lslle	r3, r2
 8004ba6:	f04f 0a00 	mov.w	sl, #0
 8004baa:	bfcc      	ite	gt
 8004bac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8004bb0:	ea03 0b01 	andle.w	fp, r3, r1
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	4650      	mov	r0, sl
 8004bba:	4659      	mov	r1, fp
 8004bbc:	f7fb ffb4 	bl	8000b28 <__aeabi_dcmpeq>
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	d1a6      	bne.n	8004b12 <_strtod_l+0x562>
 8004bc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004bca:	9805      	ldr	r0, [sp, #20]
 8004bcc:	462b      	mov	r3, r5
 8004bce:	463a      	mov	r2, r7
 8004bd0:	f001 fa3c 	bl	800604c <__s2b>
 8004bd4:	900a      	str	r0, [sp, #40]	@ 0x28
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	f43f af05 	beq.w	80049e6 <_strtod_l+0x436>
 8004bdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bde:	2a00      	cmp	r2, #0
 8004be0:	eba9 0308 	sub.w	r3, r9, r8
 8004be4:	bfa8      	it	ge
 8004be6:	2300      	movge	r3, #0
 8004be8:	9312      	str	r3, [sp, #72]	@ 0x48
 8004bea:	2400      	movs	r4, #0
 8004bec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004bf0:	9316      	str	r3, [sp, #88]	@ 0x58
 8004bf2:	46a0      	mov	r8, r4
 8004bf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004bf6:	9805      	ldr	r0, [sp, #20]
 8004bf8:	6859      	ldr	r1, [r3, #4]
 8004bfa:	f001 f97f 	bl	8005efc <_Balloc>
 8004bfe:	4681      	mov	r9, r0
 8004c00:	2800      	cmp	r0, #0
 8004c02:	f43f aef4 	beq.w	80049ee <_strtod_l+0x43e>
 8004c06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c08:	691a      	ldr	r2, [r3, #16]
 8004c0a:	3202      	adds	r2, #2
 8004c0c:	f103 010c 	add.w	r1, r3, #12
 8004c10:	0092      	lsls	r2, r2, #2
 8004c12:	300c      	adds	r0, #12
 8004c14:	f000 fb8b 	bl	800532e <memcpy>
 8004c18:	ec4b ab10 	vmov	d0, sl, fp
 8004c1c:	9805      	ldr	r0, [sp, #20]
 8004c1e:	aa1c      	add	r2, sp, #112	@ 0x70
 8004c20:	a91b      	add	r1, sp, #108	@ 0x6c
 8004c22:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8004c26:	f001 fd4d 	bl	80066c4 <__d2b>
 8004c2a:	901a      	str	r0, [sp, #104]	@ 0x68
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	f43f aede 	beq.w	80049ee <_strtod_l+0x43e>
 8004c32:	9805      	ldr	r0, [sp, #20]
 8004c34:	2101      	movs	r1, #1
 8004c36:	f001 fa9f 	bl	8006178 <__i2b>
 8004c3a:	4680      	mov	r8, r0
 8004c3c:	b948      	cbnz	r0, 8004c52 <_strtod_l+0x6a2>
 8004c3e:	f04f 0800 	mov.w	r8, #0
 8004c42:	e6d4      	b.n	80049ee <_strtod_l+0x43e>
 8004c44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	ea03 0a0a 	and.w	sl, r3, sl
 8004c50:	e7b0      	b.n	8004bb4 <_strtod_l+0x604>
 8004c52:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8004c54:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8004c56:	2d00      	cmp	r5, #0
 8004c58:	bfab      	itete	ge
 8004c5a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8004c5c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8004c5e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8004c60:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8004c62:	bfac      	ite	ge
 8004c64:	18ef      	addge	r7, r5, r3
 8004c66:	1b5e      	sublt	r6, r3, r5
 8004c68:	9b08      	ldr	r3, [sp, #32]
 8004c6a:	1aed      	subs	r5, r5, r3
 8004c6c:	4415      	add	r5, r2
 8004c6e:	4b66      	ldr	r3, [pc, #408]	@ (8004e08 <_strtod_l+0x858>)
 8004c70:	3d01      	subs	r5, #1
 8004c72:	429d      	cmp	r5, r3
 8004c74:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8004c78:	da50      	bge.n	8004d1c <_strtod_l+0x76c>
 8004c7a:	1b5b      	subs	r3, r3, r5
 8004c7c:	2b1f      	cmp	r3, #31
 8004c7e:	eba2 0203 	sub.w	r2, r2, r3
 8004c82:	f04f 0101 	mov.w	r1, #1
 8004c86:	dc3d      	bgt.n	8004d04 <_strtod_l+0x754>
 8004c88:	fa01 f303 	lsl.w	r3, r1, r3
 8004c8c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004c8e:	2300      	movs	r3, #0
 8004c90:	9310      	str	r3, [sp, #64]	@ 0x40
 8004c92:	18bd      	adds	r5, r7, r2
 8004c94:	9b08      	ldr	r3, [sp, #32]
 8004c96:	42af      	cmp	r7, r5
 8004c98:	4416      	add	r6, r2
 8004c9a:	441e      	add	r6, r3
 8004c9c:	463b      	mov	r3, r7
 8004c9e:	bfa8      	it	ge
 8004ca0:	462b      	movge	r3, r5
 8004ca2:	42b3      	cmp	r3, r6
 8004ca4:	bfa8      	it	ge
 8004ca6:	4633      	movge	r3, r6
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	bfc2      	ittt	gt
 8004cac:	1aed      	subgt	r5, r5, r3
 8004cae:	1af6      	subgt	r6, r6, r3
 8004cb0:	1aff      	subgt	r7, r7, r3
 8004cb2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	dd16      	ble.n	8004ce6 <_strtod_l+0x736>
 8004cb8:	4641      	mov	r1, r8
 8004cba:	9805      	ldr	r0, [sp, #20]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	f001 fb1b 	bl	80062f8 <__pow5mult>
 8004cc2:	4680      	mov	r8, r0
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	d0ba      	beq.n	8004c3e <_strtod_l+0x68e>
 8004cc8:	4601      	mov	r1, r0
 8004cca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004ccc:	9805      	ldr	r0, [sp, #20]
 8004cce:	f001 fa69 	bl	80061a4 <__multiply>
 8004cd2:	900e      	str	r0, [sp, #56]	@ 0x38
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	f43f ae8a 	beq.w	80049ee <_strtod_l+0x43e>
 8004cda:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004cdc:	9805      	ldr	r0, [sp, #20]
 8004cde:	f001 f94d 	bl	8005f7c <_Bfree>
 8004ce2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ce4:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ce6:	2d00      	cmp	r5, #0
 8004ce8:	dc1d      	bgt.n	8004d26 <_strtod_l+0x776>
 8004cea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	dd23      	ble.n	8004d38 <_strtod_l+0x788>
 8004cf0:	4649      	mov	r1, r9
 8004cf2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8004cf4:	9805      	ldr	r0, [sp, #20]
 8004cf6:	f001 faff 	bl	80062f8 <__pow5mult>
 8004cfa:	4681      	mov	r9, r0
 8004cfc:	b9e0      	cbnz	r0, 8004d38 <_strtod_l+0x788>
 8004cfe:	f04f 0900 	mov.w	r9, #0
 8004d02:	e674      	b.n	80049ee <_strtod_l+0x43e>
 8004d04:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8004d08:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8004d0c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8004d10:	35e2      	adds	r5, #226	@ 0xe2
 8004d12:	fa01 f305 	lsl.w	r3, r1, r5
 8004d16:	9310      	str	r3, [sp, #64]	@ 0x40
 8004d18:	9113      	str	r1, [sp, #76]	@ 0x4c
 8004d1a:	e7ba      	b.n	8004c92 <_strtod_l+0x6e2>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	9310      	str	r3, [sp, #64]	@ 0x40
 8004d20:	2301      	movs	r3, #1
 8004d22:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004d24:	e7b5      	b.n	8004c92 <_strtod_l+0x6e2>
 8004d26:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004d28:	9805      	ldr	r0, [sp, #20]
 8004d2a:	462a      	mov	r2, r5
 8004d2c:	f001 fb3e 	bl	80063ac <__lshift>
 8004d30:	901a      	str	r0, [sp, #104]	@ 0x68
 8004d32:	2800      	cmp	r0, #0
 8004d34:	d1d9      	bne.n	8004cea <_strtod_l+0x73a>
 8004d36:	e65a      	b.n	80049ee <_strtod_l+0x43e>
 8004d38:	2e00      	cmp	r6, #0
 8004d3a:	dd07      	ble.n	8004d4c <_strtod_l+0x79c>
 8004d3c:	4649      	mov	r1, r9
 8004d3e:	9805      	ldr	r0, [sp, #20]
 8004d40:	4632      	mov	r2, r6
 8004d42:	f001 fb33 	bl	80063ac <__lshift>
 8004d46:	4681      	mov	r9, r0
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	d0d8      	beq.n	8004cfe <_strtod_l+0x74e>
 8004d4c:	2f00      	cmp	r7, #0
 8004d4e:	dd08      	ble.n	8004d62 <_strtod_l+0x7b2>
 8004d50:	4641      	mov	r1, r8
 8004d52:	9805      	ldr	r0, [sp, #20]
 8004d54:	463a      	mov	r2, r7
 8004d56:	f001 fb29 	bl	80063ac <__lshift>
 8004d5a:	4680      	mov	r8, r0
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	f43f ae46 	beq.w	80049ee <_strtod_l+0x43e>
 8004d62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004d64:	9805      	ldr	r0, [sp, #20]
 8004d66:	464a      	mov	r2, r9
 8004d68:	f001 fba8 	bl	80064bc <__mdiff>
 8004d6c:	4604      	mov	r4, r0
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	f43f ae3d 	beq.w	80049ee <_strtod_l+0x43e>
 8004d74:	68c3      	ldr	r3, [r0, #12]
 8004d76:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004d78:	2300      	movs	r3, #0
 8004d7a:	60c3      	str	r3, [r0, #12]
 8004d7c:	4641      	mov	r1, r8
 8004d7e:	f001 fb81 	bl	8006484 <__mcmp>
 8004d82:	2800      	cmp	r0, #0
 8004d84:	da46      	bge.n	8004e14 <_strtod_l+0x864>
 8004d86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d88:	ea53 030a 	orrs.w	r3, r3, sl
 8004d8c:	d16c      	bne.n	8004e68 <_strtod_l+0x8b8>
 8004d8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d168      	bne.n	8004e68 <_strtod_l+0x8b8>
 8004d96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004d9a:	0d1b      	lsrs	r3, r3, #20
 8004d9c:	051b      	lsls	r3, r3, #20
 8004d9e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8004da2:	d961      	bls.n	8004e68 <_strtod_l+0x8b8>
 8004da4:	6963      	ldr	r3, [r4, #20]
 8004da6:	b913      	cbnz	r3, 8004dae <_strtod_l+0x7fe>
 8004da8:	6923      	ldr	r3, [r4, #16]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	dd5c      	ble.n	8004e68 <_strtod_l+0x8b8>
 8004dae:	4621      	mov	r1, r4
 8004db0:	2201      	movs	r2, #1
 8004db2:	9805      	ldr	r0, [sp, #20]
 8004db4:	f001 fafa 	bl	80063ac <__lshift>
 8004db8:	4641      	mov	r1, r8
 8004dba:	4604      	mov	r4, r0
 8004dbc:	f001 fb62 	bl	8006484 <__mcmp>
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	dd51      	ble.n	8004e68 <_strtod_l+0x8b8>
 8004dc4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004dc8:	9a08      	ldr	r2, [sp, #32]
 8004dca:	0d1b      	lsrs	r3, r3, #20
 8004dcc:	051b      	lsls	r3, r3, #20
 8004dce:	2a00      	cmp	r2, #0
 8004dd0:	d06b      	beq.n	8004eaa <_strtod_l+0x8fa>
 8004dd2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8004dd6:	d868      	bhi.n	8004eaa <_strtod_l+0x8fa>
 8004dd8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8004ddc:	f67f ae9d 	bls.w	8004b1a <_strtod_l+0x56a>
 8004de0:	4b0a      	ldr	r3, [pc, #40]	@ (8004e0c <_strtod_l+0x85c>)
 8004de2:	4650      	mov	r0, sl
 8004de4:	4659      	mov	r1, fp
 8004de6:	2200      	movs	r2, #0
 8004de8:	f7fb fc36 	bl	8000658 <__aeabi_dmul>
 8004dec:	4b08      	ldr	r3, [pc, #32]	@ (8004e10 <_strtod_l+0x860>)
 8004dee:	400b      	ands	r3, r1
 8004df0:	4682      	mov	sl, r0
 8004df2:	468b      	mov	fp, r1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f47f ae05 	bne.w	8004a04 <_strtod_l+0x454>
 8004dfa:	9a05      	ldr	r2, [sp, #20]
 8004dfc:	2322      	movs	r3, #34	@ 0x22
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	e600      	b.n	8004a04 <_strtod_l+0x454>
 8004e02:	bf00      	nop
 8004e04:	08007970 	.word	0x08007970
 8004e08:	fffffc02 	.word	0xfffffc02
 8004e0c:	39500000 	.word	0x39500000
 8004e10:	7ff00000 	.word	0x7ff00000
 8004e14:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8004e18:	d165      	bne.n	8004ee6 <_strtod_l+0x936>
 8004e1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8004e1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004e20:	b35a      	cbz	r2, 8004e7a <_strtod_l+0x8ca>
 8004e22:	4a9f      	ldr	r2, [pc, #636]	@ (80050a0 <_strtod_l+0xaf0>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d12b      	bne.n	8004e80 <_strtod_l+0x8d0>
 8004e28:	9b08      	ldr	r3, [sp, #32]
 8004e2a:	4651      	mov	r1, sl
 8004e2c:	b303      	cbz	r3, 8004e70 <_strtod_l+0x8c0>
 8004e2e:	4b9d      	ldr	r3, [pc, #628]	@ (80050a4 <_strtod_l+0xaf4>)
 8004e30:	465a      	mov	r2, fp
 8004e32:	4013      	ands	r3, r2
 8004e34:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8004e38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e3c:	d81b      	bhi.n	8004e76 <_strtod_l+0x8c6>
 8004e3e:	0d1b      	lsrs	r3, r3, #20
 8004e40:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	4299      	cmp	r1, r3
 8004e4a:	d119      	bne.n	8004e80 <_strtod_l+0x8d0>
 8004e4c:	4b96      	ldr	r3, [pc, #600]	@ (80050a8 <_strtod_l+0xaf8>)
 8004e4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d102      	bne.n	8004e5a <_strtod_l+0x8aa>
 8004e54:	3101      	adds	r1, #1
 8004e56:	f43f adca 	beq.w	80049ee <_strtod_l+0x43e>
 8004e5a:	4b92      	ldr	r3, [pc, #584]	@ (80050a4 <_strtod_l+0xaf4>)
 8004e5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004e5e:	401a      	ands	r2, r3
 8004e60:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8004e64:	f04f 0a00 	mov.w	sl, #0
 8004e68:	9b08      	ldr	r3, [sp, #32]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1b8      	bne.n	8004de0 <_strtod_l+0x830>
 8004e6e:	e5c9      	b.n	8004a04 <_strtod_l+0x454>
 8004e70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004e74:	e7e8      	b.n	8004e48 <_strtod_l+0x898>
 8004e76:	4613      	mov	r3, r2
 8004e78:	e7e6      	b.n	8004e48 <_strtod_l+0x898>
 8004e7a:	ea53 030a 	orrs.w	r3, r3, sl
 8004e7e:	d0a1      	beq.n	8004dc4 <_strtod_l+0x814>
 8004e80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004e82:	b1db      	cbz	r3, 8004ebc <_strtod_l+0x90c>
 8004e84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004e86:	4213      	tst	r3, r2
 8004e88:	d0ee      	beq.n	8004e68 <_strtod_l+0x8b8>
 8004e8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e8c:	9a08      	ldr	r2, [sp, #32]
 8004e8e:	4650      	mov	r0, sl
 8004e90:	4659      	mov	r1, fp
 8004e92:	b1bb      	cbz	r3, 8004ec4 <_strtod_l+0x914>
 8004e94:	f7ff fb6c 	bl	8004570 <sulp>
 8004e98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e9c:	ec53 2b10 	vmov	r2, r3, d0
 8004ea0:	f7fb fa24 	bl	80002ec <__adddf3>
 8004ea4:	4682      	mov	sl, r0
 8004ea6:	468b      	mov	fp, r1
 8004ea8:	e7de      	b.n	8004e68 <_strtod_l+0x8b8>
 8004eaa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8004eae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004eb2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004eb6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8004eba:	e7d5      	b.n	8004e68 <_strtod_l+0x8b8>
 8004ebc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004ebe:	ea13 0f0a 	tst.w	r3, sl
 8004ec2:	e7e1      	b.n	8004e88 <_strtod_l+0x8d8>
 8004ec4:	f7ff fb54 	bl	8004570 <sulp>
 8004ec8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004ecc:	ec53 2b10 	vmov	r2, r3, d0
 8004ed0:	f7fb fa0a 	bl	80002e8 <__aeabi_dsub>
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	4682      	mov	sl, r0
 8004eda:	468b      	mov	fp, r1
 8004edc:	f7fb fe24 	bl	8000b28 <__aeabi_dcmpeq>
 8004ee0:	2800      	cmp	r0, #0
 8004ee2:	d0c1      	beq.n	8004e68 <_strtod_l+0x8b8>
 8004ee4:	e619      	b.n	8004b1a <_strtod_l+0x56a>
 8004ee6:	4641      	mov	r1, r8
 8004ee8:	4620      	mov	r0, r4
 8004eea:	f001 fc43 	bl	8006774 <__ratio>
 8004eee:	ec57 6b10 	vmov	r6, r7, d0
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004ef8:	4630      	mov	r0, r6
 8004efa:	4639      	mov	r1, r7
 8004efc:	f7fb fe28 	bl	8000b50 <__aeabi_dcmple>
 8004f00:	2800      	cmp	r0, #0
 8004f02:	d06f      	beq.n	8004fe4 <_strtod_l+0xa34>
 8004f04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d17a      	bne.n	8005000 <_strtod_l+0xa50>
 8004f0a:	f1ba 0f00 	cmp.w	sl, #0
 8004f0e:	d158      	bne.n	8004fc2 <_strtod_l+0xa12>
 8004f10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d15a      	bne.n	8004fd0 <_strtod_l+0xa20>
 8004f1a:	4b64      	ldr	r3, [pc, #400]	@ (80050ac <_strtod_l+0xafc>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	4630      	mov	r0, r6
 8004f20:	4639      	mov	r1, r7
 8004f22:	f7fb fe0b 	bl	8000b3c <__aeabi_dcmplt>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	d159      	bne.n	8004fde <_strtod_l+0xa2e>
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	4639      	mov	r1, r7
 8004f2e:	4b60      	ldr	r3, [pc, #384]	@ (80050b0 <_strtod_l+0xb00>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	f7fb fb91 	bl	8000658 <__aeabi_dmul>
 8004f36:	4606      	mov	r6, r0
 8004f38:	460f      	mov	r7, r1
 8004f3a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8004f3e:	9606      	str	r6, [sp, #24]
 8004f40:	9307      	str	r3, [sp, #28]
 8004f42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f46:	4d57      	ldr	r5, [pc, #348]	@ (80050a4 <_strtod_l+0xaf4>)
 8004f48:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8004f4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f4e:	401d      	ands	r5, r3
 8004f50:	4b58      	ldr	r3, [pc, #352]	@ (80050b4 <_strtod_l+0xb04>)
 8004f52:	429d      	cmp	r5, r3
 8004f54:	f040 80b2 	bne.w	80050bc <_strtod_l+0xb0c>
 8004f58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f5a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8004f5e:	ec4b ab10 	vmov	d0, sl, fp
 8004f62:	f001 fb3f 	bl	80065e4 <__ulp>
 8004f66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f6a:	ec51 0b10 	vmov	r0, r1, d0
 8004f6e:	f7fb fb73 	bl	8000658 <__aeabi_dmul>
 8004f72:	4652      	mov	r2, sl
 8004f74:	465b      	mov	r3, fp
 8004f76:	f7fb f9b9 	bl	80002ec <__adddf3>
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4949      	ldr	r1, [pc, #292]	@ (80050a4 <_strtod_l+0xaf4>)
 8004f7e:	4a4e      	ldr	r2, [pc, #312]	@ (80050b8 <_strtod_l+0xb08>)
 8004f80:	4019      	ands	r1, r3
 8004f82:	4291      	cmp	r1, r2
 8004f84:	4682      	mov	sl, r0
 8004f86:	d942      	bls.n	800500e <_strtod_l+0xa5e>
 8004f88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004f8a:	4b47      	ldr	r3, [pc, #284]	@ (80050a8 <_strtod_l+0xaf8>)
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d103      	bne.n	8004f98 <_strtod_l+0x9e8>
 8004f90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004f92:	3301      	adds	r3, #1
 8004f94:	f43f ad2b 	beq.w	80049ee <_strtod_l+0x43e>
 8004f98:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80050a8 <_strtod_l+0xaf8>
 8004f9c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8004fa0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004fa2:	9805      	ldr	r0, [sp, #20]
 8004fa4:	f000 ffea 	bl	8005f7c <_Bfree>
 8004fa8:	9805      	ldr	r0, [sp, #20]
 8004faa:	4649      	mov	r1, r9
 8004fac:	f000 ffe6 	bl	8005f7c <_Bfree>
 8004fb0:	9805      	ldr	r0, [sp, #20]
 8004fb2:	4641      	mov	r1, r8
 8004fb4:	f000 ffe2 	bl	8005f7c <_Bfree>
 8004fb8:	9805      	ldr	r0, [sp, #20]
 8004fba:	4621      	mov	r1, r4
 8004fbc:	f000 ffde 	bl	8005f7c <_Bfree>
 8004fc0:	e618      	b.n	8004bf4 <_strtod_l+0x644>
 8004fc2:	f1ba 0f01 	cmp.w	sl, #1
 8004fc6:	d103      	bne.n	8004fd0 <_strtod_l+0xa20>
 8004fc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f43f ada5 	beq.w	8004b1a <_strtod_l+0x56a>
 8004fd0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8005080 <_strtod_l+0xad0>
 8004fd4:	4f35      	ldr	r7, [pc, #212]	@ (80050ac <_strtod_l+0xafc>)
 8004fd6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004fda:	2600      	movs	r6, #0
 8004fdc:	e7b1      	b.n	8004f42 <_strtod_l+0x992>
 8004fde:	4f34      	ldr	r7, [pc, #208]	@ (80050b0 <_strtod_l+0xb00>)
 8004fe0:	2600      	movs	r6, #0
 8004fe2:	e7aa      	b.n	8004f3a <_strtod_l+0x98a>
 8004fe4:	4b32      	ldr	r3, [pc, #200]	@ (80050b0 <_strtod_l+0xb00>)
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	4639      	mov	r1, r7
 8004fea:	2200      	movs	r2, #0
 8004fec:	f7fb fb34 	bl	8000658 <__aeabi_dmul>
 8004ff0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004ff2:	4606      	mov	r6, r0
 8004ff4:	460f      	mov	r7, r1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d09f      	beq.n	8004f3a <_strtod_l+0x98a>
 8004ffa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004ffe:	e7a0      	b.n	8004f42 <_strtod_l+0x992>
 8005000:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8005088 <_strtod_l+0xad8>
 8005004:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005008:	ec57 6b17 	vmov	r6, r7, d7
 800500c:	e799      	b.n	8004f42 <_strtod_l+0x992>
 800500e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005012:	9b08      	ldr	r3, [sp, #32]
 8005014:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1c1      	bne.n	8004fa0 <_strtod_l+0x9f0>
 800501c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005020:	0d1b      	lsrs	r3, r3, #20
 8005022:	051b      	lsls	r3, r3, #20
 8005024:	429d      	cmp	r5, r3
 8005026:	d1bb      	bne.n	8004fa0 <_strtod_l+0x9f0>
 8005028:	4630      	mov	r0, r6
 800502a:	4639      	mov	r1, r7
 800502c:	f7fb fe0e 	bl	8000c4c <__aeabi_d2lz>
 8005030:	f7fb fae4 	bl	80005fc <__aeabi_l2d>
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	4630      	mov	r0, r6
 800503a:	4639      	mov	r1, r7
 800503c:	f7fb f954 	bl	80002e8 <__aeabi_dsub>
 8005040:	460b      	mov	r3, r1
 8005042:	4602      	mov	r2, r0
 8005044:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005048:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800504c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800504e:	ea46 060a 	orr.w	r6, r6, sl
 8005052:	431e      	orrs	r6, r3
 8005054:	d06f      	beq.n	8005136 <_strtod_l+0xb86>
 8005056:	a30e      	add	r3, pc, #56	@ (adr r3, 8005090 <_strtod_l+0xae0>)
 8005058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505c:	f7fb fd6e 	bl	8000b3c <__aeabi_dcmplt>
 8005060:	2800      	cmp	r0, #0
 8005062:	f47f accf 	bne.w	8004a04 <_strtod_l+0x454>
 8005066:	a30c      	add	r3, pc, #48	@ (adr r3, 8005098 <_strtod_l+0xae8>)
 8005068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005070:	f7fb fd82 	bl	8000b78 <__aeabi_dcmpgt>
 8005074:	2800      	cmp	r0, #0
 8005076:	d093      	beq.n	8004fa0 <_strtod_l+0x9f0>
 8005078:	e4c4      	b.n	8004a04 <_strtod_l+0x454>
 800507a:	bf00      	nop
 800507c:	f3af 8000 	nop.w
 8005080:	00000000 	.word	0x00000000
 8005084:	bff00000 	.word	0xbff00000
 8005088:	00000000 	.word	0x00000000
 800508c:	3ff00000 	.word	0x3ff00000
 8005090:	94a03595 	.word	0x94a03595
 8005094:	3fdfffff 	.word	0x3fdfffff
 8005098:	35afe535 	.word	0x35afe535
 800509c:	3fe00000 	.word	0x3fe00000
 80050a0:	000fffff 	.word	0x000fffff
 80050a4:	7ff00000 	.word	0x7ff00000
 80050a8:	7fefffff 	.word	0x7fefffff
 80050ac:	3ff00000 	.word	0x3ff00000
 80050b0:	3fe00000 	.word	0x3fe00000
 80050b4:	7fe00000 	.word	0x7fe00000
 80050b8:	7c9fffff 	.word	0x7c9fffff
 80050bc:	9b08      	ldr	r3, [sp, #32]
 80050be:	b323      	cbz	r3, 800510a <_strtod_l+0xb5a>
 80050c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80050c4:	d821      	bhi.n	800510a <_strtod_l+0xb5a>
 80050c6:	a328      	add	r3, pc, #160	@ (adr r3, 8005168 <_strtod_l+0xbb8>)
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	4630      	mov	r0, r6
 80050ce:	4639      	mov	r1, r7
 80050d0:	f7fb fd3e 	bl	8000b50 <__aeabi_dcmple>
 80050d4:	b1a0      	cbz	r0, 8005100 <_strtod_l+0xb50>
 80050d6:	4639      	mov	r1, r7
 80050d8:	4630      	mov	r0, r6
 80050da:	f7fb fd7f 	bl	8000bdc <__aeabi_d2uiz>
 80050de:	2801      	cmp	r0, #1
 80050e0:	bf38      	it	cc
 80050e2:	2001      	movcc	r0, #1
 80050e4:	f7fb fa3e 	bl	8000564 <__aeabi_ui2d>
 80050e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80050ea:	4606      	mov	r6, r0
 80050ec:	460f      	mov	r7, r1
 80050ee:	b9fb      	cbnz	r3, 8005130 <_strtod_l+0xb80>
 80050f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80050f4:	9014      	str	r0, [sp, #80]	@ 0x50
 80050f6:	9315      	str	r3, [sp, #84]	@ 0x54
 80050f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80050fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005100:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005102:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8005106:	1b5b      	subs	r3, r3, r5
 8005108:	9311      	str	r3, [sp, #68]	@ 0x44
 800510a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800510e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005112:	f001 fa67 	bl	80065e4 <__ulp>
 8005116:	4650      	mov	r0, sl
 8005118:	ec53 2b10 	vmov	r2, r3, d0
 800511c:	4659      	mov	r1, fp
 800511e:	f7fb fa9b 	bl	8000658 <__aeabi_dmul>
 8005122:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005126:	f7fb f8e1 	bl	80002ec <__adddf3>
 800512a:	4682      	mov	sl, r0
 800512c:	468b      	mov	fp, r1
 800512e:	e770      	b.n	8005012 <_strtod_l+0xa62>
 8005130:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005134:	e7e0      	b.n	80050f8 <_strtod_l+0xb48>
 8005136:	a30e      	add	r3, pc, #56	@ (adr r3, 8005170 <_strtod_l+0xbc0>)
 8005138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513c:	f7fb fcfe 	bl	8000b3c <__aeabi_dcmplt>
 8005140:	e798      	b.n	8005074 <_strtod_l+0xac4>
 8005142:	2300      	movs	r3, #0
 8005144:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005146:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005148:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	f7ff ba6d 	b.w	800462a <_strtod_l+0x7a>
 8005150:	2a65      	cmp	r2, #101	@ 0x65
 8005152:	f43f ab66 	beq.w	8004822 <_strtod_l+0x272>
 8005156:	2a45      	cmp	r2, #69	@ 0x45
 8005158:	f43f ab63 	beq.w	8004822 <_strtod_l+0x272>
 800515c:	2301      	movs	r3, #1
 800515e:	f7ff bb9e 	b.w	800489e <_strtod_l+0x2ee>
 8005162:	bf00      	nop
 8005164:	f3af 8000 	nop.w
 8005168:	ffc00000 	.word	0xffc00000
 800516c:	41dfffff 	.word	0x41dfffff
 8005170:	94a03595 	.word	0x94a03595
 8005174:	3fcfffff 	.word	0x3fcfffff

08005178 <strtod>:
 8005178:	460a      	mov	r2, r1
 800517a:	4601      	mov	r1, r0
 800517c:	4802      	ldr	r0, [pc, #8]	@ (8005188 <strtod+0x10>)
 800517e:	4b03      	ldr	r3, [pc, #12]	@ (800518c <strtod+0x14>)
 8005180:	6800      	ldr	r0, [r0, #0]
 8005182:	f7ff ba15 	b.w	80045b0 <_strtod_l>
 8005186:	bf00      	nop
 8005188:	20000194 	.word	0x20000194
 800518c:	20000028 	.word	0x20000028

08005190 <_fwalk_sglue>:
 8005190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005194:	4607      	mov	r7, r0
 8005196:	4688      	mov	r8, r1
 8005198:	4614      	mov	r4, r2
 800519a:	2600      	movs	r6, #0
 800519c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051a0:	f1b9 0901 	subs.w	r9, r9, #1
 80051a4:	d505      	bpl.n	80051b2 <_fwalk_sglue+0x22>
 80051a6:	6824      	ldr	r4, [r4, #0]
 80051a8:	2c00      	cmp	r4, #0
 80051aa:	d1f7      	bne.n	800519c <_fwalk_sglue+0xc>
 80051ac:	4630      	mov	r0, r6
 80051ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051b2:	89ab      	ldrh	r3, [r5, #12]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d907      	bls.n	80051c8 <_fwalk_sglue+0x38>
 80051b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051bc:	3301      	adds	r3, #1
 80051be:	d003      	beq.n	80051c8 <_fwalk_sglue+0x38>
 80051c0:	4629      	mov	r1, r5
 80051c2:	4638      	mov	r0, r7
 80051c4:	47c0      	blx	r8
 80051c6:	4306      	orrs	r6, r0
 80051c8:	3568      	adds	r5, #104	@ 0x68
 80051ca:	e7e9      	b.n	80051a0 <_fwalk_sglue+0x10>

080051cc <strncmp>:
 80051cc:	b510      	push	{r4, lr}
 80051ce:	b16a      	cbz	r2, 80051ec <strncmp+0x20>
 80051d0:	3901      	subs	r1, #1
 80051d2:	1884      	adds	r4, r0, r2
 80051d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80051dc:	429a      	cmp	r2, r3
 80051de:	d103      	bne.n	80051e8 <strncmp+0x1c>
 80051e0:	42a0      	cmp	r0, r4
 80051e2:	d001      	beq.n	80051e8 <strncmp+0x1c>
 80051e4:	2a00      	cmp	r2, #0
 80051e6:	d1f5      	bne.n	80051d4 <strncmp+0x8>
 80051e8:	1ad0      	subs	r0, r2, r3
 80051ea:	bd10      	pop	{r4, pc}
 80051ec:	4610      	mov	r0, r2
 80051ee:	e7fc      	b.n	80051ea <strncmp+0x1e>

080051f0 <strncpy>:
 80051f0:	b510      	push	{r4, lr}
 80051f2:	3901      	subs	r1, #1
 80051f4:	4603      	mov	r3, r0
 80051f6:	b132      	cbz	r2, 8005206 <strncpy+0x16>
 80051f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80051fc:	f803 4b01 	strb.w	r4, [r3], #1
 8005200:	3a01      	subs	r2, #1
 8005202:	2c00      	cmp	r4, #0
 8005204:	d1f7      	bne.n	80051f6 <strncpy+0x6>
 8005206:	441a      	add	r2, r3
 8005208:	2100      	movs	r1, #0
 800520a:	4293      	cmp	r3, r2
 800520c:	d100      	bne.n	8005210 <strncpy+0x20>
 800520e:	bd10      	pop	{r4, pc}
 8005210:	f803 1b01 	strb.w	r1, [r3], #1
 8005214:	e7f9      	b.n	800520a <strncpy+0x1a>

08005216 <memset>:
 8005216:	4402      	add	r2, r0
 8005218:	4603      	mov	r3, r0
 800521a:	4293      	cmp	r3, r2
 800521c:	d100      	bne.n	8005220 <memset+0xa>
 800521e:	4770      	bx	lr
 8005220:	f803 1b01 	strb.w	r1, [r3], #1
 8005224:	e7f9      	b.n	800521a <memset+0x4>
	...

08005228 <_close_r>:
 8005228:	b538      	push	{r3, r4, r5, lr}
 800522a:	4d06      	ldr	r5, [pc, #24]	@ (8005244 <_close_r+0x1c>)
 800522c:	2300      	movs	r3, #0
 800522e:	4604      	mov	r4, r0
 8005230:	4608      	mov	r0, r1
 8005232:	602b      	str	r3, [r5, #0]
 8005234:	f7fd fabf 	bl	80027b6 <_close>
 8005238:	1c43      	adds	r3, r0, #1
 800523a:	d102      	bne.n	8005242 <_close_r+0x1a>
 800523c:	682b      	ldr	r3, [r5, #0]
 800523e:	b103      	cbz	r3, 8005242 <_close_r+0x1a>
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	bd38      	pop	{r3, r4, r5, pc}
 8005244:	20005350 	.word	0x20005350

08005248 <_lseek_r>:
 8005248:	b538      	push	{r3, r4, r5, lr}
 800524a:	4d07      	ldr	r5, [pc, #28]	@ (8005268 <_lseek_r+0x20>)
 800524c:	4604      	mov	r4, r0
 800524e:	4608      	mov	r0, r1
 8005250:	4611      	mov	r1, r2
 8005252:	2200      	movs	r2, #0
 8005254:	602a      	str	r2, [r5, #0]
 8005256:	461a      	mov	r2, r3
 8005258:	f7fd fad4 	bl	8002804 <_lseek>
 800525c:	1c43      	adds	r3, r0, #1
 800525e:	d102      	bne.n	8005266 <_lseek_r+0x1e>
 8005260:	682b      	ldr	r3, [r5, #0]
 8005262:	b103      	cbz	r3, 8005266 <_lseek_r+0x1e>
 8005264:	6023      	str	r3, [r4, #0]
 8005266:	bd38      	pop	{r3, r4, r5, pc}
 8005268:	20005350 	.word	0x20005350

0800526c <_read_r>:
 800526c:	b538      	push	{r3, r4, r5, lr}
 800526e:	4d07      	ldr	r5, [pc, #28]	@ (800528c <_read_r+0x20>)
 8005270:	4604      	mov	r4, r0
 8005272:	4608      	mov	r0, r1
 8005274:	4611      	mov	r1, r2
 8005276:	2200      	movs	r2, #0
 8005278:	602a      	str	r2, [r5, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	f7fd fa62 	bl	8002744 <_read>
 8005280:	1c43      	adds	r3, r0, #1
 8005282:	d102      	bne.n	800528a <_read_r+0x1e>
 8005284:	682b      	ldr	r3, [r5, #0]
 8005286:	b103      	cbz	r3, 800528a <_read_r+0x1e>
 8005288:	6023      	str	r3, [r4, #0]
 800528a:	bd38      	pop	{r3, r4, r5, pc}
 800528c:	20005350 	.word	0x20005350

08005290 <_sbrk_r>:
 8005290:	b538      	push	{r3, r4, r5, lr}
 8005292:	4d06      	ldr	r5, [pc, #24]	@ (80052ac <_sbrk_r+0x1c>)
 8005294:	2300      	movs	r3, #0
 8005296:	4604      	mov	r4, r0
 8005298:	4608      	mov	r0, r1
 800529a:	602b      	str	r3, [r5, #0]
 800529c:	f7fd fac0 	bl	8002820 <_sbrk>
 80052a0:	1c43      	adds	r3, r0, #1
 80052a2:	d102      	bne.n	80052aa <_sbrk_r+0x1a>
 80052a4:	682b      	ldr	r3, [r5, #0]
 80052a6:	b103      	cbz	r3, 80052aa <_sbrk_r+0x1a>
 80052a8:	6023      	str	r3, [r4, #0]
 80052aa:	bd38      	pop	{r3, r4, r5, pc}
 80052ac:	20005350 	.word	0x20005350

080052b0 <_write_r>:
 80052b0:	b538      	push	{r3, r4, r5, lr}
 80052b2:	4d07      	ldr	r5, [pc, #28]	@ (80052d0 <_write_r+0x20>)
 80052b4:	4604      	mov	r4, r0
 80052b6:	4608      	mov	r0, r1
 80052b8:	4611      	mov	r1, r2
 80052ba:	2200      	movs	r2, #0
 80052bc:	602a      	str	r2, [r5, #0]
 80052be:	461a      	mov	r2, r3
 80052c0:	f7fd fa5d 	bl	800277e <_write>
 80052c4:	1c43      	adds	r3, r0, #1
 80052c6:	d102      	bne.n	80052ce <_write_r+0x1e>
 80052c8:	682b      	ldr	r3, [r5, #0]
 80052ca:	b103      	cbz	r3, 80052ce <_write_r+0x1e>
 80052cc:	6023      	str	r3, [r4, #0]
 80052ce:	bd38      	pop	{r3, r4, r5, pc}
 80052d0:	20005350 	.word	0x20005350

080052d4 <__errno>:
 80052d4:	4b01      	ldr	r3, [pc, #4]	@ (80052dc <__errno+0x8>)
 80052d6:	6818      	ldr	r0, [r3, #0]
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	20000194 	.word	0x20000194

080052e0 <__libc_init_array>:
 80052e0:	b570      	push	{r4, r5, r6, lr}
 80052e2:	4d0d      	ldr	r5, [pc, #52]	@ (8005318 <__libc_init_array+0x38>)
 80052e4:	4c0d      	ldr	r4, [pc, #52]	@ (800531c <__libc_init_array+0x3c>)
 80052e6:	1b64      	subs	r4, r4, r5
 80052e8:	10a4      	asrs	r4, r4, #2
 80052ea:	2600      	movs	r6, #0
 80052ec:	42a6      	cmp	r6, r4
 80052ee:	d109      	bne.n	8005304 <__libc_init_array+0x24>
 80052f0:	4d0b      	ldr	r5, [pc, #44]	@ (8005320 <__libc_init_array+0x40>)
 80052f2:	4c0c      	ldr	r4, [pc, #48]	@ (8005324 <__libc_init_array+0x44>)
 80052f4:	f001 fdb2 	bl	8006e5c <_init>
 80052f8:	1b64      	subs	r4, r4, r5
 80052fa:	10a4      	asrs	r4, r4, #2
 80052fc:	2600      	movs	r6, #0
 80052fe:	42a6      	cmp	r6, r4
 8005300:	d105      	bne.n	800530e <__libc_init_array+0x2e>
 8005302:	bd70      	pop	{r4, r5, r6, pc}
 8005304:	f855 3b04 	ldr.w	r3, [r5], #4
 8005308:	4798      	blx	r3
 800530a:	3601      	adds	r6, #1
 800530c:	e7ee      	b.n	80052ec <__libc_init_array+0xc>
 800530e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005312:	4798      	blx	r3
 8005314:	3601      	adds	r6, #1
 8005316:	e7f2      	b.n	80052fe <__libc_init_array+0x1e>
 8005318:	08007cf8 	.word	0x08007cf8
 800531c:	08007cf8 	.word	0x08007cf8
 8005320:	08007cf8 	.word	0x08007cf8
 8005324:	08007cfc 	.word	0x08007cfc

08005328 <__retarget_lock_init_recursive>:
 8005328:	4770      	bx	lr

0800532a <__retarget_lock_acquire_recursive>:
 800532a:	4770      	bx	lr

0800532c <__retarget_lock_release_recursive>:
 800532c:	4770      	bx	lr

0800532e <memcpy>:
 800532e:	440a      	add	r2, r1
 8005330:	4291      	cmp	r1, r2
 8005332:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005336:	d100      	bne.n	800533a <memcpy+0xc>
 8005338:	4770      	bx	lr
 800533a:	b510      	push	{r4, lr}
 800533c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005340:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005344:	4291      	cmp	r1, r2
 8005346:	d1f9      	bne.n	800533c <memcpy+0xe>
 8005348:	bd10      	pop	{r4, pc}
 800534a:	0000      	movs	r0, r0
 800534c:	0000      	movs	r0, r0
	...

08005350 <nan>:
 8005350:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005358 <nan+0x8>
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	00000000 	.word	0x00000000
 800535c:	7ff80000 	.word	0x7ff80000

08005360 <_free_r>:
 8005360:	b538      	push	{r3, r4, r5, lr}
 8005362:	4605      	mov	r5, r0
 8005364:	2900      	cmp	r1, #0
 8005366:	d041      	beq.n	80053ec <_free_r+0x8c>
 8005368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800536c:	1f0c      	subs	r4, r1, #4
 800536e:	2b00      	cmp	r3, #0
 8005370:	bfb8      	it	lt
 8005372:	18e4      	addlt	r4, r4, r3
 8005374:	f7fe ffd2 	bl	800431c <__malloc_lock>
 8005378:	4a1d      	ldr	r2, [pc, #116]	@ (80053f0 <_free_r+0x90>)
 800537a:	6813      	ldr	r3, [r2, #0]
 800537c:	b933      	cbnz	r3, 800538c <_free_r+0x2c>
 800537e:	6063      	str	r3, [r4, #4]
 8005380:	6014      	str	r4, [r2, #0]
 8005382:	4628      	mov	r0, r5
 8005384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005388:	f7fe bfce 	b.w	8004328 <__malloc_unlock>
 800538c:	42a3      	cmp	r3, r4
 800538e:	d908      	bls.n	80053a2 <_free_r+0x42>
 8005390:	6820      	ldr	r0, [r4, #0]
 8005392:	1821      	adds	r1, r4, r0
 8005394:	428b      	cmp	r3, r1
 8005396:	bf01      	itttt	eq
 8005398:	6819      	ldreq	r1, [r3, #0]
 800539a:	685b      	ldreq	r3, [r3, #4]
 800539c:	1809      	addeq	r1, r1, r0
 800539e:	6021      	streq	r1, [r4, #0]
 80053a0:	e7ed      	b.n	800537e <_free_r+0x1e>
 80053a2:	461a      	mov	r2, r3
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	b10b      	cbz	r3, 80053ac <_free_r+0x4c>
 80053a8:	42a3      	cmp	r3, r4
 80053aa:	d9fa      	bls.n	80053a2 <_free_r+0x42>
 80053ac:	6811      	ldr	r1, [r2, #0]
 80053ae:	1850      	adds	r0, r2, r1
 80053b0:	42a0      	cmp	r0, r4
 80053b2:	d10b      	bne.n	80053cc <_free_r+0x6c>
 80053b4:	6820      	ldr	r0, [r4, #0]
 80053b6:	4401      	add	r1, r0
 80053b8:	1850      	adds	r0, r2, r1
 80053ba:	4283      	cmp	r3, r0
 80053bc:	6011      	str	r1, [r2, #0]
 80053be:	d1e0      	bne.n	8005382 <_free_r+0x22>
 80053c0:	6818      	ldr	r0, [r3, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	6053      	str	r3, [r2, #4]
 80053c6:	4408      	add	r0, r1
 80053c8:	6010      	str	r0, [r2, #0]
 80053ca:	e7da      	b.n	8005382 <_free_r+0x22>
 80053cc:	d902      	bls.n	80053d4 <_free_r+0x74>
 80053ce:	230c      	movs	r3, #12
 80053d0:	602b      	str	r3, [r5, #0]
 80053d2:	e7d6      	b.n	8005382 <_free_r+0x22>
 80053d4:	6820      	ldr	r0, [r4, #0]
 80053d6:	1821      	adds	r1, r4, r0
 80053d8:	428b      	cmp	r3, r1
 80053da:	bf04      	itt	eq
 80053dc:	6819      	ldreq	r1, [r3, #0]
 80053de:	685b      	ldreq	r3, [r3, #4]
 80053e0:	6063      	str	r3, [r4, #4]
 80053e2:	bf04      	itt	eq
 80053e4:	1809      	addeq	r1, r1, r0
 80053e6:	6021      	streq	r1, [r4, #0]
 80053e8:	6054      	str	r4, [r2, #4]
 80053ea:	e7ca      	b.n	8005382 <_free_r+0x22>
 80053ec:	bd38      	pop	{r3, r4, r5, pc}
 80053ee:	bf00      	nop
 80053f0:	20005210 	.word	0x20005210

080053f4 <rshift>:
 80053f4:	6903      	ldr	r3, [r0, #16]
 80053f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80053fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005402:	f100 0414 	add.w	r4, r0, #20
 8005406:	dd45      	ble.n	8005494 <rshift+0xa0>
 8005408:	f011 011f 	ands.w	r1, r1, #31
 800540c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005410:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005414:	d10c      	bne.n	8005430 <rshift+0x3c>
 8005416:	f100 0710 	add.w	r7, r0, #16
 800541a:	4629      	mov	r1, r5
 800541c:	42b1      	cmp	r1, r6
 800541e:	d334      	bcc.n	800548a <rshift+0x96>
 8005420:	1a9b      	subs	r3, r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	1eea      	subs	r2, r5, #3
 8005426:	4296      	cmp	r6, r2
 8005428:	bf38      	it	cc
 800542a:	2300      	movcc	r3, #0
 800542c:	4423      	add	r3, r4
 800542e:	e015      	b.n	800545c <rshift+0x68>
 8005430:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005434:	f1c1 0820 	rsb	r8, r1, #32
 8005438:	40cf      	lsrs	r7, r1
 800543a:	f105 0e04 	add.w	lr, r5, #4
 800543e:	46a1      	mov	r9, r4
 8005440:	4576      	cmp	r6, lr
 8005442:	46f4      	mov	ip, lr
 8005444:	d815      	bhi.n	8005472 <rshift+0x7e>
 8005446:	1a9a      	subs	r2, r3, r2
 8005448:	0092      	lsls	r2, r2, #2
 800544a:	3a04      	subs	r2, #4
 800544c:	3501      	adds	r5, #1
 800544e:	42ae      	cmp	r6, r5
 8005450:	bf38      	it	cc
 8005452:	2200      	movcc	r2, #0
 8005454:	18a3      	adds	r3, r4, r2
 8005456:	50a7      	str	r7, [r4, r2]
 8005458:	b107      	cbz	r7, 800545c <rshift+0x68>
 800545a:	3304      	adds	r3, #4
 800545c:	1b1a      	subs	r2, r3, r4
 800545e:	42a3      	cmp	r3, r4
 8005460:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005464:	bf08      	it	eq
 8005466:	2300      	moveq	r3, #0
 8005468:	6102      	str	r2, [r0, #16]
 800546a:	bf08      	it	eq
 800546c:	6143      	streq	r3, [r0, #20]
 800546e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005472:	f8dc c000 	ldr.w	ip, [ip]
 8005476:	fa0c fc08 	lsl.w	ip, ip, r8
 800547a:	ea4c 0707 	orr.w	r7, ip, r7
 800547e:	f849 7b04 	str.w	r7, [r9], #4
 8005482:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005486:	40cf      	lsrs	r7, r1
 8005488:	e7da      	b.n	8005440 <rshift+0x4c>
 800548a:	f851 cb04 	ldr.w	ip, [r1], #4
 800548e:	f847 cf04 	str.w	ip, [r7, #4]!
 8005492:	e7c3      	b.n	800541c <rshift+0x28>
 8005494:	4623      	mov	r3, r4
 8005496:	e7e1      	b.n	800545c <rshift+0x68>

08005498 <__hexdig_fun>:
 8005498:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800549c:	2b09      	cmp	r3, #9
 800549e:	d802      	bhi.n	80054a6 <__hexdig_fun+0xe>
 80054a0:	3820      	subs	r0, #32
 80054a2:	b2c0      	uxtb	r0, r0
 80054a4:	4770      	bx	lr
 80054a6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80054aa:	2b05      	cmp	r3, #5
 80054ac:	d801      	bhi.n	80054b2 <__hexdig_fun+0x1a>
 80054ae:	3847      	subs	r0, #71	@ 0x47
 80054b0:	e7f7      	b.n	80054a2 <__hexdig_fun+0xa>
 80054b2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80054b6:	2b05      	cmp	r3, #5
 80054b8:	d801      	bhi.n	80054be <__hexdig_fun+0x26>
 80054ba:	3827      	subs	r0, #39	@ 0x27
 80054bc:	e7f1      	b.n	80054a2 <__hexdig_fun+0xa>
 80054be:	2000      	movs	r0, #0
 80054c0:	4770      	bx	lr
	...

080054c4 <__gethex>:
 80054c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c8:	b085      	sub	sp, #20
 80054ca:	468a      	mov	sl, r1
 80054cc:	9302      	str	r3, [sp, #8]
 80054ce:	680b      	ldr	r3, [r1, #0]
 80054d0:	9001      	str	r0, [sp, #4]
 80054d2:	4690      	mov	r8, r2
 80054d4:	1c9c      	adds	r4, r3, #2
 80054d6:	46a1      	mov	r9, r4
 80054d8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80054dc:	2830      	cmp	r0, #48	@ 0x30
 80054de:	d0fa      	beq.n	80054d6 <__gethex+0x12>
 80054e0:	eba9 0303 	sub.w	r3, r9, r3
 80054e4:	f1a3 0b02 	sub.w	fp, r3, #2
 80054e8:	f7ff ffd6 	bl	8005498 <__hexdig_fun>
 80054ec:	4605      	mov	r5, r0
 80054ee:	2800      	cmp	r0, #0
 80054f0:	d168      	bne.n	80055c4 <__gethex+0x100>
 80054f2:	49a0      	ldr	r1, [pc, #640]	@ (8005774 <__gethex+0x2b0>)
 80054f4:	2201      	movs	r2, #1
 80054f6:	4648      	mov	r0, r9
 80054f8:	f7ff fe68 	bl	80051cc <strncmp>
 80054fc:	4607      	mov	r7, r0
 80054fe:	2800      	cmp	r0, #0
 8005500:	d167      	bne.n	80055d2 <__gethex+0x10e>
 8005502:	f899 0001 	ldrb.w	r0, [r9, #1]
 8005506:	4626      	mov	r6, r4
 8005508:	f7ff ffc6 	bl	8005498 <__hexdig_fun>
 800550c:	2800      	cmp	r0, #0
 800550e:	d062      	beq.n	80055d6 <__gethex+0x112>
 8005510:	4623      	mov	r3, r4
 8005512:	7818      	ldrb	r0, [r3, #0]
 8005514:	2830      	cmp	r0, #48	@ 0x30
 8005516:	4699      	mov	r9, r3
 8005518:	f103 0301 	add.w	r3, r3, #1
 800551c:	d0f9      	beq.n	8005512 <__gethex+0x4e>
 800551e:	f7ff ffbb 	bl	8005498 <__hexdig_fun>
 8005522:	fab0 f580 	clz	r5, r0
 8005526:	096d      	lsrs	r5, r5, #5
 8005528:	f04f 0b01 	mov.w	fp, #1
 800552c:	464a      	mov	r2, r9
 800552e:	4616      	mov	r6, r2
 8005530:	3201      	adds	r2, #1
 8005532:	7830      	ldrb	r0, [r6, #0]
 8005534:	f7ff ffb0 	bl	8005498 <__hexdig_fun>
 8005538:	2800      	cmp	r0, #0
 800553a:	d1f8      	bne.n	800552e <__gethex+0x6a>
 800553c:	498d      	ldr	r1, [pc, #564]	@ (8005774 <__gethex+0x2b0>)
 800553e:	2201      	movs	r2, #1
 8005540:	4630      	mov	r0, r6
 8005542:	f7ff fe43 	bl	80051cc <strncmp>
 8005546:	2800      	cmp	r0, #0
 8005548:	d13f      	bne.n	80055ca <__gethex+0x106>
 800554a:	b944      	cbnz	r4, 800555e <__gethex+0x9a>
 800554c:	1c74      	adds	r4, r6, #1
 800554e:	4622      	mov	r2, r4
 8005550:	4616      	mov	r6, r2
 8005552:	3201      	adds	r2, #1
 8005554:	7830      	ldrb	r0, [r6, #0]
 8005556:	f7ff ff9f 	bl	8005498 <__hexdig_fun>
 800555a:	2800      	cmp	r0, #0
 800555c:	d1f8      	bne.n	8005550 <__gethex+0x8c>
 800555e:	1ba4      	subs	r4, r4, r6
 8005560:	00a7      	lsls	r7, r4, #2
 8005562:	7833      	ldrb	r3, [r6, #0]
 8005564:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8005568:	2b50      	cmp	r3, #80	@ 0x50
 800556a:	d13e      	bne.n	80055ea <__gethex+0x126>
 800556c:	7873      	ldrb	r3, [r6, #1]
 800556e:	2b2b      	cmp	r3, #43	@ 0x2b
 8005570:	d033      	beq.n	80055da <__gethex+0x116>
 8005572:	2b2d      	cmp	r3, #45	@ 0x2d
 8005574:	d034      	beq.n	80055e0 <__gethex+0x11c>
 8005576:	1c71      	adds	r1, r6, #1
 8005578:	2400      	movs	r4, #0
 800557a:	7808      	ldrb	r0, [r1, #0]
 800557c:	f7ff ff8c 	bl	8005498 <__hexdig_fun>
 8005580:	1e43      	subs	r3, r0, #1
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b18      	cmp	r3, #24
 8005586:	d830      	bhi.n	80055ea <__gethex+0x126>
 8005588:	f1a0 0210 	sub.w	r2, r0, #16
 800558c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005590:	f7ff ff82 	bl	8005498 <__hexdig_fun>
 8005594:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8005598:	fa5f fc8c 	uxtb.w	ip, ip
 800559c:	f1bc 0f18 	cmp.w	ip, #24
 80055a0:	f04f 030a 	mov.w	r3, #10
 80055a4:	d91e      	bls.n	80055e4 <__gethex+0x120>
 80055a6:	b104      	cbz	r4, 80055aa <__gethex+0xe6>
 80055a8:	4252      	negs	r2, r2
 80055aa:	4417      	add	r7, r2
 80055ac:	f8ca 1000 	str.w	r1, [sl]
 80055b0:	b1ed      	cbz	r5, 80055ee <__gethex+0x12a>
 80055b2:	f1bb 0f00 	cmp.w	fp, #0
 80055b6:	bf0c      	ite	eq
 80055b8:	2506      	moveq	r5, #6
 80055ba:	2500      	movne	r5, #0
 80055bc:	4628      	mov	r0, r5
 80055be:	b005      	add	sp, #20
 80055c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055c4:	2500      	movs	r5, #0
 80055c6:	462c      	mov	r4, r5
 80055c8:	e7b0      	b.n	800552c <__gethex+0x68>
 80055ca:	2c00      	cmp	r4, #0
 80055cc:	d1c7      	bne.n	800555e <__gethex+0x9a>
 80055ce:	4627      	mov	r7, r4
 80055d0:	e7c7      	b.n	8005562 <__gethex+0x9e>
 80055d2:	464e      	mov	r6, r9
 80055d4:	462f      	mov	r7, r5
 80055d6:	2501      	movs	r5, #1
 80055d8:	e7c3      	b.n	8005562 <__gethex+0x9e>
 80055da:	2400      	movs	r4, #0
 80055dc:	1cb1      	adds	r1, r6, #2
 80055de:	e7cc      	b.n	800557a <__gethex+0xb6>
 80055e0:	2401      	movs	r4, #1
 80055e2:	e7fb      	b.n	80055dc <__gethex+0x118>
 80055e4:	fb03 0002 	mla	r0, r3, r2, r0
 80055e8:	e7ce      	b.n	8005588 <__gethex+0xc4>
 80055ea:	4631      	mov	r1, r6
 80055ec:	e7de      	b.n	80055ac <__gethex+0xe8>
 80055ee:	eba6 0309 	sub.w	r3, r6, r9
 80055f2:	3b01      	subs	r3, #1
 80055f4:	4629      	mov	r1, r5
 80055f6:	2b07      	cmp	r3, #7
 80055f8:	dc0a      	bgt.n	8005610 <__gethex+0x14c>
 80055fa:	9801      	ldr	r0, [sp, #4]
 80055fc:	f000 fc7e 	bl	8005efc <_Balloc>
 8005600:	4604      	mov	r4, r0
 8005602:	b940      	cbnz	r0, 8005616 <__gethex+0x152>
 8005604:	4b5c      	ldr	r3, [pc, #368]	@ (8005778 <__gethex+0x2b4>)
 8005606:	4602      	mov	r2, r0
 8005608:	21e4      	movs	r1, #228	@ 0xe4
 800560a:	485c      	ldr	r0, [pc, #368]	@ (800577c <__gethex+0x2b8>)
 800560c:	f001 f93e 	bl	800688c <__assert_func>
 8005610:	3101      	adds	r1, #1
 8005612:	105b      	asrs	r3, r3, #1
 8005614:	e7ef      	b.n	80055f6 <__gethex+0x132>
 8005616:	f100 0a14 	add.w	sl, r0, #20
 800561a:	2300      	movs	r3, #0
 800561c:	4655      	mov	r5, sl
 800561e:	469b      	mov	fp, r3
 8005620:	45b1      	cmp	r9, r6
 8005622:	d337      	bcc.n	8005694 <__gethex+0x1d0>
 8005624:	f845 bb04 	str.w	fp, [r5], #4
 8005628:	eba5 050a 	sub.w	r5, r5, sl
 800562c:	10ad      	asrs	r5, r5, #2
 800562e:	6125      	str	r5, [r4, #16]
 8005630:	4658      	mov	r0, fp
 8005632:	f000 fd55 	bl	80060e0 <__hi0bits>
 8005636:	016d      	lsls	r5, r5, #5
 8005638:	f8d8 6000 	ldr.w	r6, [r8]
 800563c:	1a2d      	subs	r5, r5, r0
 800563e:	42b5      	cmp	r5, r6
 8005640:	dd54      	ble.n	80056ec <__gethex+0x228>
 8005642:	1bad      	subs	r5, r5, r6
 8005644:	4629      	mov	r1, r5
 8005646:	4620      	mov	r0, r4
 8005648:	f001 f8e9 	bl	800681e <__any_on>
 800564c:	4681      	mov	r9, r0
 800564e:	b178      	cbz	r0, 8005670 <__gethex+0x1ac>
 8005650:	1e6b      	subs	r3, r5, #1
 8005652:	1159      	asrs	r1, r3, #5
 8005654:	f003 021f 	and.w	r2, r3, #31
 8005658:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800565c:	f04f 0901 	mov.w	r9, #1
 8005660:	fa09 f202 	lsl.w	r2, r9, r2
 8005664:	420a      	tst	r2, r1
 8005666:	d003      	beq.n	8005670 <__gethex+0x1ac>
 8005668:	454b      	cmp	r3, r9
 800566a:	dc36      	bgt.n	80056da <__gethex+0x216>
 800566c:	f04f 0902 	mov.w	r9, #2
 8005670:	4629      	mov	r1, r5
 8005672:	4620      	mov	r0, r4
 8005674:	f7ff febe 	bl	80053f4 <rshift>
 8005678:	442f      	add	r7, r5
 800567a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800567e:	42bb      	cmp	r3, r7
 8005680:	da42      	bge.n	8005708 <__gethex+0x244>
 8005682:	9801      	ldr	r0, [sp, #4]
 8005684:	4621      	mov	r1, r4
 8005686:	f000 fc79 	bl	8005f7c <_Bfree>
 800568a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800568c:	2300      	movs	r3, #0
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	25a3      	movs	r5, #163	@ 0xa3
 8005692:	e793      	b.n	80055bc <__gethex+0xf8>
 8005694:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8005698:	2a2e      	cmp	r2, #46	@ 0x2e
 800569a:	d012      	beq.n	80056c2 <__gethex+0x1fe>
 800569c:	2b20      	cmp	r3, #32
 800569e:	d104      	bne.n	80056aa <__gethex+0x1e6>
 80056a0:	f845 bb04 	str.w	fp, [r5], #4
 80056a4:	f04f 0b00 	mov.w	fp, #0
 80056a8:	465b      	mov	r3, fp
 80056aa:	7830      	ldrb	r0, [r6, #0]
 80056ac:	9303      	str	r3, [sp, #12]
 80056ae:	f7ff fef3 	bl	8005498 <__hexdig_fun>
 80056b2:	9b03      	ldr	r3, [sp, #12]
 80056b4:	f000 000f 	and.w	r0, r0, #15
 80056b8:	4098      	lsls	r0, r3
 80056ba:	ea4b 0b00 	orr.w	fp, fp, r0
 80056be:	3304      	adds	r3, #4
 80056c0:	e7ae      	b.n	8005620 <__gethex+0x15c>
 80056c2:	45b1      	cmp	r9, r6
 80056c4:	d8ea      	bhi.n	800569c <__gethex+0x1d8>
 80056c6:	492b      	ldr	r1, [pc, #172]	@ (8005774 <__gethex+0x2b0>)
 80056c8:	9303      	str	r3, [sp, #12]
 80056ca:	2201      	movs	r2, #1
 80056cc:	4630      	mov	r0, r6
 80056ce:	f7ff fd7d 	bl	80051cc <strncmp>
 80056d2:	9b03      	ldr	r3, [sp, #12]
 80056d4:	2800      	cmp	r0, #0
 80056d6:	d1e1      	bne.n	800569c <__gethex+0x1d8>
 80056d8:	e7a2      	b.n	8005620 <__gethex+0x15c>
 80056da:	1ea9      	subs	r1, r5, #2
 80056dc:	4620      	mov	r0, r4
 80056de:	f001 f89e 	bl	800681e <__any_on>
 80056e2:	2800      	cmp	r0, #0
 80056e4:	d0c2      	beq.n	800566c <__gethex+0x1a8>
 80056e6:	f04f 0903 	mov.w	r9, #3
 80056ea:	e7c1      	b.n	8005670 <__gethex+0x1ac>
 80056ec:	da09      	bge.n	8005702 <__gethex+0x23e>
 80056ee:	1b75      	subs	r5, r6, r5
 80056f0:	4621      	mov	r1, r4
 80056f2:	9801      	ldr	r0, [sp, #4]
 80056f4:	462a      	mov	r2, r5
 80056f6:	f000 fe59 	bl	80063ac <__lshift>
 80056fa:	1b7f      	subs	r7, r7, r5
 80056fc:	4604      	mov	r4, r0
 80056fe:	f100 0a14 	add.w	sl, r0, #20
 8005702:	f04f 0900 	mov.w	r9, #0
 8005706:	e7b8      	b.n	800567a <__gethex+0x1b6>
 8005708:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800570c:	42bd      	cmp	r5, r7
 800570e:	dd6f      	ble.n	80057f0 <__gethex+0x32c>
 8005710:	1bed      	subs	r5, r5, r7
 8005712:	42ae      	cmp	r6, r5
 8005714:	dc34      	bgt.n	8005780 <__gethex+0x2bc>
 8005716:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800571a:	2b02      	cmp	r3, #2
 800571c:	d022      	beq.n	8005764 <__gethex+0x2a0>
 800571e:	2b03      	cmp	r3, #3
 8005720:	d024      	beq.n	800576c <__gethex+0x2a8>
 8005722:	2b01      	cmp	r3, #1
 8005724:	d115      	bne.n	8005752 <__gethex+0x28e>
 8005726:	42ae      	cmp	r6, r5
 8005728:	d113      	bne.n	8005752 <__gethex+0x28e>
 800572a:	2e01      	cmp	r6, #1
 800572c:	d10b      	bne.n	8005746 <__gethex+0x282>
 800572e:	9a02      	ldr	r2, [sp, #8]
 8005730:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	2301      	movs	r3, #1
 8005738:	6123      	str	r3, [r4, #16]
 800573a:	f8ca 3000 	str.w	r3, [sl]
 800573e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005740:	2562      	movs	r5, #98	@ 0x62
 8005742:	601c      	str	r4, [r3, #0]
 8005744:	e73a      	b.n	80055bc <__gethex+0xf8>
 8005746:	1e71      	subs	r1, r6, #1
 8005748:	4620      	mov	r0, r4
 800574a:	f001 f868 	bl	800681e <__any_on>
 800574e:	2800      	cmp	r0, #0
 8005750:	d1ed      	bne.n	800572e <__gethex+0x26a>
 8005752:	9801      	ldr	r0, [sp, #4]
 8005754:	4621      	mov	r1, r4
 8005756:	f000 fc11 	bl	8005f7c <_Bfree>
 800575a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800575c:	2300      	movs	r3, #0
 800575e:	6013      	str	r3, [r2, #0]
 8005760:	2550      	movs	r5, #80	@ 0x50
 8005762:	e72b      	b.n	80055bc <__gethex+0xf8>
 8005764:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1f3      	bne.n	8005752 <__gethex+0x28e>
 800576a:	e7e0      	b.n	800572e <__gethex+0x26a>
 800576c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1dd      	bne.n	800572e <__gethex+0x26a>
 8005772:	e7ee      	b.n	8005752 <__gethex+0x28e>
 8005774:	08007934 	.word	0x08007934
 8005778:	08007aa1 	.word	0x08007aa1
 800577c:	08007ab2 	.word	0x08007ab2
 8005780:	1e6f      	subs	r7, r5, #1
 8005782:	f1b9 0f00 	cmp.w	r9, #0
 8005786:	d130      	bne.n	80057ea <__gethex+0x326>
 8005788:	b127      	cbz	r7, 8005794 <__gethex+0x2d0>
 800578a:	4639      	mov	r1, r7
 800578c:	4620      	mov	r0, r4
 800578e:	f001 f846 	bl	800681e <__any_on>
 8005792:	4681      	mov	r9, r0
 8005794:	117a      	asrs	r2, r7, #5
 8005796:	2301      	movs	r3, #1
 8005798:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800579c:	f007 071f 	and.w	r7, r7, #31
 80057a0:	40bb      	lsls	r3, r7
 80057a2:	4213      	tst	r3, r2
 80057a4:	4629      	mov	r1, r5
 80057a6:	4620      	mov	r0, r4
 80057a8:	bf18      	it	ne
 80057aa:	f049 0902 	orrne.w	r9, r9, #2
 80057ae:	f7ff fe21 	bl	80053f4 <rshift>
 80057b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80057b6:	1b76      	subs	r6, r6, r5
 80057b8:	2502      	movs	r5, #2
 80057ba:	f1b9 0f00 	cmp.w	r9, #0
 80057be:	d047      	beq.n	8005850 <__gethex+0x38c>
 80057c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d015      	beq.n	80057f4 <__gethex+0x330>
 80057c8:	2b03      	cmp	r3, #3
 80057ca:	d017      	beq.n	80057fc <__gethex+0x338>
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d109      	bne.n	80057e4 <__gethex+0x320>
 80057d0:	f019 0f02 	tst.w	r9, #2
 80057d4:	d006      	beq.n	80057e4 <__gethex+0x320>
 80057d6:	f8da 3000 	ldr.w	r3, [sl]
 80057da:	ea49 0903 	orr.w	r9, r9, r3
 80057de:	f019 0f01 	tst.w	r9, #1
 80057e2:	d10e      	bne.n	8005802 <__gethex+0x33e>
 80057e4:	f045 0510 	orr.w	r5, r5, #16
 80057e8:	e032      	b.n	8005850 <__gethex+0x38c>
 80057ea:	f04f 0901 	mov.w	r9, #1
 80057ee:	e7d1      	b.n	8005794 <__gethex+0x2d0>
 80057f0:	2501      	movs	r5, #1
 80057f2:	e7e2      	b.n	80057ba <__gethex+0x2f6>
 80057f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80057f6:	f1c3 0301 	rsb	r3, r3, #1
 80057fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80057fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d0f0      	beq.n	80057e4 <__gethex+0x320>
 8005802:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005806:	f104 0314 	add.w	r3, r4, #20
 800580a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800580e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005812:	f04f 0c00 	mov.w	ip, #0
 8005816:	4618      	mov	r0, r3
 8005818:	f853 2b04 	ldr.w	r2, [r3], #4
 800581c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8005820:	d01b      	beq.n	800585a <__gethex+0x396>
 8005822:	3201      	adds	r2, #1
 8005824:	6002      	str	r2, [r0, #0]
 8005826:	2d02      	cmp	r5, #2
 8005828:	f104 0314 	add.w	r3, r4, #20
 800582c:	d13c      	bne.n	80058a8 <__gethex+0x3e4>
 800582e:	f8d8 2000 	ldr.w	r2, [r8]
 8005832:	3a01      	subs	r2, #1
 8005834:	42b2      	cmp	r2, r6
 8005836:	d109      	bne.n	800584c <__gethex+0x388>
 8005838:	1171      	asrs	r1, r6, #5
 800583a:	2201      	movs	r2, #1
 800583c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005840:	f006 061f 	and.w	r6, r6, #31
 8005844:	fa02 f606 	lsl.w	r6, r2, r6
 8005848:	421e      	tst	r6, r3
 800584a:	d13a      	bne.n	80058c2 <__gethex+0x3fe>
 800584c:	f045 0520 	orr.w	r5, r5, #32
 8005850:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005852:	601c      	str	r4, [r3, #0]
 8005854:	9b02      	ldr	r3, [sp, #8]
 8005856:	601f      	str	r7, [r3, #0]
 8005858:	e6b0      	b.n	80055bc <__gethex+0xf8>
 800585a:	4299      	cmp	r1, r3
 800585c:	f843 cc04 	str.w	ip, [r3, #-4]
 8005860:	d8d9      	bhi.n	8005816 <__gethex+0x352>
 8005862:	68a3      	ldr	r3, [r4, #8]
 8005864:	459b      	cmp	fp, r3
 8005866:	db17      	blt.n	8005898 <__gethex+0x3d4>
 8005868:	6861      	ldr	r1, [r4, #4]
 800586a:	9801      	ldr	r0, [sp, #4]
 800586c:	3101      	adds	r1, #1
 800586e:	f000 fb45 	bl	8005efc <_Balloc>
 8005872:	4681      	mov	r9, r0
 8005874:	b918      	cbnz	r0, 800587e <__gethex+0x3ba>
 8005876:	4b1a      	ldr	r3, [pc, #104]	@ (80058e0 <__gethex+0x41c>)
 8005878:	4602      	mov	r2, r0
 800587a:	2184      	movs	r1, #132	@ 0x84
 800587c:	e6c5      	b.n	800560a <__gethex+0x146>
 800587e:	6922      	ldr	r2, [r4, #16]
 8005880:	3202      	adds	r2, #2
 8005882:	f104 010c 	add.w	r1, r4, #12
 8005886:	0092      	lsls	r2, r2, #2
 8005888:	300c      	adds	r0, #12
 800588a:	f7ff fd50 	bl	800532e <memcpy>
 800588e:	4621      	mov	r1, r4
 8005890:	9801      	ldr	r0, [sp, #4]
 8005892:	f000 fb73 	bl	8005f7c <_Bfree>
 8005896:	464c      	mov	r4, r9
 8005898:	6923      	ldr	r3, [r4, #16]
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80058a0:	6122      	str	r2, [r4, #16]
 80058a2:	2201      	movs	r2, #1
 80058a4:	615a      	str	r2, [r3, #20]
 80058a6:	e7be      	b.n	8005826 <__gethex+0x362>
 80058a8:	6922      	ldr	r2, [r4, #16]
 80058aa:	455a      	cmp	r2, fp
 80058ac:	dd0b      	ble.n	80058c6 <__gethex+0x402>
 80058ae:	2101      	movs	r1, #1
 80058b0:	4620      	mov	r0, r4
 80058b2:	f7ff fd9f 	bl	80053f4 <rshift>
 80058b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80058ba:	3701      	adds	r7, #1
 80058bc:	42bb      	cmp	r3, r7
 80058be:	f6ff aee0 	blt.w	8005682 <__gethex+0x1be>
 80058c2:	2501      	movs	r5, #1
 80058c4:	e7c2      	b.n	800584c <__gethex+0x388>
 80058c6:	f016 061f 	ands.w	r6, r6, #31
 80058ca:	d0fa      	beq.n	80058c2 <__gethex+0x3fe>
 80058cc:	4453      	add	r3, sl
 80058ce:	f1c6 0620 	rsb	r6, r6, #32
 80058d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80058d6:	f000 fc03 	bl	80060e0 <__hi0bits>
 80058da:	42b0      	cmp	r0, r6
 80058dc:	dbe7      	blt.n	80058ae <__gethex+0x3ea>
 80058de:	e7f0      	b.n	80058c2 <__gethex+0x3fe>
 80058e0:	08007aa1 	.word	0x08007aa1

080058e4 <L_shift>:
 80058e4:	f1c2 0208 	rsb	r2, r2, #8
 80058e8:	0092      	lsls	r2, r2, #2
 80058ea:	b570      	push	{r4, r5, r6, lr}
 80058ec:	f1c2 0620 	rsb	r6, r2, #32
 80058f0:	6843      	ldr	r3, [r0, #4]
 80058f2:	6804      	ldr	r4, [r0, #0]
 80058f4:	fa03 f506 	lsl.w	r5, r3, r6
 80058f8:	432c      	orrs	r4, r5
 80058fa:	40d3      	lsrs	r3, r2
 80058fc:	6004      	str	r4, [r0, #0]
 80058fe:	f840 3f04 	str.w	r3, [r0, #4]!
 8005902:	4288      	cmp	r0, r1
 8005904:	d3f4      	bcc.n	80058f0 <L_shift+0xc>
 8005906:	bd70      	pop	{r4, r5, r6, pc}

08005908 <__match>:
 8005908:	b530      	push	{r4, r5, lr}
 800590a:	6803      	ldr	r3, [r0, #0]
 800590c:	3301      	adds	r3, #1
 800590e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005912:	b914      	cbnz	r4, 800591a <__match+0x12>
 8005914:	6003      	str	r3, [r0, #0]
 8005916:	2001      	movs	r0, #1
 8005918:	bd30      	pop	{r4, r5, pc}
 800591a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800591e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8005922:	2d19      	cmp	r5, #25
 8005924:	bf98      	it	ls
 8005926:	3220      	addls	r2, #32
 8005928:	42a2      	cmp	r2, r4
 800592a:	d0f0      	beq.n	800590e <__match+0x6>
 800592c:	2000      	movs	r0, #0
 800592e:	e7f3      	b.n	8005918 <__match+0x10>

08005930 <__hexnan>:
 8005930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005934:	680b      	ldr	r3, [r1, #0]
 8005936:	6801      	ldr	r1, [r0, #0]
 8005938:	115e      	asrs	r6, r3, #5
 800593a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800593e:	f013 031f 	ands.w	r3, r3, #31
 8005942:	b087      	sub	sp, #28
 8005944:	bf18      	it	ne
 8005946:	3604      	addne	r6, #4
 8005948:	2500      	movs	r5, #0
 800594a:	1f37      	subs	r7, r6, #4
 800594c:	4682      	mov	sl, r0
 800594e:	4690      	mov	r8, r2
 8005950:	9301      	str	r3, [sp, #4]
 8005952:	f846 5c04 	str.w	r5, [r6, #-4]
 8005956:	46b9      	mov	r9, r7
 8005958:	463c      	mov	r4, r7
 800595a:	9502      	str	r5, [sp, #8]
 800595c:	46ab      	mov	fp, r5
 800595e:	784a      	ldrb	r2, [r1, #1]
 8005960:	1c4b      	adds	r3, r1, #1
 8005962:	9303      	str	r3, [sp, #12]
 8005964:	b342      	cbz	r2, 80059b8 <__hexnan+0x88>
 8005966:	4610      	mov	r0, r2
 8005968:	9105      	str	r1, [sp, #20]
 800596a:	9204      	str	r2, [sp, #16]
 800596c:	f7ff fd94 	bl	8005498 <__hexdig_fun>
 8005970:	2800      	cmp	r0, #0
 8005972:	d151      	bne.n	8005a18 <__hexnan+0xe8>
 8005974:	9a04      	ldr	r2, [sp, #16]
 8005976:	9905      	ldr	r1, [sp, #20]
 8005978:	2a20      	cmp	r2, #32
 800597a:	d818      	bhi.n	80059ae <__hexnan+0x7e>
 800597c:	9b02      	ldr	r3, [sp, #8]
 800597e:	459b      	cmp	fp, r3
 8005980:	dd13      	ble.n	80059aa <__hexnan+0x7a>
 8005982:	454c      	cmp	r4, r9
 8005984:	d206      	bcs.n	8005994 <__hexnan+0x64>
 8005986:	2d07      	cmp	r5, #7
 8005988:	dc04      	bgt.n	8005994 <__hexnan+0x64>
 800598a:	462a      	mov	r2, r5
 800598c:	4649      	mov	r1, r9
 800598e:	4620      	mov	r0, r4
 8005990:	f7ff ffa8 	bl	80058e4 <L_shift>
 8005994:	4544      	cmp	r4, r8
 8005996:	d952      	bls.n	8005a3e <__hexnan+0x10e>
 8005998:	2300      	movs	r3, #0
 800599a:	f1a4 0904 	sub.w	r9, r4, #4
 800599e:	f844 3c04 	str.w	r3, [r4, #-4]
 80059a2:	f8cd b008 	str.w	fp, [sp, #8]
 80059a6:	464c      	mov	r4, r9
 80059a8:	461d      	mov	r5, r3
 80059aa:	9903      	ldr	r1, [sp, #12]
 80059ac:	e7d7      	b.n	800595e <__hexnan+0x2e>
 80059ae:	2a29      	cmp	r2, #41	@ 0x29
 80059b0:	d157      	bne.n	8005a62 <__hexnan+0x132>
 80059b2:	3102      	adds	r1, #2
 80059b4:	f8ca 1000 	str.w	r1, [sl]
 80059b8:	f1bb 0f00 	cmp.w	fp, #0
 80059bc:	d051      	beq.n	8005a62 <__hexnan+0x132>
 80059be:	454c      	cmp	r4, r9
 80059c0:	d206      	bcs.n	80059d0 <__hexnan+0xa0>
 80059c2:	2d07      	cmp	r5, #7
 80059c4:	dc04      	bgt.n	80059d0 <__hexnan+0xa0>
 80059c6:	462a      	mov	r2, r5
 80059c8:	4649      	mov	r1, r9
 80059ca:	4620      	mov	r0, r4
 80059cc:	f7ff ff8a 	bl	80058e4 <L_shift>
 80059d0:	4544      	cmp	r4, r8
 80059d2:	d936      	bls.n	8005a42 <__hexnan+0x112>
 80059d4:	f1a8 0204 	sub.w	r2, r8, #4
 80059d8:	4623      	mov	r3, r4
 80059da:	f853 1b04 	ldr.w	r1, [r3], #4
 80059de:	f842 1f04 	str.w	r1, [r2, #4]!
 80059e2:	429f      	cmp	r7, r3
 80059e4:	d2f9      	bcs.n	80059da <__hexnan+0xaa>
 80059e6:	1b3b      	subs	r3, r7, r4
 80059e8:	f023 0303 	bic.w	r3, r3, #3
 80059ec:	3304      	adds	r3, #4
 80059ee:	3401      	adds	r4, #1
 80059f0:	3e03      	subs	r6, #3
 80059f2:	42b4      	cmp	r4, r6
 80059f4:	bf88      	it	hi
 80059f6:	2304      	movhi	r3, #4
 80059f8:	4443      	add	r3, r8
 80059fa:	2200      	movs	r2, #0
 80059fc:	f843 2b04 	str.w	r2, [r3], #4
 8005a00:	429f      	cmp	r7, r3
 8005a02:	d2fb      	bcs.n	80059fc <__hexnan+0xcc>
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	b91b      	cbnz	r3, 8005a10 <__hexnan+0xe0>
 8005a08:	4547      	cmp	r7, r8
 8005a0a:	d128      	bne.n	8005a5e <__hexnan+0x12e>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	603b      	str	r3, [r7, #0]
 8005a10:	2005      	movs	r0, #5
 8005a12:	b007      	add	sp, #28
 8005a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a18:	3501      	adds	r5, #1
 8005a1a:	2d08      	cmp	r5, #8
 8005a1c:	f10b 0b01 	add.w	fp, fp, #1
 8005a20:	dd06      	ble.n	8005a30 <__hexnan+0x100>
 8005a22:	4544      	cmp	r4, r8
 8005a24:	d9c1      	bls.n	80059aa <__hexnan+0x7a>
 8005a26:	2300      	movs	r3, #0
 8005a28:	f844 3c04 	str.w	r3, [r4, #-4]
 8005a2c:	2501      	movs	r5, #1
 8005a2e:	3c04      	subs	r4, #4
 8005a30:	6822      	ldr	r2, [r4, #0]
 8005a32:	f000 000f 	and.w	r0, r0, #15
 8005a36:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005a3a:	6020      	str	r0, [r4, #0]
 8005a3c:	e7b5      	b.n	80059aa <__hexnan+0x7a>
 8005a3e:	2508      	movs	r5, #8
 8005a40:	e7b3      	b.n	80059aa <__hexnan+0x7a>
 8005a42:	9b01      	ldr	r3, [sp, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0dd      	beq.n	8005a04 <__hexnan+0xd4>
 8005a48:	f1c3 0320 	rsb	r3, r3, #32
 8005a4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a50:	40da      	lsrs	r2, r3
 8005a52:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005a56:	4013      	ands	r3, r2
 8005a58:	f846 3c04 	str.w	r3, [r6, #-4]
 8005a5c:	e7d2      	b.n	8005a04 <__hexnan+0xd4>
 8005a5e:	3f04      	subs	r7, #4
 8005a60:	e7d0      	b.n	8005a04 <__hexnan+0xd4>
 8005a62:	2004      	movs	r0, #4
 8005a64:	e7d5      	b.n	8005a12 <__hexnan+0xe2>

08005a66 <__ascii_mbtowc>:
 8005a66:	b082      	sub	sp, #8
 8005a68:	b901      	cbnz	r1, 8005a6c <__ascii_mbtowc+0x6>
 8005a6a:	a901      	add	r1, sp, #4
 8005a6c:	b142      	cbz	r2, 8005a80 <__ascii_mbtowc+0x1a>
 8005a6e:	b14b      	cbz	r3, 8005a84 <__ascii_mbtowc+0x1e>
 8005a70:	7813      	ldrb	r3, [r2, #0]
 8005a72:	600b      	str	r3, [r1, #0]
 8005a74:	7812      	ldrb	r2, [r2, #0]
 8005a76:	1e10      	subs	r0, r2, #0
 8005a78:	bf18      	it	ne
 8005a7a:	2001      	movne	r0, #1
 8005a7c:	b002      	add	sp, #8
 8005a7e:	4770      	bx	lr
 8005a80:	4610      	mov	r0, r2
 8005a82:	e7fb      	b.n	8005a7c <__ascii_mbtowc+0x16>
 8005a84:	f06f 0001 	mvn.w	r0, #1
 8005a88:	e7f8      	b.n	8005a7c <__ascii_mbtowc+0x16>

08005a8a <_printf_common>:
 8005a8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a8e:	4616      	mov	r6, r2
 8005a90:	4698      	mov	r8, r3
 8005a92:	688a      	ldr	r2, [r1, #8]
 8005a94:	690b      	ldr	r3, [r1, #16]
 8005a96:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	bfb8      	it	lt
 8005a9e:	4613      	movlt	r3, r2
 8005aa0:	6033      	str	r3, [r6, #0]
 8005aa2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005aa6:	4607      	mov	r7, r0
 8005aa8:	460c      	mov	r4, r1
 8005aaa:	b10a      	cbz	r2, 8005ab0 <_printf_common+0x26>
 8005aac:	3301      	adds	r3, #1
 8005aae:	6033      	str	r3, [r6, #0]
 8005ab0:	6823      	ldr	r3, [r4, #0]
 8005ab2:	0699      	lsls	r1, r3, #26
 8005ab4:	bf42      	ittt	mi
 8005ab6:	6833      	ldrmi	r3, [r6, #0]
 8005ab8:	3302      	addmi	r3, #2
 8005aba:	6033      	strmi	r3, [r6, #0]
 8005abc:	6825      	ldr	r5, [r4, #0]
 8005abe:	f015 0506 	ands.w	r5, r5, #6
 8005ac2:	d106      	bne.n	8005ad2 <_printf_common+0x48>
 8005ac4:	f104 0a19 	add.w	sl, r4, #25
 8005ac8:	68e3      	ldr	r3, [r4, #12]
 8005aca:	6832      	ldr	r2, [r6, #0]
 8005acc:	1a9b      	subs	r3, r3, r2
 8005ace:	42ab      	cmp	r3, r5
 8005ad0:	dc26      	bgt.n	8005b20 <_printf_common+0x96>
 8005ad2:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ad6:	6822      	ldr	r2, [r4, #0]
 8005ad8:	3b00      	subs	r3, #0
 8005ada:	bf18      	it	ne
 8005adc:	2301      	movne	r3, #1
 8005ade:	0692      	lsls	r2, r2, #26
 8005ae0:	d42b      	bmi.n	8005b3a <_printf_common+0xb0>
 8005ae2:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ae6:	4641      	mov	r1, r8
 8005ae8:	4638      	mov	r0, r7
 8005aea:	47c8      	blx	r9
 8005aec:	3001      	adds	r0, #1
 8005aee:	d01e      	beq.n	8005b2e <_printf_common+0xa4>
 8005af0:	6823      	ldr	r3, [r4, #0]
 8005af2:	6922      	ldr	r2, [r4, #16]
 8005af4:	f003 0306 	and.w	r3, r3, #6
 8005af8:	2b04      	cmp	r3, #4
 8005afa:	bf02      	ittt	eq
 8005afc:	68e5      	ldreq	r5, [r4, #12]
 8005afe:	6833      	ldreq	r3, [r6, #0]
 8005b00:	1aed      	subeq	r5, r5, r3
 8005b02:	68a3      	ldr	r3, [r4, #8]
 8005b04:	bf0c      	ite	eq
 8005b06:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b0a:	2500      	movne	r5, #0
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	bfc4      	itt	gt
 8005b10:	1a9b      	subgt	r3, r3, r2
 8005b12:	18ed      	addgt	r5, r5, r3
 8005b14:	2600      	movs	r6, #0
 8005b16:	341a      	adds	r4, #26
 8005b18:	42b5      	cmp	r5, r6
 8005b1a:	d11a      	bne.n	8005b52 <_printf_common+0xc8>
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	e008      	b.n	8005b32 <_printf_common+0xa8>
 8005b20:	2301      	movs	r3, #1
 8005b22:	4652      	mov	r2, sl
 8005b24:	4641      	mov	r1, r8
 8005b26:	4638      	mov	r0, r7
 8005b28:	47c8      	blx	r9
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	d103      	bne.n	8005b36 <_printf_common+0xac>
 8005b2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b36:	3501      	adds	r5, #1
 8005b38:	e7c6      	b.n	8005ac8 <_printf_common+0x3e>
 8005b3a:	18e1      	adds	r1, r4, r3
 8005b3c:	1c5a      	adds	r2, r3, #1
 8005b3e:	2030      	movs	r0, #48	@ 0x30
 8005b40:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b44:	4422      	add	r2, r4
 8005b46:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b4a:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b4e:	3302      	adds	r3, #2
 8005b50:	e7c7      	b.n	8005ae2 <_printf_common+0x58>
 8005b52:	2301      	movs	r3, #1
 8005b54:	4622      	mov	r2, r4
 8005b56:	4641      	mov	r1, r8
 8005b58:	4638      	mov	r0, r7
 8005b5a:	47c8      	blx	r9
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d0e6      	beq.n	8005b2e <_printf_common+0xa4>
 8005b60:	3601      	adds	r6, #1
 8005b62:	e7d9      	b.n	8005b18 <_printf_common+0x8e>

08005b64 <_printf_i>:
 8005b64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b68:	7e0f      	ldrb	r7, [r1, #24]
 8005b6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b6c:	2f78      	cmp	r7, #120	@ 0x78
 8005b6e:	4691      	mov	r9, r2
 8005b70:	4680      	mov	r8, r0
 8005b72:	460c      	mov	r4, r1
 8005b74:	469a      	mov	sl, r3
 8005b76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b7a:	d807      	bhi.n	8005b8c <_printf_i+0x28>
 8005b7c:	2f62      	cmp	r7, #98	@ 0x62
 8005b7e:	d80a      	bhi.n	8005b96 <_printf_i+0x32>
 8005b80:	2f00      	cmp	r7, #0
 8005b82:	f000 80d2 	beq.w	8005d2a <_printf_i+0x1c6>
 8005b86:	2f58      	cmp	r7, #88	@ 0x58
 8005b88:	f000 80b9 	beq.w	8005cfe <_printf_i+0x19a>
 8005b8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b94:	e03a      	b.n	8005c0c <_printf_i+0xa8>
 8005b96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b9a:	2b15      	cmp	r3, #21
 8005b9c:	d8f6      	bhi.n	8005b8c <_printf_i+0x28>
 8005b9e:	a101      	add	r1, pc, #4	@ (adr r1, 8005ba4 <_printf_i+0x40>)
 8005ba0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ba4:	08005bfd 	.word	0x08005bfd
 8005ba8:	08005c11 	.word	0x08005c11
 8005bac:	08005b8d 	.word	0x08005b8d
 8005bb0:	08005b8d 	.word	0x08005b8d
 8005bb4:	08005b8d 	.word	0x08005b8d
 8005bb8:	08005b8d 	.word	0x08005b8d
 8005bbc:	08005c11 	.word	0x08005c11
 8005bc0:	08005b8d 	.word	0x08005b8d
 8005bc4:	08005b8d 	.word	0x08005b8d
 8005bc8:	08005b8d 	.word	0x08005b8d
 8005bcc:	08005b8d 	.word	0x08005b8d
 8005bd0:	08005d11 	.word	0x08005d11
 8005bd4:	08005c3b 	.word	0x08005c3b
 8005bd8:	08005ccb 	.word	0x08005ccb
 8005bdc:	08005b8d 	.word	0x08005b8d
 8005be0:	08005b8d 	.word	0x08005b8d
 8005be4:	08005d33 	.word	0x08005d33
 8005be8:	08005b8d 	.word	0x08005b8d
 8005bec:	08005c3b 	.word	0x08005c3b
 8005bf0:	08005b8d 	.word	0x08005b8d
 8005bf4:	08005b8d 	.word	0x08005b8d
 8005bf8:	08005cd3 	.word	0x08005cd3
 8005bfc:	6833      	ldr	r3, [r6, #0]
 8005bfe:	1d1a      	adds	r2, r3, #4
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6032      	str	r2, [r6, #0]
 8005c04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e09d      	b.n	8005d4c <_printf_i+0x1e8>
 8005c10:	6833      	ldr	r3, [r6, #0]
 8005c12:	6820      	ldr	r0, [r4, #0]
 8005c14:	1d19      	adds	r1, r3, #4
 8005c16:	6031      	str	r1, [r6, #0]
 8005c18:	0606      	lsls	r6, r0, #24
 8005c1a:	d501      	bpl.n	8005c20 <_printf_i+0xbc>
 8005c1c:	681d      	ldr	r5, [r3, #0]
 8005c1e:	e003      	b.n	8005c28 <_printf_i+0xc4>
 8005c20:	0645      	lsls	r5, r0, #25
 8005c22:	d5fb      	bpl.n	8005c1c <_printf_i+0xb8>
 8005c24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c28:	2d00      	cmp	r5, #0
 8005c2a:	da03      	bge.n	8005c34 <_printf_i+0xd0>
 8005c2c:	232d      	movs	r3, #45	@ 0x2d
 8005c2e:	426d      	negs	r5, r5
 8005c30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c34:	4859      	ldr	r0, [pc, #356]	@ (8005d9c <_printf_i+0x238>)
 8005c36:	230a      	movs	r3, #10
 8005c38:	e011      	b.n	8005c5e <_printf_i+0xfa>
 8005c3a:	6821      	ldr	r1, [r4, #0]
 8005c3c:	6833      	ldr	r3, [r6, #0]
 8005c3e:	0608      	lsls	r0, r1, #24
 8005c40:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c44:	d402      	bmi.n	8005c4c <_printf_i+0xe8>
 8005c46:	0649      	lsls	r1, r1, #25
 8005c48:	bf48      	it	mi
 8005c4a:	b2ad      	uxthmi	r5, r5
 8005c4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c4e:	4853      	ldr	r0, [pc, #332]	@ (8005d9c <_printf_i+0x238>)
 8005c50:	6033      	str	r3, [r6, #0]
 8005c52:	bf14      	ite	ne
 8005c54:	230a      	movne	r3, #10
 8005c56:	2308      	moveq	r3, #8
 8005c58:	2100      	movs	r1, #0
 8005c5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c5e:	6866      	ldr	r6, [r4, #4]
 8005c60:	60a6      	str	r6, [r4, #8]
 8005c62:	2e00      	cmp	r6, #0
 8005c64:	bfa2      	ittt	ge
 8005c66:	6821      	ldrge	r1, [r4, #0]
 8005c68:	f021 0104 	bicge.w	r1, r1, #4
 8005c6c:	6021      	strge	r1, [r4, #0]
 8005c6e:	b90d      	cbnz	r5, 8005c74 <_printf_i+0x110>
 8005c70:	2e00      	cmp	r6, #0
 8005c72:	d04b      	beq.n	8005d0c <_printf_i+0x1a8>
 8005c74:	4616      	mov	r6, r2
 8005c76:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c7a:	fb03 5711 	mls	r7, r3, r1, r5
 8005c7e:	5dc7      	ldrb	r7, [r0, r7]
 8005c80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c84:	462f      	mov	r7, r5
 8005c86:	42bb      	cmp	r3, r7
 8005c88:	460d      	mov	r5, r1
 8005c8a:	d9f4      	bls.n	8005c76 <_printf_i+0x112>
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d10b      	bne.n	8005ca8 <_printf_i+0x144>
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	07df      	lsls	r7, r3, #31
 8005c94:	d508      	bpl.n	8005ca8 <_printf_i+0x144>
 8005c96:	6923      	ldr	r3, [r4, #16]
 8005c98:	6861      	ldr	r1, [r4, #4]
 8005c9a:	4299      	cmp	r1, r3
 8005c9c:	bfde      	ittt	le
 8005c9e:	2330      	movle	r3, #48	@ 0x30
 8005ca0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ca4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005ca8:	1b92      	subs	r2, r2, r6
 8005caa:	6122      	str	r2, [r4, #16]
 8005cac:	f8cd a000 	str.w	sl, [sp]
 8005cb0:	464b      	mov	r3, r9
 8005cb2:	aa03      	add	r2, sp, #12
 8005cb4:	4621      	mov	r1, r4
 8005cb6:	4640      	mov	r0, r8
 8005cb8:	f7ff fee7 	bl	8005a8a <_printf_common>
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	d14a      	bne.n	8005d56 <_printf_i+0x1f2>
 8005cc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005cc4:	b004      	add	sp, #16
 8005cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cca:	6823      	ldr	r3, [r4, #0]
 8005ccc:	f043 0320 	orr.w	r3, r3, #32
 8005cd0:	6023      	str	r3, [r4, #0]
 8005cd2:	4833      	ldr	r0, [pc, #204]	@ (8005da0 <_printf_i+0x23c>)
 8005cd4:	2778      	movs	r7, #120	@ 0x78
 8005cd6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	6831      	ldr	r1, [r6, #0]
 8005cde:	061f      	lsls	r7, r3, #24
 8005ce0:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ce4:	d402      	bmi.n	8005cec <_printf_i+0x188>
 8005ce6:	065f      	lsls	r7, r3, #25
 8005ce8:	bf48      	it	mi
 8005cea:	b2ad      	uxthmi	r5, r5
 8005cec:	6031      	str	r1, [r6, #0]
 8005cee:	07d9      	lsls	r1, r3, #31
 8005cf0:	bf44      	itt	mi
 8005cf2:	f043 0320 	orrmi.w	r3, r3, #32
 8005cf6:	6023      	strmi	r3, [r4, #0]
 8005cf8:	b11d      	cbz	r5, 8005d02 <_printf_i+0x19e>
 8005cfa:	2310      	movs	r3, #16
 8005cfc:	e7ac      	b.n	8005c58 <_printf_i+0xf4>
 8005cfe:	4827      	ldr	r0, [pc, #156]	@ (8005d9c <_printf_i+0x238>)
 8005d00:	e7e9      	b.n	8005cd6 <_printf_i+0x172>
 8005d02:	6823      	ldr	r3, [r4, #0]
 8005d04:	f023 0320 	bic.w	r3, r3, #32
 8005d08:	6023      	str	r3, [r4, #0]
 8005d0a:	e7f6      	b.n	8005cfa <_printf_i+0x196>
 8005d0c:	4616      	mov	r6, r2
 8005d0e:	e7bd      	b.n	8005c8c <_printf_i+0x128>
 8005d10:	6833      	ldr	r3, [r6, #0]
 8005d12:	6825      	ldr	r5, [r4, #0]
 8005d14:	6961      	ldr	r1, [r4, #20]
 8005d16:	1d18      	adds	r0, r3, #4
 8005d18:	6030      	str	r0, [r6, #0]
 8005d1a:	062e      	lsls	r6, r5, #24
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	d501      	bpl.n	8005d24 <_printf_i+0x1c0>
 8005d20:	6019      	str	r1, [r3, #0]
 8005d22:	e002      	b.n	8005d2a <_printf_i+0x1c6>
 8005d24:	0668      	lsls	r0, r5, #25
 8005d26:	d5fb      	bpl.n	8005d20 <_printf_i+0x1bc>
 8005d28:	8019      	strh	r1, [r3, #0]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	6123      	str	r3, [r4, #16]
 8005d2e:	4616      	mov	r6, r2
 8005d30:	e7bc      	b.n	8005cac <_printf_i+0x148>
 8005d32:	6833      	ldr	r3, [r6, #0]
 8005d34:	1d1a      	adds	r2, r3, #4
 8005d36:	6032      	str	r2, [r6, #0]
 8005d38:	681e      	ldr	r6, [r3, #0]
 8005d3a:	6862      	ldr	r2, [r4, #4]
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	4630      	mov	r0, r6
 8005d40:	f7fa fa7e 	bl	8000240 <memchr>
 8005d44:	b108      	cbz	r0, 8005d4a <_printf_i+0x1e6>
 8005d46:	1b80      	subs	r0, r0, r6
 8005d48:	6060      	str	r0, [r4, #4]
 8005d4a:	6863      	ldr	r3, [r4, #4]
 8005d4c:	6123      	str	r3, [r4, #16]
 8005d4e:	2300      	movs	r3, #0
 8005d50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d54:	e7aa      	b.n	8005cac <_printf_i+0x148>
 8005d56:	6923      	ldr	r3, [r4, #16]
 8005d58:	4632      	mov	r2, r6
 8005d5a:	4649      	mov	r1, r9
 8005d5c:	4640      	mov	r0, r8
 8005d5e:	47d0      	blx	sl
 8005d60:	3001      	adds	r0, #1
 8005d62:	d0ad      	beq.n	8005cc0 <_printf_i+0x15c>
 8005d64:	6823      	ldr	r3, [r4, #0]
 8005d66:	079b      	lsls	r3, r3, #30
 8005d68:	d413      	bmi.n	8005d92 <_printf_i+0x22e>
 8005d6a:	68e0      	ldr	r0, [r4, #12]
 8005d6c:	9b03      	ldr	r3, [sp, #12]
 8005d6e:	4298      	cmp	r0, r3
 8005d70:	bfb8      	it	lt
 8005d72:	4618      	movlt	r0, r3
 8005d74:	e7a6      	b.n	8005cc4 <_printf_i+0x160>
 8005d76:	2301      	movs	r3, #1
 8005d78:	4632      	mov	r2, r6
 8005d7a:	4649      	mov	r1, r9
 8005d7c:	4640      	mov	r0, r8
 8005d7e:	47d0      	blx	sl
 8005d80:	3001      	adds	r0, #1
 8005d82:	d09d      	beq.n	8005cc0 <_printf_i+0x15c>
 8005d84:	3501      	adds	r5, #1
 8005d86:	68e3      	ldr	r3, [r4, #12]
 8005d88:	9903      	ldr	r1, [sp, #12]
 8005d8a:	1a5b      	subs	r3, r3, r1
 8005d8c:	42ab      	cmp	r3, r5
 8005d8e:	dcf2      	bgt.n	8005d76 <_printf_i+0x212>
 8005d90:	e7eb      	b.n	8005d6a <_printf_i+0x206>
 8005d92:	2500      	movs	r5, #0
 8005d94:	f104 0619 	add.w	r6, r4, #25
 8005d98:	e7f5      	b.n	8005d86 <_printf_i+0x222>
 8005d9a:	bf00      	nop
 8005d9c:	08007b12 	.word	0x08007b12
 8005da0:	08007b23 	.word	0x08007b23

08005da4 <__sflush_r>:
 8005da4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dac:	0716      	lsls	r6, r2, #28
 8005dae:	4605      	mov	r5, r0
 8005db0:	460c      	mov	r4, r1
 8005db2:	d454      	bmi.n	8005e5e <__sflush_r+0xba>
 8005db4:	684b      	ldr	r3, [r1, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	dc02      	bgt.n	8005dc0 <__sflush_r+0x1c>
 8005dba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	dd48      	ble.n	8005e52 <__sflush_r+0xae>
 8005dc0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005dc2:	2e00      	cmp	r6, #0
 8005dc4:	d045      	beq.n	8005e52 <__sflush_r+0xae>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005dcc:	682f      	ldr	r7, [r5, #0]
 8005dce:	6a21      	ldr	r1, [r4, #32]
 8005dd0:	602b      	str	r3, [r5, #0]
 8005dd2:	d030      	beq.n	8005e36 <__sflush_r+0x92>
 8005dd4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005dd6:	89a3      	ldrh	r3, [r4, #12]
 8005dd8:	0759      	lsls	r1, r3, #29
 8005dda:	d505      	bpl.n	8005de8 <__sflush_r+0x44>
 8005ddc:	6863      	ldr	r3, [r4, #4]
 8005dde:	1ad2      	subs	r2, r2, r3
 8005de0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005de2:	b10b      	cbz	r3, 8005de8 <__sflush_r+0x44>
 8005de4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005de6:	1ad2      	subs	r2, r2, r3
 8005de8:	2300      	movs	r3, #0
 8005dea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005dec:	6a21      	ldr	r1, [r4, #32]
 8005dee:	4628      	mov	r0, r5
 8005df0:	47b0      	blx	r6
 8005df2:	1c43      	adds	r3, r0, #1
 8005df4:	89a3      	ldrh	r3, [r4, #12]
 8005df6:	d106      	bne.n	8005e06 <__sflush_r+0x62>
 8005df8:	6829      	ldr	r1, [r5, #0]
 8005dfa:	291d      	cmp	r1, #29
 8005dfc:	d82b      	bhi.n	8005e56 <__sflush_r+0xb2>
 8005dfe:	4a2a      	ldr	r2, [pc, #168]	@ (8005ea8 <__sflush_r+0x104>)
 8005e00:	410a      	asrs	r2, r1
 8005e02:	07d6      	lsls	r6, r2, #31
 8005e04:	d427      	bmi.n	8005e56 <__sflush_r+0xb2>
 8005e06:	2200      	movs	r2, #0
 8005e08:	6062      	str	r2, [r4, #4]
 8005e0a:	04d9      	lsls	r1, r3, #19
 8005e0c:	6922      	ldr	r2, [r4, #16]
 8005e0e:	6022      	str	r2, [r4, #0]
 8005e10:	d504      	bpl.n	8005e1c <__sflush_r+0x78>
 8005e12:	1c42      	adds	r2, r0, #1
 8005e14:	d101      	bne.n	8005e1a <__sflush_r+0x76>
 8005e16:	682b      	ldr	r3, [r5, #0]
 8005e18:	b903      	cbnz	r3, 8005e1c <__sflush_r+0x78>
 8005e1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8005e1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e1e:	602f      	str	r7, [r5, #0]
 8005e20:	b1b9      	cbz	r1, 8005e52 <__sflush_r+0xae>
 8005e22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e26:	4299      	cmp	r1, r3
 8005e28:	d002      	beq.n	8005e30 <__sflush_r+0x8c>
 8005e2a:	4628      	mov	r0, r5
 8005e2c:	f7ff fa98 	bl	8005360 <_free_r>
 8005e30:	2300      	movs	r3, #0
 8005e32:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e34:	e00d      	b.n	8005e52 <__sflush_r+0xae>
 8005e36:	2301      	movs	r3, #1
 8005e38:	4628      	mov	r0, r5
 8005e3a:	47b0      	blx	r6
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	1c50      	adds	r0, r2, #1
 8005e40:	d1c9      	bne.n	8005dd6 <__sflush_r+0x32>
 8005e42:	682b      	ldr	r3, [r5, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d0c6      	beq.n	8005dd6 <__sflush_r+0x32>
 8005e48:	2b1d      	cmp	r3, #29
 8005e4a:	d001      	beq.n	8005e50 <__sflush_r+0xac>
 8005e4c:	2b16      	cmp	r3, #22
 8005e4e:	d11e      	bne.n	8005e8e <__sflush_r+0xea>
 8005e50:	602f      	str	r7, [r5, #0]
 8005e52:	2000      	movs	r0, #0
 8005e54:	e022      	b.n	8005e9c <__sflush_r+0xf8>
 8005e56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e5a:	b21b      	sxth	r3, r3
 8005e5c:	e01b      	b.n	8005e96 <__sflush_r+0xf2>
 8005e5e:	690f      	ldr	r7, [r1, #16]
 8005e60:	2f00      	cmp	r7, #0
 8005e62:	d0f6      	beq.n	8005e52 <__sflush_r+0xae>
 8005e64:	0793      	lsls	r3, r2, #30
 8005e66:	680e      	ldr	r6, [r1, #0]
 8005e68:	bf08      	it	eq
 8005e6a:	694b      	ldreq	r3, [r1, #20]
 8005e6c:	600f      	str	r7, [r1, #0]
 8005e6e:	bf18      	it	ne
 8005e70:	2300      	movne	r3, #0
 8005e72:	eba6 0807 	sub.w	r8, r6, r7
 8005e76:	608b      	str	r3, [r1, #8]
 8005e78:	f1b8 0f00 	cmp.w	r8, #0
 8005e7c:	dde9      	ble.n	8005e52 <__sflush_r+0xae>
 8005e7e:	6a21      	ldr	r1, [r4, #32]
 8005e80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005e82:	4643      	mov	r3, r8
 8005e84:	463a      	mov	r2, r7
 8005e86:	4628      	mov	r0, r5
 8005e88:	47b0      	blx	r6
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	dc08      	bgt.n	8005ea0 <__sflush_r+0xfc>
 8005e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e96:	81a3      	strh	r3, [r4, #12]
 8005e98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ea0:	4407      	add	r7, r0
 8005ea2:	eba8 0800 	sub.w	r8, r8, r0
 8005ea6:	e7e7      	b.n	8005e78 <__sflush_r+0xd4>
 8005ea8:	dfbffffe 	.word	0xdfbffffe

08005eac <_fflush_r>:
 8005eac:	b538      	push	{r3, r4, r5, lr}
 8005eae:	690b      	ldr	r3, [r1, #16]
 8005eb0:	4605      	mov	r5, r0
 8005eb2:	460c      	mov	r4, r1
 8005eb4:	b913      	cbnz	r3, 8005ebc <_fflush_r+0x10>
 8005eb6:	2500      	movs	r5, #0
 8005eb8:	4628      	mov	r0, r5
 8005eba:	bd38      	pop	{r3, r4, r5, pc}
 8005ebc:	b118      	cbz	r0, 8005ec6 <_fflush_r+0x1a>
 8005ebe:	6a03      	ldr	r3, [r0, #32]
 8005ec0:	b90b      	cbnz	r3, 8005ec6 <_fflush_r+0x1a>
 8005ec2:	f7fe fb0f 	bl	80044e4 <__sinit>
 8005ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0f3      	beq.n	8005eb6 <_fflush_r+0xa>
 8005ece:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ed0:	07d0      	lsls	r0, r2, #31
 8005ed2:	d404      	bmi.n	8005ede <_fflush_r+0x32>
 8005ed4:	0599      	lsls	r1, r3, #22
 8005ed6:	d402      	bmi.n	8005ede <_fflush_r+0x32>
 8005ed8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005eda:	f7ff fa26 	bl	800532a <__retarget_lock_acquire_recursive>
 8005ede:	4628      	mov	r0, r5
 8005ee0:	4621      	mov	r1, r4
 8005ee2:	f7ff ff5f 	bl	8005da4 <__sflush_r>
 8005ee6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ee8:	07da      	lsls	r2, r3, #31
 8005eea:	4605      	mov	r5, r0
 8005eec:	d4e4      	bmi.n	8005eb8 <_fflush_r+0xc>
 8005eee:	89a3      	ldrh	r3, [r4, #12]
 8005ef0:	059b      	lsls	r3, r3, #22
 8005ef2:	d4e1      	bmi.n	8005eb8 <_fflush_r+0xc>
 8005ef4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ef6:	f7ff fa19 	bl	800532c <__retarget_lock_release_recursive>
 8005efa:	e7dd      	b.n	8005eb8 <_fflush_r+0xc>

08005efc <_Balloc>:
 8005efc:	b570      	push	{r4, r5, r6, lr}
 8005efe:	69c6      	ldr	r6, [r0, #28]
 8005f00:	4604      	mov	r4, r0
 8005f02:	460d      	mov	r5, r1
 8005f04:	b976      	cbnz	r6, 8005f24 <_Balloc+0x28>
 8005f06:	2010      	movs	r0, #16
 8005f08:	f7fe f956 	bl	80041b8 <malloc>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	61e0      	str	r0, [r4, #28]
 8005f10:	b920      	cbnz	r0, 8005f1c <_Balloc+0x20>
 8005f12:	4b18      	ldr	r3, [pc, #96]	@ (8005f74 <_Balloc+0x78>)
 8005f14:	4818      	ldr	r0, [pc, #96]	@ (8005f78 <_Balloc+0x7c>)
 8005f16:	216b      	movs	r1, #107	@ 0x6b
 8005f18:	f000 fcb8 	bl	800688c <__assert_func>
 8005f1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f20:	6006      	str	r6, [r0, #0]
 8005f22:	60c6      	str	r6, [r0, #12]
 8005f24:	69e6      	ldr	r6, [r4, #28]
 8005f26:	68f3      	ldr	r3, [r6, #12]
 8005f28:	b183      	cbz	r3, 8005f4c <_Balloc+0x50>
 8005f2a:	69e3      	ldr	r3, [r4, #28]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f32:	b9b8      	cbnz	r0, 8005f64 <_Balloc+0x68>
 8005f34:	2101      	movs	r1, #1
 8005f36:	fa01 f605 	lsl.w	r6, r1, r5
 8005f3a:	1d72      	adds	r2, r6, #5
 8005f3c:	0092      	lsls	r2, r2, #2
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f000 fcc2 	bl	80068c8 <_calloc_r>
 8005f44:	b160      	cbz	r0, 8005f60 <_Balloc+0x64>
 8005f46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f4a:	e00e      	b.n	8005f6a <_Balloc+0x6e>
 8005f4c:	2221      	movs	r2, #33	@ 0x21
 8005f4e:	2104      	movs	r1, #4
 8005f50:	4620      	mov	r0, r4
 8005f52:	f000 fcb9 	bl	80068c8 <_calloc_r>
 8005f56:	69e3      	ldr	r3, [r4, #28]
 8005f58:	60f0      	str	r0, [r6, #12]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1e4      	bne.n	8005f2a <_Balloc+0x2e>
 8005f60:	2000      	movs	r0, #0
 8005f62:	bd70      	pop	{r4, r5, r6, pc}
 8005f64:	6802      	ldr	r2, [r0, #0]
 8005f66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f70:	e7f7      	b.n	8005f62 <_Balloc+0x66>
 8005f72:	bf00      	nop
 8005f74:	08007b34 	.word	0x08007b34
 8005f78:	08007b4b 	.word	0x08007b4b

08005f7c <_Bfree>:
 8005f7c:	b570      	push	{r4, r5, r6, lr}
 8005f7e:	69c6      	ldr	r6, [r0, #28]
 8005f80:	4605      	mov	r5, r0
 8005f82:	460c      	mov	r4, r1
 8005f84:	b976      	cbnz	r6, 8005fa4 <_Bfree+0x28>
 8005f86:	2010      	movs	r0, #16
 8005f88:	f7fe f916 	bl	80041b8 <malloc>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	61e8      	str	r0, [r5, #28]
 8005f90:	b920      	cbnz	r0, 8005f9c <_Bfree+0x20>
 8005f92:	4b09      	ldr	r3, [pc, #36]	@ (8005fb8 <_Bfree+0x3c>)
 8005f94:	4809      	ldr	r0, [pc, #36]	@ (8005fbc <_Bfree+0x40>)
 8005f96:	218f      	movs	r1, #143	@ 0x8f
 8005f98:	f000 fc78 	bl	800688c <__assert_func>
 8005f9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fa0:	6006      	str	r6, [r0, #0]
 8005fa2:	60c6      	str	r6, [r0, #12]
 8005fa4:	b13c      	cbz	r4, 8005fb6 <_Bfree+0x3a>
 8005fa6:	69eb      	ldr	r3, [r5, #28]
 8005fa8:	6862      	ldr	r2, [r4, #4]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fb0:	6021      	str	r1, [r4, #0]
 8005fb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005fb6:	bd70      	pop	{r4, r5, r6, pc}
 8005fb8:	08007b34 	.word	0x08007b34
 8005fbc:	08007b4b 	.word	0x08007b4b

08005fc0 <__multadd>:
 8005fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fc4:	690d      	ldr	r5, [r1, #16]
 8005fc6:	4607      	mov	r7, r0
 8005fc8:	460c      	mov	r4, r1
 8005fca:	461e      	mov	r6, r3
 8005fcc:	f101 0c14 	add.w	ip, r1, #20
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	f8dc 3000 	ldr.w	r3, [ip]
 8005fd6:	b299      	uxth	r1, r3
 8005fd8:	fb02 6101 	mla	r1, r2, r1, r6
 8005fdc:	0c1e      	lsrs	r6, r3, #16
 8005fde:	0c0b      	lsrs	r3, r1, #16
 8005fe0:	fb02 3306 	mla	r3, r2, r6, r3
 8005fe4:	b289      	uxth	r1, r1
 8005fe6:	3001      	adds	r0, #1
 8005fe8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005fec:	4285      	cmp	r5, r0
 8005fee:	f84c 1b04 	str.w	r1, [ip], #4
 8005ff2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005ff6:	dcec      	bgt.n	8005fd2 <__multadd+0x12>
 8005ff8:	b30e      	cbz	r6, 800603e <__multadd+0x7e>
 8005ffa:	68a3      	ldr	r3, [r4, #8]
 8005ffc:	42ab      	cmp	r3, r5
 8005ffe:	dc19      	bgt.n	8006034 <__multadd+0x74>
 8006000:	6861      	ldr	r1, [r4, #4]
 8006002:	4638      	mov	r0, r7
 8006004:	3101      	adds	r1, #1
 8006006:	f7ff ff79 	bl	8005efc <_Balloc>
 800600a:	4680      	mov	r8, r0
 800600c:	b928      	cbnz	r0, 800601a <__multadd+0x5a>
 800600e:	4602      	mov	r2, r0
 8006010:	4b0c      	ldr	r3, [pc, #48]	@ (8006044 <__multadd+0x84>)
 8006012:	480d      	ldr	r0, [pc, #52]	@ (8006048 <__multadd+0x88>)
 8006014:	21ba      	movs	r1, #186	@ 0xba
 8006016:	f000 fc39 	bl	800688c <__assert_func>
 800601a:	6922      	ldr	r2, [r4, #16]
 800601c:	3202      	adds	r2, #2
 800601e:	f104 010c 	add.w	r1, r4, #12
 8006022:	0092      	lsls	r2, r2, #2
 8006024:	300c      	adds	r0, #12
 8006026:	f7ff f982 	bl	800532e <memcpy>
 800602a:	4621      	mov	r1, r4
 800602c:	4638      	mov	r0, r7
 800602e:	f7ff ffa5 	bl	8005f7c <_Bfree>
 8006032:	4644      	mov	r4, r8
 8006034:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006038:	3501      	adds	r5, #1
 800603a:	615e      	str	r6, [r3, #20]
 800603c:	6125      	str	r5, [r4, #16]
 800603e:	4620      	mov	r0, r4
 8006040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006044:	08007aa1 	.word	0x08007aa1
 8006048:	08007b4b 	.word	0x08007b4b

0800604c <__s2b>:
 800604c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006050:	460c      	mov	r4, r1
 8006052:	4615      	mov	r5, r2
 8006054:	461f      	mov	r7, r3
 8006056:	2209      	movs	r2, #9
 8006058:	3308      	adds	r3, #8
 800605a:	4606      	mov	r6, r0
 800605c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006060:	2100      	movs	r1, #0
 8006062:	2201      	movs	r2, #1
 8006064:	429a      	cmp	r2, r3
 8006066:	db09      	blt.n	800607c <__s2b+0x30>
 8006068:	4630      	mov	r0, r6
 800606a:	f7ff ff47 	bl	8005efc <_Balloc>
 800606e:	b940      	cbnz	r0, 8006082 <__s2b+0x36>
 8006070:	4602      	mov	r2, r0
 8006072:	4b19      	ldr	r3, [pc, #100]	@ (80060d8 <__s2b+0x8c>)
 8006074:	4819      	ldr	r0, [pc, #100]	@ (80060dc <__s2b+0x90>)
 8006076:	21d3      	movs	r1, #211	@ 0xd3
 8006078:	f000 fc08 	bl	800688c <__assert_func>
 800607c:	0052      	lsls	r2, r2, #1
 800607e:	3101      	adds	r1, #1
 8006080:	e7f0      	b.n	8006064 <__s2b+0x18>
 8006082:	9b08      	ldr	r3, [sp, #32]
 8006084:	6143      	str	r3, [r0, #20]
 8006086:	2d09      	cmp	r5, #9
 8006088:	f04f 0301 	mov.w	r3, #1
 800608c:	6103      	str	r3, [r0, #16]
 800608e:	dd16      	ble.n	80060be <__s2b+0x72>
 8006090:	f104 0909 	add.w	r9, r4, #9
 8006094:	46c8      	mov	r8, r9
 8006096:	442c      	add	r4, r5
 8006098:	f818 3b01 	ldrb.w	r3, [r8], #1
 800609c:	4601      	mov	r1, r0
 800609e:	3b30      	subs	r3, #48	@ 0x30
 80060a0:	220a      	movs	r2, #10
 80060a2:	4630      	mov	r0, r6
 80060a4:	f7ff ff8c 	bl	8005fc0 <__multadd>
 80060a8:	45a0      	cmp	r8, r4
 80060aa:	d1f5      	bne.n	8006098 <__s2b+0x4c>
 80060ac:	f1a5 0408 	sub.w	r4, r5, #8
 80060b0:	444c      	add	r4, r9
 80060b2:	1b2d      	subs	r5, r5, r4
 80060b4:	1963      	adds	r3, r4, r5
 80060b6:	42bb      	cmp	r3, r7
 80060b8:	db04      	blt.n	80060c4 <__s2b+0x78>
 80060ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060be:	340a      	adds	r4, #10
 80060c0:	2509      	movs	r5, #9
 80060c2:	e7f6      	b.n	80060b2 <__s2b+0x66>
 80060c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80060c8:	4601      	mov	r1, r0
 80060ca:	3b30      	subs	r3, #48	@ 0x30
 80060cc:	220a      	movs	r2, #10
 80060ce:	4630      	mov	r0, r6
 80060d0:	f7ff ff76 	bl	8005fc0 <__multadd>
 80060d4:	e7ee      	b.n	80060b4 <__s2b+0x68>
 80060d6:	bf00      	nop
 80060d8:	08007aa1 	.word	0x08007aa1
 80060dc:	08007b4b 	.word	0x08007b4b

080060e0 <__hi0bits>:
 80060e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80060e4:	4603      	mov	r3, r0
 80060e6:	bf36      	itet	cc
 80060e8:	0403      	lslcc	r3, r0, #16
 80060ea:	2000      	movcs	r0, #0
 80060ec:	2010      	movcc	r0, #16
 80060ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060f2:	bf3c      	itt	cc
 80060f4:	021b      	lslcc	r3, r3, #8
 80060f6:	3008      	addcc	r0, #8
 80060f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060fc:	bf3c      	itt	cc
 80060fe:	011b      	lslcc	r3, r3, #4
 8006100:	3004      	addcc	r0, #4
 8006102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006106:	bf3c      	itt	cc
 8006108:	009b      	lslcc	r3, r3, #2
 800610a:	3002      	addcc	r0, #2
 800610c:	2b00      	cmp	r3, #0
 800610e:	db05      	blt.n	800611c <__hi0bits+0x3c>
 8006110:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006114:	f100 0001 	add.w	r0, r0, #1
 8006118:	bf08      	it	eq
 800611a:	2020      	moveq	r0, #32
 800611c:	4770      	bx	lr

0800611e <__lo0bits>:
 800611e:	6803      	ldr	r3, [r0, #0]
 8006120:	4602      	mov	r2, r0
 8006122:	f013 0007 	ands.w	r0, r3, #7
 8006126:	d00b      	beq.n	8006140 <__lo0bits+0x22>
 8006128:	07d9      	lsls	r1, r3, #31
 800612a:	d421      	bmi.n	8006170 <__lo0bits+0x52>
 800612c:	0798      	lsls	r0, r3, #30
 800612e:	bf49      	itett	mi
 8006130:	085b      	lsrmi	r3, r3, #1
 8006132:	089b      	lsrpl	r3, r3, #2
 8006134:	2001      	movmi	r0, #1
 8006136:	6013      	strmi	r3, [r2, #0]
 8006138:	bf5c      	itt	pl
 800613a:	6013      	strpl	r3, [r2, #0]
 800613c:	2002      	movpl	r0, #2
 800613e:	4770      	bx	lr
 8006140:	b299      	uxth	r1, r3
 8006142:	b909      	cbnz	r1, 8006148 <__lo0bits+0x2a>
 8006144:	0c1b      	lsrs	r3, r3, #16
 8006146:	2010      	movs	r0, #16
 8006148:	b2d9      	uxtb	r1, r3
 800614a:	b909      	cbnz	r1, 8006150 <__lo0bits+0x32>
 800614c:	3008      	adds	r0, #8
 800614e:	0a1b      	lsrs	r3, r3, #8
 8006150:	0719      	lsls	r1, r3, #28
 8006152:	bf04      	itt	eq
 8006154:	091b      	lsreq	r3, r3, #4
 8006156:	3004      	addeq	r0, #4
 8006158:	0799      	lsls	r1, r3, #30
 800615a:	bf04      	itt	eq
 800615c:	089b      	lsreq	r3, r3, #2
 800615e:	3002      	addeq	r0, #2
 8006160:	07d9      	lsls	r1, r3, #31
 8006162:	d403      	bmi.n	800616c <__lo0bits+0x4e>
 8006164:	085b      	lsrs	r3, r3, #1
 8006166:	f100 0001 	add.w	r0, r0, #1
 800616a:	d003      	beq.n	8006174 <__lo0bits+0x56>
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	4770      	bx	lr
 8006170:	2000      	movs	r0, #0
 8006172:	4770      	bx	lr
 8006174:	2020      	movs	r0, #32
 8006176:	4770      	bx	lr

08006178 <__i2b>:
 8006178:	b510      	push	{r4, lr}
 800617a:	460c      	mov	r4, r1
 800617c:	2101      	movs	r1, #1
 800617e:	f7ff febd 	bl	8005efc <_Balloc>
 8006182:	4602      	mov	r2, r0
 8006184:	b928      	cbnz	r0, 8006192 <__i2b+0x1a>
 8006186:	4b05      	ldr	r3, [pc, #20]	@ (800619c <__i2b+0x24>)
 8006188:	4805      	ldr	r0, [pc, #20]	@ (80061a0 <__i2b+0x28>)
 800618a:	f240 1145 	movw	r1, #325	@ 0x145
 800618e:	f000 fb7d 	bl	800688c <__assert_func>
 8006192:	2301      	movs	r3, #1
 8006194:	6144      	str	r4, [r0, #20]
 8006196:	6103      	str	r3, [r0, #16]
 8006198:	bd10      	pop	{r4, pc}
 800619a:	bf00      	nop
 800619c:	08007aa1 	.word	0x08007aa1
 80061a0:	08007b4b 	.word	0x08007b4b

080061a4 <__multiply>:
 80061a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a8:	4614      	mov	r4, r2
 80061aa:	690a      	ldr	r2, [r1, #16]
 80061ac:	6923      	ldr	r3, [r4, #16]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	bfa8      	it	ge
 80061b2:	4623      	movge	r3, r4
 80061b4:	460f      	mov	r7, r1
 80061b6:	bfa4      	itt	ge
 80061b8:	460c      	movge	r4, r1
 80061ba:	461f      	movge	r7, r3
 80061bc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80061c0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80061c4:	68a3      	ldr	r3, [r4, #8]
 80061c6:	6861      	ldr	r1, [r4, #4]
 80061c8:	eb0a 0609 	add.w	r6, sl, r9
 80061cc:	42b3      	cmp	r3, r6
 80061ce:	b085      	sub	sp, #20
 80061d0:	bfb8      	it	lt
 80061d2:	3101      	addlt	r1, #1
 80061d4:	f7ff fe92 	bl	8005efc <_Balloc>
 80061d8:	b930      	cbnz	r0, 80061e8 <__multiply+0x44>
 80061da:	4602      	mov	r2, r0
 80061dc:	4b44      	ldr	r3, [pc, #272]	@ (80062f0 <__multiply+0x14c>)
 80061de:	4845      	ldr	r0, [pc, #276]	@ (80062f4 <__multiply+0x150>)
 80061e0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80061e4:	f000 fb52 	bl	800688c <__assert_func>
 80061e8:	f100 0514 	add.w	r5, r0, #20
 80061ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80061f0:	462b      	mov	r3, r5
 80061f2:	2200      	movs	r2, #0
 80061f4:	4543      	cmp	r3, r8
 80061f6:	d321      	bcc.n	800623c <__multiply+0x98>
 80061f8:	f107 0114 	add.w	r1, r7, #20
 80061fc:	f104 0214 	add.w	r2, r4, #20
 8006200:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006204:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006208:	9302      	str	r3, [sp, #8]
 800620a:	1b13      	subs	r3, r2, r4
 800620c:	3b15      	subs	r3, #21
 800620e:	f023 0303 	bic.w	r3, r3, #3
 8006212:	3304      	adds	r3, #4
 8006214:	f104 0715 	add.w	r7, r4, #21
 8006218:	42ba      	cmp	r2, r7
 800621a:	bf38      	it	cc
 800621c:	2304      	movcc	r3, #4
 800621e:	9301      	str	r3, [sp, #4]
 8006220:	9b02      	ldr	r3, [sp, #8]
 8006222:	9103      	str	r1, [sp, #12]
 8006224:	428b      	cmp	r3, r1
 8006226:	d80c      	bhi.n	8006242 <__multiply+0x9e>
 8006228:	2e00      	cmp	r6, #0
 800622a:	dd03      	ble.n	8006234 <__multiply+0x90>
 800622c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006230:	2b00      	cmp	r3, #0
 8006232:	d05b      	beq.n	80062ec <__multiply+0x148>
 8006234:	6106      	str	r6, [r0, #16]
 8006236:	b005      	add	sp, #20
 8006238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800623c:	f843 2b04 	str.w	r2, [r3], #4
 8006240:	e7d8      	b.n	80061f4 <__multiply+0x50>
 8006242:	f8b1 a000 	ldrh.w	sl, [r1]
 8006246:	f1ba 0f00 	cmp.w	sl, #0
 800624a:	d024      	beq.n	8006296 <__multiply+0xf2>
 800624c:	f104 0e14 	add.w	lr, r4, #20
 8006250:	46a9      	mov	r9, r5
 8006252:	f04f 0c00 	mov.w	ip, #0
 8006256:	f85e 7b04 	ldr.w	r7, [lr], #4
 800625a:	f8d9 3000 	ldr.w	r3, [r9]
 800625e:	fa1f fb87 	uxth.w	fp, r7
 8006262:	b29b      	uxth	r3, r3
 8006264:	fb0a 330b 	mla	r3, sl, fp, r3
 8006268:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800626c:	f8d9 7000 	ldr.w	r7, [r9]
 8006270:	4463      	add	r3, ip
 8006272:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006276:	fb0a c70b 	mla	r7, sl, fp, ip
 800627a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800627e:	b29b      	uxth	r3, r3
 8006280:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006284:	4572      	cmp	r2, lr
 8006286:	f849 3b04 	str.w	r3, [r9], #4
 800628a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800628e:	d8e2      	bhi.n	8006256 <__multiply+0xb2>
 8006290:	9b01      	ldr	r3, [sp, #4]
 8006292:	f845 c003 	str.w	ip, [r5, r3]
 8006296:	9b03      	ldr	r3, [sp, #12]
 8006298:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800629c:	3104      	adds	r1, #4
 800629e:	f1b9 0f00 	cmp.w	r9, #0
 80062a2:	d021      	beq.n	80062e8 <__multiply+0x144>
 80062a4:	682b      	ldr	r3, [r5, #0]
 80062a6:	f104 0c14 	add.w	ip, r4, #20
 80062aa:	46ae      	mov	lr, r5
 80062ac:	f04f 0a00 	mov.w	sl, #0
 80062b0:	f8bc b000 	ldrh.w	fp, [ip]
 80062b4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80062b8:	fb09 770b 	mla	r7, r9, fp, r7
 80062bc:	4457      	add	r7, sl
 80062be:	b29b      	uxth	r3, r3
 80062c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80062c4:	f84e 3b04 	str.w	r3, [lr], #4
 80062c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80062cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80062d0:	f8be 3000 	ldrh.w	r3, [lr]
 80062d4:	fb09 330a 	mla	r3, r9, sl, r3
 80062d8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80062dc:	4562      	cmp	r2, ip
 80062de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80062e2:	d8e5      	bhi.n	80062b0 <__multiply+0x10c>
 80062e4:	9f01      	ldr	r7, [sp, #4]
 80062e6:	51eb      	str	r3, [r5, r7]
 80062e8:	3504      	adds	r5, #4
 80062ea:	e799      	b.n	8006220 <__multiply+0x7c>
 80062ec:	3e01      	subs	r6, #1
 80062ee:	e79b      	b.n	8006228 <__multiply+0x84>
 80062f0:	08007aa1 	.word	0x08007aa1
 80062f4:	08007b4b 	.word	0x08007b4b

080062f8 <__pow5mult>:
 80062f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062fc:	4615      	mov	r5, r2
 80062fe:	f012 0203 	ands.w	r2, r2, #3
 8006302:	4607      	mov	r7, r0
 8006304:	460e      	mov	r6, r1
 8006306:	d007      	beq.n	8006318 <__pow5mult+0x20>
 8006308:	4c25      	ldr	r4, [pc, #148]	@ (80063a0 <__pow5mult+0xa8>)
 800630a:	3a01      	subs	r2, #1
 800630c:	2300      	movs	r3, #0
 800630e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006312:	f7ff fe55 	bl	8005fc0 <__multadd>
 8006316:	4606      	mov	r6, r0
 8006318:	10ad      	asrs	r5, r5, #2
 800631a:	d03d      	beq.n	8006398 <__pow5mult+0xa0>
 800631c:	69fc      	ldr	r4, [r7, #28]
 800631e:	b97c      	cbnz	r4, 8006340 <__pow5mult+0x48>
 8006320:	2010      	movs	r0, #16
 8006322:	f7fd ff49 	bl	80041b8 <malloc>
 8006326:	4602      	mov	r2, r0
 8006328:	61f8      	str	r0, [r7, #28]
 800632a:	b928      	cbnz	r0, 8006338 <__pow5mult+0x40>
 800632c:	4b1d      	ldr	r3, [pc, #116]	@ (80063a4 <__pow5mult+0xac>)
 800632e:	481e      	ldr	r0, [pc, #120]	@ (80063a8 <__pow5mult+0xb0>)
 8006330:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006334:	f000 faaa 	bl	800688c <__assert_func>
 8006338:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800633c:	6004      	str	r4, [r0, #0]
 800633e:	60c4      	str	r4, [r0, #12]
 8006340:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006344:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006348:	b94c      	cbnz	r4, 800635e <__pow5mult+0x66>
 800634a:	f240 2171 	movw	r1, #625	@ 0x271
 800634e:	4638      	mov	r0, r7
 8006350:	f7ff ff12 	bl	8006178 <__i2b>
 8006354:	2300      	movs	r3, #0
 8006356:	f8c8 0008 	str.w	r0, [r8, #8]
 800635a:	4604      	mov	r4, r0
 800635c:	6003      	str	r3, [r0, #0]
 800635e:	f04f 0900 	mov.w	r9, #0
 8006362:	07eb      	lsls	r3, r5, #31
 8006364:	d50a      	bpl.n	800637c <__pow5mult+0x84>
 8006366:	4631      	mov	r1, r6
 8006368:	4622      	mov	r2, r4
 800636a:	4638      	mov	r0, r7
 800636c:	f7ff ff1a 	bl	80061a4 <__multiply>
 8006370:	4631      	mov	r1, r6
 8006372:	4680      	mov	r8, r0
 8006374:	4638      	mov	r0, r7
 8006376:	f7ff fe01 	bl	8005f7c <_Bfree>
 800637a:	4646      	mov	r6, r8
 800637c:	106d      	asrs	r5, r5, #1
 800637e:	d00b      	beq.n	8006398 <__pow5mult+0xa0>
 8006380:	6820      	ldr	r0, [r4, #0]
 8006382:	b938      	cbnz	r0, 8006394 <__pow5mult+0x9c>
 8006384:	4622      	mov	r2, r4
 8006386:	4621      	mov	r1, r4
 8006388:	4638      	mov	r0, r7
 800638a:	f7ff ff0b 	bl	80061a4 <__multiply>
 800638e:	6020      	str	r0, [r4, #0]
 8006390:	f8c0 9000 	str.w	r9, [r0]
 8006394:	4604      	mov	r4, r0
 8006396:	e7e4      	b.n	8006362 <__pow5mult+0x6a>
 8006398:	4630      	mov	r0, r6
 800639a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800639e:	bf00      	nop
 80063a0:	08007ba4 	.word	0x08007ba4
 80063a4:	08007b34 	.word	0x08007b34
 80063a8:	08007b4b 	.word	0x08007b4b

080063ac <__lshift>:
 80063ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b0:	460c      	mov	r4, r1
 80063b2:	6849      	ldr	r1, [r1, #4]
 80063b4:	6923      	ldr	r3, [r4, #16]
 80063b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80063ba:	68a3      	ldr	r3, [r4, #8]
 80063bc:	4607      	mov	r7, r0
 80063be:	4691      	mov	r9, r2
 80063c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80063c4:	f108 0601 	add.w	r6, r8, #1
 80063c8:	42b3      	cmp	r3, r6
 80063ca:	db0b      	blt.n	80063e4 <__lshift+0x38>
 80063cc:	4638      	mov	r0, r7
 80063ce:	f7ff fd95 	bl	8005efc <_Balloc>
 80063d2:	4605      	mov	r5, r0
 80063d4:	b948      	cbnz	r0, 80063ea <__lshift+0x3e>
 80063d6:	4602      	mov	r2, r0
 80063d8:	4b28      	ldr	r3, [pc, #160]	@ (800647c <__lshift+0xd0>)
 80063da:	4829      	ldr	r0, [pc, #164]	@ (8006480 <__lshift+0xd4>)
 80063dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80063e0:	f000 fa54 	bl	800688c <__assert_func>
 80063e4:	3101      	adds	r1, #1
 80063e6:	005b      	lsls	r3, r3, #1
 80063e8:	e7ee      	b.n	80063c8 <__lshift+0x1c>
 80063ea:	2300      	movs	r3, #0
 80063ec:	f100 0114 	add.w	r1, r0, #20
 80063f0:	f100 0210 	add.w	r2, r0, #16
 80063f4:	4618      	mov	r0, r3
 80063f6:	4553      	cmp	r3, sl
 80063f8:	db33      	blt.n	8006462 <__lshift+0xb6>
 80063fa:	6920      	ldr	r0, [r4, #16]
 80063fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006400:	f104 0314 	add.w	r3, r4, #20
 8006404:	f019 091f 	ands.w	r9, r9, #31
 8006408:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800640c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006410:	d02b      	beq.n	800646a <__lshift+0xbe>
 8006412:	f1c9 0e20 	rsb	lr, r9, #32
 8006416:	468a      	mov	sl, r1
 8006418:	2200      	movs	r2, #0
 800641a:	6818      	ldr	r0, [r3, #0]
 800641c:	fa00 f009 	lsl.w	r0, r0, r9
 8006420:	4310      	orrs	r0, r2
 8006422:	f84a 0b04 	str.w	r0, [sl], #4
 8006426:	f853 2b04 	ldr.w	r2, [r3], #4
 800642a:	459c      	cmp	ip, r3
 800642c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006430:	d8f3      	bhi.n	800641a <__lshift+0x6e>
 8006432:	ebac 0304 	sub.w	r3, ip, r4
 8006436:	3b15      	subs	r3, #21
 8006438:	f023 0303 	bic.w	r3, r3, #3
 800643c:	3304      	adds	r3, #4
 800643e:	f104 0015 	add.w	r0, r4, #21
 8006442:	4584      	cmp	ip, r0
 8006444:	bf38      	it	cc
 8006446:	2304      	movcc	r3, #4
 8006448:	50ca      	str	r2, [r1, r3]
 800644a:	b10a      	cbz	r2, 8006450 <__lshift+0xa4>
 800644c:	f108 0602 	add.w	r6, r8, #2
 8006450:	3e01      	subs	r6, #1
 8006452:	4638      	mov	r0, r7
 8006454:	612e      	str	r6, [r5, #16]
 8006456:	4621      	mov	r1, r4
 8006458:	f7ff fd90 	bl	8005f7c <_Bfree>
 800645c:	4628      	mov	r0, r5
 800645e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006462:	f842 0f04 	str.w	r0, [r2, #4]!
 8006466:	3301      	adds	r3, #1
 8006468:	e7c5      	b.n	80063f6 <__lshift+0x4a>
 800646a:	3904      	subs	r1, #4
 800646c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006470:	f841 2f04 	str.w	r2, [r1, #4]!
 8006474:	459c      	cmp	ip, r3
 8006476:	d8f9      	bhi.n	800646c <__lshift+0xc0>
 8006478:	e7ea      	b.n	8006450 <__lshift+0xa4>
 800647a:	bf00      	nop
 800647c:	08007aa1 	.word	0x08007aa1
 8006480:	08007b4b 	.word	0x08007b4b

08006484 <__mcmp>:
 8006484:	690a      	ldr	r2, [r1, #16]
 8006486:	4603      	mov	r3, r0
 8006488:	6900      	ldr	r0, [r0, #16]
 800648a:	1a80      	subs	r0, r0, r2
 800648c:	b530      	push	{r4, r5, lr}
 800648e:	d10e      	bne.n	80064ae <__mcmp+0x2a>
 8006490:	3314      	adds	r3, #20
 8006492:	3114      	adds	r1, #20
 8006494:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006498:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800649c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80064a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80064a4:	4295      	cmp	r5, r2
 80064a6:	d003      	beq.n	80064b0 <__mcmp+0x2c>
 80064a8:	d205      	bcs.n	80064b6 <__mcmp+0x32>
 80064aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80064ae:	bd30      	pop	{r4, r5, pc}
 80064b0:	42a3      	cmp	r3, r4
 80064b2:	d3f3      	bcc.n	800649c <__mcmp+0x18>
 80064b4:	e7fb      	b.n	80064ae <__mcmp+0x2a>
 80064b6:	2001      	movs	r0, #1
 80064b8:	e7f9      	b.n	80064ae <__mcmp+0x2a>
	...

080064bc <__mdiff>:
 80064bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064c0:	4689      	mov	r9, r1
 80064c2:	4606      	mov	r6, r0
 80064c4:	4611      	mov	r1, r2
 80064c6:	4648      	mov	r0, r9
 80064c8:	4614      	mov	r4, r2
 80064ca:	f7ff ffdb 	bl	8006484 <__mcmp>
 80064ce:	1e05      	subs	r5, r0, #0
 80064d0:	d112      	bne.n	80064f8 <__mdiff+0x3c>
 80064d2:	4629      	mov	r1, r5
 80064d4:	4630      	mov	r0, r6
 80064d6:	f7ff fd11 	bl	8005efc <_Balloc>
 80064da:	4602      	mov	r2, r0
 80064dc:	b928      	cbnz	r0, 80064ea <__mdiff+0x2e>
 80064de:	4b3f      	ldr	r3, [pc, #252]	@ (80065dc <__mdiff+0x120>)
 80064e0:	f240 2137 	movw	r1, #567	@ 0x237
 80064e4:	483e      	ldr	r0, [pc, #248]	@ (80065e0 <__mdiff+0x124>)
 80064e6:	f000 f9d1 	bl	800688c <__assert_func>
 80064ea:	2301      	movs	r3, #1
 80064ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80064f0:	4610      	mov	r0, r2
 80064f2:	b003      	add	sp, #12
 80064f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064f8:	bfbc      	itt	lt
 80064fa:	464b      	movlt	r3, r9
 80064fc:	46a1      	movlt	r9, r4
 80064fe:	4630      	mov	r0, r6
 8006500:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006504:	bfba      	itte	lt
 8006506:	461c      	movlt	r4, r3
 8006508:	2501      	movlt	r5, #1
 800650a:	2500      	movge	r5, #0
 800650c:	f7ff fcf6 	bl	8005efc <_Balloc>
 8006510:	4602      	mov	r2, r0
 8006512:	b918      	cbnz	r0, 800651c <__mdiff+0x60>
 8006514:	4b31      	ldr	r3, [pc, #196]	@ (80065dc <__mdiff+0x120>)
 8006516:	f240 2145 	movw	r1, #581	@ 0x245
 800651a:	e7e3      	b.n	80064e4 <__mdiff+0x28>
 800651c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006520:	6926      	ldr	r6, [r4, #16]
 8006522:	60c5      	str	r5, [r0, #12]
 8006524:	f109 0310 	add.w	r3, r9, #16
 8006528:	f109 0514 	add.w	r5, r9, #20
 800652c:	f104 0e14 	add.w	lr, r4, #20
 8006530:	f100 0b14 	add.w	fp, r0, #20
 8006534:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006538:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800653c:	9301      	str	r3, [sp, #4]
 800653e:	46d9      	mov	r9, fp
 8006540:	f04f 0c00 	mov.w	ip, #0
 8006544:	9b01      	ldr	r3, [sp, #4]
 8006546:	f85e 0b04 	ldr.w	r0, [lr], #4
 800654a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800654e:	9301      	str	r3, [sp, #4]
 8006550:	fa1f f38a 	uxth.w	r3, sl
 8006554:	4619      	mov	r1, r3
 8006556:	b283      	uxth	r3, r0
 8006558:	1acb      	subs	r3, r1, r3
 800655a:	0c00      	lsrs	r0, r0, #16
 800655c:	4463      	add	r3, ip
 800655e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006562:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006566:	b29b      	uxth	r3, r3
 8006568:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800656c:	4576      	cmp	r6, lr
 800656e:	f849 3b04 	str.w	r3, [r9], #4
 8006572:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006576:	d8e5      	bhi.n	8006544 <__mdiff+0x88>
 8006578:	1b33      	subs	r3, r6, r4
 800657a:	3b15      	subs	r3, #21
 800657c:	f023 0303 	bic.w	r3, r3, #3
 8006580:	3415      	adds	r4, #21
 8006582:	3304      	adds	r3, #4
 8006584:	42a6      	cmp	r6, r4
 8006586:	bf38      	it	cc
 8006588:	2304      	movcc	r3, #4
 800658a:	441d      	add	r5, r3
 800658c:	445b      	add	r3, fp
 800658e:	461e      	mov	r6, r3
 8006590:	462c      	mov	r4, r5
 8006592:	4544      	cmp	r4, r8
 8006594:	d30e      	bcc.n	80065b4 <__mdiff+0xf8>
 8006596:	f108 0103 	add.w	r1, r8, #3
 800659a:	1b49      	subs	r1, r1, r5
 800659c:	f021 0103 	bic.w	r1, r1, #3
 80065a0:	3d03      	subs	r5, #3
 80065a2:	45a8      	cmp	r8, r5
 80065a4:	bf38      	it	cc
 80065a6:	2100      	movcc	r1, #0
 80065a8:	440b      	add	r3, r1
 80065aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80065ae:	b191      	cbz	r1, 80065d6 <__mdiff+0x11a>
 80065b0:	6117      	str	r7, [r2, #16]
 80065b2:	e79d      	b.n	80064f0 <__mdiff+0x34>
 80065b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80065b8:	46e6      	mov	lr, ip
 80065ba:	0c08      	lsrs	r0, r1, #16
 80065bc:	fa1c fc81 	uxtah	ip, ip, r1
 80065c0:	4471      	add	r1, lr
 80065c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80065c6:	b289      	uxth	r1, r1
 80065c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80065cc:	f846 1b04 	str.w	r1, [r6], #4
 80065d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80065d4:	e7dd      	b.n	8006592 <__mdiff+0xd6>
 80065d6:	3f01      	subs	r7, #1
 80065d8:	e7e7      	b.n	80065aa <__mdiff+0xee>
 80065da:	bf00      	nop
 80065dc:	08007aa1 	.word	0x08007aa1
 80065e0:	08007b4b 	.word	0x08007b4b

080065e4 <__ulp>:
 80065e4:	b082      	sub	sp, #8
 80065e6:	ed8d 0b00 	vstr	d0, [sp]
 80065ea:	9a01      	ldr	r2, [sp, #4]
 80065ec:	4b0f      	ldr	r3, [pc, #60]	@ (800662c <__ulp+0x48>)
 80065ee:	4013      	ands	r3, r2
 80065f0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	dc08      	bgt.n	800660a <__ulp+0x26>
 80065f8:	425b      	negs	r3, r3
 80065fa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80065fe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006602:	da04      	bge.n	800660e <__ulp+0x2a>
 8006604:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006608:	4113      	asrs	r3, r2
 800660a:	2200      	movs	r2, #0
 800660c:	e008      	b.n	8006620 <__ulp+0x3c>
 800660e:	f1a2 0314 	sub.w	r3, r2, #20
 8006612:	2b1e      	cmp	r3, #30
 8006614:	bfda      	itte	le
 8006616:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800661a:	40da      	lsrle	r2, r3
 800661c:	2201      	movgt	r2, #1
 800661e:	2300      	movs	r3, #0
 8006620:	4619      	mov	r1, r3
 8006622:	4610      	mov	r0, r2
 8006624:	ec41 0b10 	vmov	d0, r0, r1
 8006628:	b002      	add	sp, #8
 800662a:	4770      	bx	lr
 800662c:	7ff00000 	.word	0x7ff00000

08006630 <__b2d>:
 8006630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006634:	6906      	ldr	r6, [r0, #16]
 8006636:	f100 0814 	add.w	r8, r0, #20
 800663a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800663e:	1f37      	subs	r7, r6, #4
 8006640:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006644:	4610      	mov	r0, r2
 8006646:	f7ff fd4b 	bl	80060e0 <__hi0bits>
 800664a:	f1c0 0320 	rsb	r3, r0, #32
 800664e:	280a      	cmp	r0, #10
 8006650:	600b      	str	r3, [r1, #0]
 8006652:	491b      	ldr	r1, [pc, #108]	@ (80066c0 <__b2d+0x90>)
 8006654:	dc15      	bgt.n	8006682 <__b2d+0x52>
 8006656:	f1c0 0c0b 	rsb	ip, r0, #11
 800665a:	fa22 f30c 	lsr.w	r3, r2, ip
 800665e:	45b8      	cmp	r8, r7
 8006660:	ea43 0501 	orr.w	r5, r3, r1
 8006664:	bf34      	ite	cc
 8006666:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800666a:	2300      	movcs	r3, #0
 800666c:	3015      	adds	r0, #21
 800666e:	fa02 f000 	lsl.w	r0, r2, r0
 8006672:	fa23 f30c 	lsr.w	r3, r3, ip
 8006676:	4303      	orrs	r3, r0
 8006678:	461c      	mov	r4, r3
 800667a:	ec45 4b10 	vmov	d0, r4, r5
 800667e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006682:	45b8      	cmp	r8, r7
 8006684:	bf3a      	itte	cc
 8006686:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800668a:	f1a6 0708 	subcc.w	r7, r6, #8
 800668e:	2300      	movcs	r3, #0
 8006690:	380b      	subs	r0, #11
 8006692:	d012      	beq.n	80066ba <__b2d+0x8a>
 8006694:	f1c0 0120 	rsb	r1, r0, #32
 8006698:	fa23 f401 	lsr.w	r4, r3, r1
 800669c:	4082      	lsls	r2, r0
 800669e:	4322      	orrs	r2, r4
 80066a0:	4547      	cmp	r7, r8
 80066a2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80066a6:	bf8c      	ite	hi
 80066a8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80066ac:	2200      	movls	r2, #0
 80066ae:	4083      	lsls	r3, r0
 80066b0:	40ca      	lsrs	r2, r1
 80066b2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80066b6:	4313      	orrs	r3, r2
 80066b8:	e7de      	b.n	8006678 <__b2d+0x48>
 80066ba:	ea42 0501 	orr.w	r5, r2, r1
 80066be:	e7db      	b.n	8006678 <__b2d+0x48>
 80066c0:	3ff00000 	.word	0x3ff00000

080066c4 <__d2b>:
 80066c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80066c8:	460f      	mov	r7, r1
 80066ca:	2101      	movs	r1, #1
 80066cc:	ec59 8b10 	vmov	r8, r9, d0
 80066d0:	4616      	mov	r6, r2
 80066d2:	f7ff fc13 	bl	8005efc <_Balloc>
 80066d6:	4604      	mov	r4, r0
 80066d8:	b930      	cbnz	r0, 80066e8 <__d2b+0x24>
 80066da:	4602      	mov	r2, r0
 80066dc:	4b23      	ldr	r3, [pc, #140]	@ (800676c <__d2b+0xa8>)
 80066de:	4824      	ldr	r0, [pc, #144]	@ (8006770 <__d2b+0xac>)
 80066e0:	f240 310f 	movw	r1, #783	@ 0x30f
 80066e4:	f000 f8d2 	bl	800688c <__assert_func>
 80066e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80066ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80066f0:	b10d      	cbz	r5, 80066f6 <__d2b+0x32>
 80066f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066f6:	9301      	str	r3, [sp, #4]
 80066f8:	f1b8 0300 	subs.w	r3, r8, #0
 80066fc:	d023      	beq.n	8006746 <__d2b+0x82>
 80066fe:	4668      	mov	r0, sp
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	f7ff fd0c 	bl	800611e <__lo0bits>
 8006706:	e9dd 1200 	ldrd	r1, r2, [sp]
 800670a:	b1d0      	cbz	r0, 8006742 <__d2b+0x7e>
 800670c:	f1c0 0320 	rsb	r3, r0, #32
 8006710:	fa02 f303 	lsl.w	r3, r2, r3
 8006714:	430b      	orrs	r3, r1
 8006716:	40c2      	lsrs	r2, r0
 8006718:	6163      	str	r3, [r4, #20]
 800671a:	9201      	str	r2, [sp, #4]
 800671c:	9b01      	ldr	r3, [sp, #4]
 800671e:	61a3      	str	r3, [r4, #24]
 8006720:	2b00      	cmp	r3, #0
 8006722:	bf0c      	ite	eq
 8006724:	2201      	moveq	r2, #1
 8006726:	2202      	movne	r2, #2
 8006728:	6122      	str	r2, [r4, #16]
 800672a:	b1a5      	cbz	r5, 8006756 <__d2b+0x92>
 800672c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006730:	4405      	add	r5, r0
 8006732:	603d      	str	r5, [r7, #0]
 8006734:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006738:	6030      	str	r0, [r6, #0]
 800673a:	4620      	mov	r0, r4
 800673c:	b003      	add	sp, #12
 800673e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006742:	6161      	str	r1, [r4, #20]
 8006744:	e7ea      	b.n	800671c <__d2b+0x58>
 8006746:	a801      	add	r0, sp, #4
 8006748:	f7ff fce9 	bl	800611e <__lo0bits>
 800674c:	9b01      	ldr	r3, [sp, #4]
 800674e:	6163      	str	r3, [r4, #20]
 8006750:	3020      	adds	r0, #32
 8006752:	2201      	movs	r2, #1
 8006754:	e7e8      	b.n	8006728 <__d2b+0x64>
 8006756:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800675a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800675e:	6038      	str	r0, [r7, #0]
 8006760:	6918      	ldr	r0, [r3, #16]
 8006762:	f7ff fcbd 	bl	80060e0 <__hi0bits>
 8006766:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800676a:	e7e5      	b.n	8006738 <__d2b+0x74>
 800676c:	08007aa1 	.word	0x08007aa1
 8006770:	08007b4b 	.word	0x08007b4b

08006774 <__ratio>:
 8006774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006778:	b085      	sub	sp, #20
 800677a:	e9cd 1000 	strd	r1, r0, [sp]
 800677e:	a902      	add	r1, sp, #8
 8006780:	f7ff ff56 	bl	8006630 <__b2d>
 8006784:	9800      	ldr	r0, [sp, #0]
 8006786:	a903      	add	r1, sp, #12
 8006788:	ec55 4b10 	vmov	r4, r5, d0
 800678c:	f7ff ff50 	bl	8006630 <__b2d>
 8006790:	9b01      	ldr	r3, [sp, #4]
 8006792:	6919      	ldr	r1, [r3, #16]
 8006794:	9b00      	ldr	r3, [sp, #0]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	1ac9      	subs	r1, r1, r3
 800679a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800679e:	1a9b      	subs	r3, r3, r2
 80067a0:	ec5b ab10 	vmov	sl, fp, d0
 80067a4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	bfce      	itee	gt
 80067ac:	462a      	movgt	r2, r5
 80067ae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80067b2:	465a      	movle	r2, fp
 80067b4:	462f      	mov	r7, r5
 80067b6:	46d9      	mov	r9, fp
 80067b8:	bfcc      	ite	gt
 80067ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80067be:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80067c2:	464b      	mov	r3, r9
 80067c4:	4652      	mov	r2, sl
 80067c6:	4620      	mov	r0, r4
 80067c8:	4639      	mov	r1, r7
 80067ca:	f7fa f86f 	bl	80008ac <__aeabi_ddiv>
 80067ce:	ec41 0b10 	vmov	d0, r0, r1
 80067d2:	b005      	add	sp, #20
 80067d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080067d8 <__copybits>:
 80067d8:	3901      	subs	r1, #1
 80067da:	b570      	push	{r4, r5, r6, lr}
 80067dc:	1149      	asrs	r1, r1, #5
 80067de:	6914      	ldr	r4, [r2, #16]
 80067e0:	3101      	adds	r1, #1
 80067e2:	f102 0314 	add.w	r3, r2, #20
 80067e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80067ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80067ee:	1f05      	subs	r5, r0, #4
 80067f0:	42a3      	cmp	r3, r4
 80067f2:	d30c      	bcc.n	800680e <__copybits+0x36>
 80067f4:	1aa3      	subs	r3, r4, r2
 80067f6:	3b11      	subs	r3, #17
 80067f8:	f023 0303 	bic.w	r3, r3, #3
 80067fc:	3211      	adds	r2, #17
 80067fe:	42a2      	cmp	r2, r4
 8006800:	bf88      	it	hi
 8006802:	2300      	movhi	r3, #0
 8006804:	4418      	add	r0, r3
 8006806:	2300      	movs	r3, #0
 8006808:	4288      	cmp	r0, r1
 800680a:	d305      	bcc.n	8006818 <__copybits+0x40>
 800680c:	bd70      	pop	{r4, r5, r6, pc}
 800680e:	f853 6b04 	ldr.w	r6, [r3], #4
 8006812:	f845 6f04 	str.w	r6, [r5, #4]!
 8006816:	e7eb      	b.n	80067f0 <__copybits+0x18>
 8006818:	f840 3b04 	str.w	r3, [r0], #4
 800681c:	e7f4      	b.n	8006808 <__copybits+0x30>

0800681e <__any_on>:
 800681e:	f100 0214 	add.w	r2, r0, #20
 8006822:	6900      	ldr	r0, [r0, #16]
 8006824:	114b      	asrs	r3, r1, #5
 8006826:	4298      	cmp	r0, r3
 8006828:	b510      	push	{r4, lr}
 800682a:	db11      	blt.n	8006850 <__any_on+0x32>
 800682c:	dd0a      	ble.n	8006844 <__any_on+0x26>
 800682e:	f011 011f 	ands.w	r1, r1, #31
 8006832:	d007      	beq.n	8006844 <__any_on+0x26>
 8006834:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006838:	fa24 f001 	lsr.w	r0, r4, r1
 800683c:	fa00 f101 	lsl.w	r1, r0, r1
 8006840:	428c      	cmp	r4, r1
 8006842:	d10b      	bne.n	800685c <__any_on+0x3e>
 8006844:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006848:	4293      	cmp	r3, r2
 800684a:	d803      	bhi.n	8006854 <__any_on+0x36>
 800684c:	2000      	movs	r0, #0
 800684e:	bd10      	pop	{r4, pc}
 8006850:	4603      	mov	r3, r0
 8006852:	e7f7      	b.n	8006844 <__any_on+0x26>
 8006854:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006858:	2900      	cmp	r1, #0
 800685a:	d0f5      	beq.n	8006848 <__any_on+0x2a>
 800685c:	2001      	movs	r0, #1
 800685e:	e7f6      	b.n	800684e <__any_on+0x30>

08006860 <_malloc_usable_size_r>:
 8006860:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006864:	1f18      	subs	r0, r3, #4
 8006866:	2b00      	cmp	r3, #0
 8006868:	bfbc      	itt	lt
 800686a:	580b      	ldrlt	r3, [r1, r0]
 800686c:	18c0      	addlt	r0, r0, r3
 800686e:	4770      	bx	lr

08006870 <__ascii_wctomb>:
 8006870:	4603      	mov	r3, r0
 8006872:	4608      	mov	r0, r1
 8006874:	b141      	cbz	r1, 8006888 <__ascii_wctomb+0x18>
 8006876:	2aff      	cmp	r2, #255	@ 0xff
 8006878:	d904      	bls.n	8006884 <__ascii_wctomb+0x14>
 800687a:	228a      	movs	r2, #138	@ 0x8a
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006882:	4770      	bx	lr
 8006884:	700a      	strb	r2, [r1, #0]
 8006886:	2001      	movs	r0, #1
 8006888:	4770      	bx	lr
	...

0800688c <__assert_func>:
 800688c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800688e:	4614      	mov	r4, r2
 8006890:	461a      	mov	r2, r3
 8006892:	4b09      	ldr	r3, [pc, #36]	@ (80068b8 <__assert_func+0x2c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4605      	mov	r5, r0
 8006898:	68d8      	ldr	r0, [r3, #12]
 800689a:	b954      	cbnz	r4, 80068b2 <__assert_func+0x26>
 800689c:	4b07      	ldr	r3, [pc, #28]	@ (80068bc <__assert_func+0x30>)
 800689e:	461c      	mov	r4, r3
 80068a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80068a4:	9100      	str	r1, [sp, #0]
 80068a6:	462b      	mov	r3, r5
 80068a8:	4905      	ldr	r1, [pc, #20]	@ (80068c0 <__assert_func+0x34>)
 80068aa:	f000 f821 	bl	80068f0 <fiprintf>
 80068ae:	f000 f831 	bl	8006914 <abort>
 80068b2:	4b04      	ldr	r3, [pc, #16]	@ (80068c4 <__assert_func+0x38>)
 80068b4:	e7f4      	b.n	80068a0 <__assert_func+0x14>
 80068b6:	bf00      	nop
 80068b8:	20000194 	.word	0x20000194
 80068bc:	08007cdb 	.word	0x08007cdb
 80068c0:	08007cad 	.word	0x08007cad
 80068c4:	08007ca0 	.word	0x08007ca0

080068c8 <_calloc_r>:
 80068c8:	b570      	push	{r4, r5, r6, lr}
 80068ca:	fba1 5402 	umull	r5, r4, r1, r2
 80068ce:	b93c      	cbnz	r4, 80068e0 <_calloc_r+0x18>
 80068d0:	4629      	mov	r1, r5
 80068d2:	f7fd fca3 	bl	800421c <_malloc_r>
 80068d6:	4606      	mov	r6, r0
 80068d8:	b928      	cbnz	r0, 80068e6 <_calloc_r+0x1e>
 80068da:	2600      	movs	r6, #0
 80068dc:	4630      	mov	r0, r6
 80068de:	bd70      	pop	{r4, r5, r6, pc}
 80068e0:	220c      	movs	r2, #12
 80068e2:	6002      	str	r2, [r0, #0]
 80068e4:	e7f9      	b.n	80068da <_calloc_r+0x12>
 80068e6:	462a      	mov	r2, r5
 80068e8:	4621      	mov	r1, r4
 80068ea:	f7fe fc94 	bl	8005216 <memset>
 80068ee:	e7f5      	b.n	80068dc <_calloc_r+0x14>

080068f0 <fiprintf>:
 80068f0:	b40e      	push	{r1, r2, r3}
 80068f2:	b503      	push	{r0, r1, lr}
 80068f4:	4601      	mov	r1, r0
 80068f6:	ab03      	add	r3, sp, #12
 80068f8:	4805      	ldr	r0, [pc, #20]	@ (8006910 <fiprintf+0x20>)
 80068fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80068fe:	6800      	ldr	r0, [r0, #0]
 8006900:	9301      	str	r3, [sp, #4]
 8006902:	f000 f837 	bl	8006974 <_vfiprintf_r>
 8006906:	b002      	add	sp, #8
 8006908:	f85d eb04 	ldr.w	lr, [sp], #4
 800690c:	b003      	add	sp, #12
 800690e:	4770      	bx	lr
 8006910:	20000194 	.word	0x20000194

08006914 <abort>:
 8006914:	b508      	push	{r3, lr}
 8006916:	2006      	movs	r0, #6
 8006918:	f000 fa84 	bl	8006e24 <raise>
 800691c:	2001      	movs	r0, #1
 800691e:	f7fb ff06 	bl	800272e <_exit>

08006922 <__sfputc_r>:
 8006922:	6893      	ldr	r3, [r2, #8]
 8006924:	3b01      	subs	r3, #1
 8006926:	2b00      	cmp	r3, #0
 8006928:	b410      	push	{r4}
 800692a:	6093      	str	r3, [r2, #8]
 800692c:	da08      	bge.n	8006940 <__sfputc_r+0x1e>
 800692e:	6994      	ldr	r4, [r2, #24]
 8006930:	42a3      	cmp	r3, r4
 8006932:	db01      	blt.n	8006938 <__sfputc_r+0x16>
 8006934:	290a      	cmp	r1, #10
 8006936:	d103      	bne.n	8006940 <__sfputc_r+0x1e>
 8006938:	f85d 4b04 	ldr.w	r4, [sp], #4
 800693c:	f000 b932 	b.w	8006ba4 <__swbuf_r>
 8006940:	6813      	ldr	r3, [r2, #0]
 8006942:	1c58      	adds	r0, r3, #1
 8006944:	6010      	str	r0, [r2, #0]
 8006946:	7019      	strb	r1, [r3, #0]
 8006948:	4608      	mov	r0, r1
 800694a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800694e:	4770      	bx	lr

08006950 <__sfputs_r>:
 8006950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006952:	4606      	mov	r6, r0
 8006954:	460f      	mov	r7, r1
 8006956:	4614      	mov	r4, r2
 8006958:	18d5      	adds	r5, r2, r3
 800695a:	42ac      	cmp	r4, r5
 800695c:	d101      	bne.n	8006962 <__sfputs_r+0x12>
 800695e:	2000      	movs	r0, #0
 8006960:	e007      	b.n	8006972 <__sfputs_r+0x22>
 8006962:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006966:	463a      	mov	r2, r7
 8006968:	4630      	mov	r0, r6
 800696a:	f7ff ffda 	bl	8006922 <__sfputc_r>
 800696e:	1c43      	adds	r3, r0, #1
 8006970:	d1f3      	bne.n	800695a <__sfputs_r+0xa>
 8006972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006974 <_vfiprintf_r>:
 8006974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006978:	460d      	mov	r5, r1
 800697a:	b09d      	sub	sp, #116	@ 0x74
 800697c:	4614      	mov	r4, r2
 800697e:	4698      	mov	r8, r3
 8006980:	4606      	mov	r6, r0
 8006982:	b118      	cbz	r0, 800698c <_vfiprintf_r+0x18>
 8006984:	6a03      	ldr	r3, [r0, #32]
 8006986:	b90b      	cbnz	r3, 800698c <_vfiprintf_r+0x18>
 8006988:	f7fd fdac 	bl	80044e4 <__sinit>
 800698c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800698e:	07d9      	lsls	r1, r3, #31
 8006990:	d405      	bmi.n	800699e <_vfiprintf_r+0x2a>
 8006992:	89ab      	ldrh	r3, [r5, #12]
 8006994:	059a      	lsls	r2, r3, #22
 8006996:	d402      	bmi.n	800699e <_vfiprintf_r+0x2a>
 8006998:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800699a:	f7fe fcc6 	bl	800532a <__retarget_lock_acquire_recursive>
 800699e:	89ab      	ldrh	r3, [r5, #12]
 80069a0:	071b      	lsls	r3, r3, #28
 80069a2:	d501      	bpl.n	80069a8 <_vfiprintf_r+0x34>
 80069a4:	692b      	ldr	r3, [r5, #16]
 80069a6:	b99b      	cbnz	r3, 80069d0 <_vfiprintf_r+0x5c>
 80069a8:	4629      	mov	r1, r5
 80069aa:	4630      	mov	r0, r6
 80069ac:	f000 f938 	bl	8006c20 <__swsetup_r>
 80069b0:	b170      	cbz	r0, 80069d0 <_vfiprintf_r+0x5c>
 80069b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069b4:	07dc      	lsls	r4, r3, #31
 80069b6:	d504      	bpl.n	80069c2 <_vfiprintf_r+0x4e>
 80069b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069bc:	b01d      	add	sp, #116	@ 0x74
 80069be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c2:	89ab      	ldrh	r3, [r5, #12]
 80069c4:	0598      	lsls	r0, r3, #22
 80069c6:	d4f7      	bmi.n	80069b8 <_vfiprintf_r+0x44>
 80069c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069ca:	f7fe fcaf 	bl	800532c <__retarget_lock_release_recursive>
 80069ce:	e7f3      	b.n	80069b8 <_vfiprintf_r+0x44>
 80069d0:	2300      	movs	r3, #0
 80069d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80069d4:	2320      	movs	r3, #32
 80069d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80069da:	f8cd 800c 	str.w	r8, [sp, #12]
 80069de:	2330      	movs	r3, #48	@ 0x30
 80069e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006b90 <_vfiprintf_r+0x21c>
 80069e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80069e8:	f04f 0901 	mov.w	r9, #1
 80069ec:	4623      	mov	r3, r4
 80069ee:	469a      	mov	sl, r3
 80069f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069f4:	b10a      	cbz	r2, 80069fa <_vfiprintf_r+0x86>
 80069f6:	2a25      	cmp	r2, #37	@ 0x25
 80069f8:	d1f9      	bne.n	80069ee <_vfiprintf_r+0x7a>
 80069fa:	ebba 0b04 	subs.w	fp, sl, r4
 80069fe:	d00b      	beq.n	8006a18 <_vfiprintf_r+0xa4>
 8006a00:	465b      	mov	r3, fp
 8006a02:	4622      	mov	r2, r4
 8006a04:	4629      	mov	r1, r5
 8006a06:	4630      	mov	r0, r6
 8006a08:	f7ff ffa2 	bl	8006950 <__sfputs_r>
 8006a0c:	3001      	adds	r0, #1
 8006a0e:	f000 80a7 	beq.w	8006b60 <_vfiprintf_r+0x1ec>
 8006a12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a14:	445a      	add	r2, fp
 8006a16:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a18:	f89a 3000 	ldrb.w	r3, [sl]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f000 809f 	beq.w	8006b60 <_vfiprintf_r+0x1ec>
 8006a22:	2300      	movs	r3, #0
 8006a24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a2c:	f10a 0a01 	add.w	sl, sl, #1
 8006a30:	9304      	str	r3, [sp, #16]
 8006a32:	9307      	str	r3, [sp, #28]
 8006a34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a38:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a3a:	4654      	mov	r4, sl
 8006a3c:	2205      	movs	r2, #5
 8006a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a42:	4853      	ldr	r0, [pc, #332]	@ (8006b90 <_vfiprintf_r+0x21c>)
 8006a44:	f7f9 fbfc 	bl	8000240 <memchr>
 8006a48:	9a04      	ldr	r2, [sp, #16]
 8006a4a:	b9d8      	cbnz	r0, 8006a84 <_vfiprintf_r+0x110>
 8006a4c:	06d1      	lsls	r1, r2, #27
 8006a4e:	bf44      	itt	mi
 8006a50:	2320      	movmi	r3, #32
 8006a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a56:	0713      	lsls	r3, r2, #28
 8006a58:	bf44      	itt	mi
 8006a5a:	232b      	movmi	r3, #43	@ 0x2b
 8006a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a60:	f89a 3000 	ldrb.w	r3, [sl]
 8006a64:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a66:	d015      	beq.n	8006a94 <_vfiprintf_r+0x120>
 8006a68:	9a07      	ldr	r2, [sp, #28]
 8006a6a:	4654      	mov	r4, sl
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	f04f 0c0a 	mov.w	ip, #10
 8006a72:	4621      	mov	r1, r4
 8006a74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a78:	3b30      	subs	r3, #48	@ 0x30
 8006a7a:	2b09      	cmp	r3, #9
 8006a7c:	d94b      	bls.n	8006b16 <_vfiprintf_r+0x1a2>
 8006a7e:	b1b0      	cbz	r0, 8006aae <_vfiprintf_r+0x13a>
 8006a80:	9207      	str	r2, [sp, #28]
 8006a82:	e014      	b.n	8006aae <_vfiprintf_r+0x13a>
 8006a84:	eba0 0308 	sub.w	r3, r0, r8
 8006a88:	fa09 f303 	lsl.w	r3, r9, r3
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	9304      	str	r3, [sp, #16]
 8006a90:	46a2      	mov	sl, r4
 8006a92:	e7d2      	b.n	8006a3a <_vfiprintf_r+0xc6>
 8006a94:	9b03      	ldr	r3, [sp, #12]
 8006a96:	1d19      	adds	r1, r3, #4
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	9103      	str	r1, [sp, #12]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	bfbb      	ittet	lt
 8006aa0:	425b      	neglt	r3, r3
 8006aa2:	f042 0202 	orrlt.w	r2, r2, #2
 8006aa6:	9307      	strge	r3, [sp, #28]
 8006aa8:	9307      	strlt	r3, [sp, #28]
 8006aaa:	bfb8      	it	lt
 8006aac:	9204      	strlt	r2, [sp, #16]
 8006aae:	7823      	ldrb	r3, [r4, #0]
 8006ab0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ab2:	d10a      	bne.n	8006aca <_vfiprintf_r+0x156>
 8006ab4:	7863      	ldrb	r3, [r4, #1]
 8006ab6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ab8:	d132      	bne.n	8006b20 <_vfiprintf_r+0x1ac>
 8006aba:	9b03      	ldr	r3, [sp, #12]
 8006abc:	1d1a      	adds	r2, r3, #4
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	9203      	str	r2, [sp, #12]
 8006ac2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ac6:	3402      	adds	r4, #2
 8006ac8:	9305      	str	r3, [sp, #20]
 8006aca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006ba0 <_vfiprintf_r+0x22c>
 8006ace:	7821      	ldrb	r1, [r4, #0]
 8006ad0:	2203      	movs	r2, #3
 8006ad2:	4650      	mov	r0, sl
 8006ad4:	f7f9 fbb4 	bl	8000240 <memchr>
 8006ad8:	b138      	cbz	r0, 8006aea <_vfiprintf_r+0x176>
 8006ada:	9b04      	ldr	r3, [sp, #16]
 8006adc:	eba0 000a 	sub.w	r0, r0, sl
 8006ae0:	2240      	movs	r2, #64	@ 0x40
 8006ae2:	4082      	lsls	r2, r0
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	3401      	adds	r4, #1
 8006ae8:	9304      	str	r3, [sp, #16]
 8006aea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aee:	4829      	ldr	r0, [pc, #164]	@ (8006b94 <_vfiprintf_r+0x220>)
 8006af0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006af4:	2206      	movs	r2, #6
 8006af6:	f7f9 fba3 	bl	8000240 <memchr>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	d03f      	beq.n	8006b7e <_vfiprintf_r+0x20a>
 8006afe:	4b26      	ldr	r3, [pc, #152]	@ (8006b98 <_vfiprintf_r+0x224>)
 8006b00:	bb1b      	cbnz	r3, 8006b4a <_vfiprintf_r+0x1d6>
 8006b02:	9b03      	ldr	r3, [sp, #12]
 8006b04:	3307      	adds	r3, #7
 8006b06:	f023 0307 	bic.w	r3, r3, #7
 8006b0a:	3308      	adds	r3, #8
 8006b0c:	9303      	str	r3, [sp, #12]
 8006b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b10:	443b      	add	r3, r7
 8006b12:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b14:	e76a      	b.n	80069ec <_vfiprintf_r+0x78>
 8006b16:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b1a:	460c      	mov	r4, r1
 8006b1c:	2001      	movs	r0, #1
 8006b1e:	e7a8      	b.n	8006a72 <_vfiprintf_r+0xfe>
 8006b20:	2300      	movs	r3, #0
 8006b22:	3401      	adds	r4, #1
 8006b24:	9305      	str	r3, [sp, #20]
 8006b26:	4619      	mov	r1, r3
 8006b28:	f04f 0c0a 	mov.w	ip, #10
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b32:	3a30      	subs	r2, #48	@ 0x30
 8006b34:	2a09      	cmp	r2, #9
 8006b36:	d903      	bls.n	8006b40 <_vfiprintf_r+0x1cc>
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d0c6      	beq.n	8006aca <_vfiprintf_r+0x156>
 8006b3c:	9105      	str	r1, [sp, #20]
 8006b3e:	e7c4      	b.n	8006aca <_vfiprintf_r+0x156>
 8006b40:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b44:	4604      	mov	r4, r0
 8006b46:	2301      	movs	r3, #1
 8006b48:	e7f0      	b.n	8006b2c <_vfiprintf_r+0x1b8>
 8006b4a:	ab03      	add	r3, sp, #12
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	462a      	mov	r2, r5
 8006b50:	4b12      	ldr	r3, [pc, #72]	@ (8006b9c <_vfiprintf_r+0x228>)
 8006b52:	a904      	add	r1, sp, #16
 8006b54:	4630      	mov	r0, r6
 8006b56:	f3af 8000 	nop.w
 8006b5a:	4607      	mov	r7, r0
 8006b5c:	1c78      	adds	r0, r7, #1
 8006b5e:	d1d6      	bne.n	8006b0e <_vfiprintf_r+0x19a>
 8006b60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b62:	07d9      	lsls	r1, r3, #31
 8006b64:	d405      	bmi.n	8006b72 <_vfiprintf_r+0x1fe>
 8006b66:	89ab      	ldrh	r3, [r5, #12]
 8006b68:	059a      	lsls	r2, r3, #22
 8006b6a:	d402      	bmi.n	8006b72 <_vfiprintf_r+0x1fe>
 8006b6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b6e:	f7fe fbdd 	bl	800532c <__retarget_lock_release_recursive>
 8006b72:	89ab      	ldrh	r3, [r5, #12]
 8006b74:	065b      	lsls	r3, r3, #25
 8006b76:	f53f af1f 	bmi.w	80069b8 <_vfiprintf_r+0x44>
 8006b7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b7c:	e71e      	b.n	80069bc <_vfiprintf_r+0x48>
 8006b7e:	ab03      	add	r3, sp, #12
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	462a      	mov	r2, r5
 8006b84:	4b05      	ldr	r3, [pc, #20]	@ (8006b9c <_vfiprintf_r+0x228>)
 8006b86:	a904      	add	r1, sp, #16
 8006b88:	4630      	mov	r0, r6
 8006b8a:	f7fe ffeb 	bl	8005b64 <_printf_i>
 8006b8e:	e7e4      	b.n	8006b5a <_vfiprintf_r+0x1e6>
 8006b90:	08007cdc 	.word	0x08007cdc
 8006b94:	08007ce6 	.word	0x08007ce6
 8006b98:	00000000 	.word	0x00000000
 8006b9c:	08006951 	.word	0x08006951
 8006ba0:	08007ce2 	.word	0x08007ce2

08006ba4 <__swbuf_r>:
 8006ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba6:	460e      	mov	r6, r1
 8006ba8:	4614      	mov	r4, r2
 8006baa:	4605      	mov	r5, r0
 8006bac:	b118      	cbz	r0, 8006bb6 <__swbuf_r+0x12>
 8006bae:	6a03      	ldr	r3, [r0, #32]
 8006bb0:	b90b      	cbnz	r3, 8006bb6 <__swbuf_r+0x12>
 8006bb2:	f7fd fc97 	bl	80044e4 <__sinit>
 8006bb6:	69a3      	ldr	r3, [r4, #24]
 8006bb8:	60a3      	str	r3, [r4, #8]
 8006bba:	89a3      	ldrh	r3, [r4, #12]
 8006bbc:	071a      	lsls	r2, r3, #28
 8006bbe:	d501      	bpl.n	8006bc4 <__swbuf_r+0x20>
 8006bc0:	6923      	ldr	r3, [r4, #16]
 8006bc2:	b943      	cbnz	r3, 8006bd6 <__swbuf_r+0x32>
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	f000 f82a 	bl	8006c20 <__swsetup_r>
 8006bcc:	b118      	cbz	r0, 8006bd6 <__swbuf_r+0x32>
 8006bce:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006bd2:	4638      	mov	r0, r7
 8006bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	6922      	ldr	r2, [r4, #16]
 8006bda:	1a98      	subs	r0, r3, r2
 8006bdc:	6963      	ldr	r3, [r4, #20]
 8006bde:	b2f6      	uxtb	r6, r6
 8006be0:	4283      	cmp	r3, r0
 8006be2:	4637      	mov	r7, r6
 8006be4:	dc05      	bgt.n	8006bf2 <__swbuf_r+0x4e>
 8006be6:	4621      	mov	r1, r4
 8006be8:	4628      	mov	r0, r5
 8006bea:	f7ff f95f 	bl	8005eac <_fflush_r>
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	d1ed      	bne.n	8006bce <__swbuf_r+0x2a>
 8006bf2:	68a3      	ldr	r3, [r4, #8]
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	60a3      	str	r3, [r4, #8]
 8006bf8:	6823      	ldr	r3, [r4, #0]
 8006bfa:	1c5a      	adds	r2, r3, #1
 8006bfc:	6022      	str	r2, [r4, #0]
 8006bfe:	701e      	strb	r6, [r3, #0]
 8006c00:	6962      	ldr	r2, [r4, #20]
 8006c02:	1c43      	adds	r3, r0, #1
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d004      	beq.n	8006c12 <__swbuf_r+0x6e>
 8006c08:	89a3      	ldrh	r3, [r4, #12]
 8006c0a:	07db      	lsls	r3, r3, #31
 8006c0c:	d5e1      	bpl.n	8006bd2 <__swbuf_r+0x2e>
 8006c0e:	2e0a      	cmp	r6, #10
 8006c10:	d1df      	bne.n	8006bd2 <__swbuf_r+0x2e>
 8006c12:	4621      	mov	r1, r4
 8006c14:	4628      	mov	r0, r5
 8006c16:	f7ff f949 	bl	8005eac <_fflush_r>
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	d0d9      	beq.n	8006bd2 <__swbuf_r+0x2e>
 8006c1e:	e7d6      	b.n	8006bce <__swbuf_r+0x2a>

08006c20 <__swsetup_r>:
 8006c20:	b538      	push	{r3, r4, r5, lr}
 8006c22:	4b29      	ldr	r3, [pc, #164]	@ (8006cc8 <__swsetup_r+0xa8>)
 8006c24:	4605      	mov	r5, r0
 8006c26:	6818      	ldr	r0, [r3, #0]
 8006c28:	460c      	mov	r4, r1
 8006c2a:	b118      	cbz	r0, 8006c34 <__swsetup_r+0x14>
 8006c2c:	6a03      	ldr	r3, [r0, #32]
 8006c2e:	b90b      	cbnz	r3, 8006c34 <__swsetup_r+0x14>
 8006c30:	f7fd fc58 	bl	80044e4 <__sinit>
 8006c34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c38:	0719      	lsls	r1, r3, #28
 8006c3a:	d422      	bmi.n	8006c82 <__swsetup_r+0x62>
 8006c3c:	06da      	lsls	r2, r3, #27
 8006c3e:	d407      	bmi.n	8006c50 <__swsetup_r+0x30>
 8006c40:	2209      	movs	r2, #9
 8006c42:	602a      	str	r2, [r5, #0]
 8006c44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c48:	81a3      	strh	r3, [r4, #12]
 8006c4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c4e:	e033      	b.n	8006cb8 <__swsetup_r+0x98>
 8006c50:	0758      	lsls	r0, r3, #29
 8006c52:	d512      	bpl.n	8006c7a <__swsetup_r+0x5a>
 8006c54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c56:	b141      	cbz	r1, 8006c6a <__swsetup_r+0x4a>
 8006c58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c5c:	4299      	cmp	r1, r3
 8006c5e:	d002      	beq.n	8006c66 <__swsetup_r+0x46>
 8006c60:	4628      	mov	r0, r5
 8006c62:	f7fe fb7d 	bl	8005360 <_free_r>
 8006c66:	2300      	movs	r3, #0
 8006c68:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c6a:	89a3      	ldrh	r3, [r4, #12]
 8006c6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006c70:	81a3      	strh	r3, [r4, #12]
 8006c72:	2300      	movs	r3, #0
 8006c74:	6063      	str	r3, [r4, #4]
 8006c76:	6923      	ldr	r3, [r4, #16]
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	89a3      	ldrh	r3, [r4, #12]
 8006c7c:	f043 0308 	orr.w	r3, r3, #8
 8006c80:	81a3      	strh	r3, [r4, #12]
 8006c82:	6923      	ldr	r3, [r4, #16]
 8006c84:	b94b      	cbnz	r3, 8006c9a <__swsetup_r+0x7a>
 8006c86:	89a3      	ldrh	r3, [r4, #12]
 8006c88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006c8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c90:	d003      	beq.n	8006c9a <__swsetup_r+0x7a>
 8006c92:	4621      	mov	r1, r4
 8006c94:	4628      	mov	r0, r5
 8006c96:	f000 f83f 	bl	8006d18 <__smakebuf_r>
 8006c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c9e:	f013 0201 	ands.w	r2, r3, #1
 8006ca2:	d00a      	beq.n	8006cba <__swsetup_r+0x9a>
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	60a2      	str	r2, [r4, #8]
 8006ca8:	6962      	ldr	r2, [r4, #20]
 8006caa:	4252      	negs	r2, r2
 8006cac:	61a2      	str	r2, [r4, #24]
 8006cae:	6922      	ldr	r2, [r4, #16]
 8006cb0:	b942      	cbnz	r2, 8006cc4 <__swsetup_r+0xa4>
 8006cb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006cb6:	d1c5      	bne.n	8006c44 <__swsetup_r+0x24>
 8006cb8:	bd38      	pop	{r3, r4, r5, pc}
 8006cba:	0799      	lsls	r1, r3, #30
 8006cbc:	bf58      	it	pl
 8006cbe:	6962      	ldrpl	r2, [r4, #20]
 8006cc0:	60a2      	str	r2, [r4, #8]
 8006cc2:	e7f4      	b.n	8006cae <__swsetup_r+0x8e>
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	e7f7      	b.n	8006cb8 <__swsetup_r+0x98>
 8006cc8:	20000194 	.word	0x20000194

08006ccc <__swhatbuf_r>:
 8006ccc:	b570      	push	{r4, r5, r6, lr}
 8006cce:	460c      	mov	r4, r1
 8006cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cd4:	2900      	cmp	r1, #0
 8006cd6:	b096      	sub	sp, #88	@ 0x58
 8006cd8:	4615      	mov	r5, r2
 8006cda:	461e      	mov	r6, r3
 8006cdc:	da0d      	bge.n	8006cfa <__swhatbuf_r+0x2e>
 8006cde:	89a3      	ldrh	r3, [r4, #12]
 8006ce0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006ce4:	f04f 0100 	mov.w	r1, #0
 8006ce8:	bf14      	ite	ne
 8006cea:	2340      	movne	r3, #64	@ 0x40
 8006cec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	6031      	str	r1, [r6, #0]
 8006cf4:	602b      	str	r3, [r5, #0]
 8006cf6:	b016      	add	sp, #88	@ 0x58
 8006cf8:	bd70      	pop	{r4, r5, r6, pc}
 8006cfa:	466a      	mov	r2, sp
 8006cfc:	f000 f848 	bl	8006d90 <_fstat_r>
 8006d00:	2800      	cmp	r0, #0
 8006d02:	dbec      	blt.n	8006cde <__swhatbuf_r+0x12>
 8006d04:	9901      	ldr	r1, [sp, #4]
 8006d06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006d0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006d0e:	4259      	negs	r1, r3
 8006d10:	4159      	adcs	r1, r3
 8006d12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d16:	e7eb      	b.n	8006cf0 <__swhatbuf_r+0x24>

08006d18 <__smakebuf_r>:
 8006d18:	898b      	ldrh	r3, [r1, #12]
 8006d1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d1c:	079d      	lsls	r5, r3, #30
 8006d1e:	4606      	mov	r6, r0
 8006d20:	460c      	mov	r4, r1
 8006d22:	d507      	bpl.n	8006d34 <__smakebuf_r+0x1c>
 8006d24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006d28:	6023      	str	r3, [r4, #0]
 8006d2a:	6123      	str	r3, [r4, #16]
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	6163      	str	r3, [r4, #20]
 8006d30:	b003      	add	sp, #12
 8006d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d34:	ab01      	add	r3, sp, #4
 8006d36:	466a      	mov	r2, sp
 8006d38:	f7ff ffc8 	bl	8006ccc <__swhatbuf_r>
 8006d3c:	9f00      	ldr	r7, [sp, #0]
 8006d3e:	4605      	mov	r5, r0
 8006d40:	4639      	mov	r1, r7
 8006d42:	4630      	mov	r0, r6
 8006d44:	f7fd fa6a 	bl	800421c <_malloc_r>
 8006d48:	b948      	cbnz	r0, 8006d5e <__smakebuf_r+0x46>
 8006d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d4e:	059a      	lsls	r2, r3, #22
 8006d50:	d4ee      	bmi.n	8006d30 <__smakebuf_r+0x18>
 8006d52:	f023 0303 	bic.w	r3, r3, #3
 8006d56:	f043 0302 	orr.w	r3, r3, #2
 8006d5a:	81a3      	strh	r3, [r4, #12]
 8006d5c:	e7e2      	b.n	8006d24 <__smakebuf_r+0xc>
 8006d5e:	89a3      	ldrh	r3, [r4, #12]
 8006d60:	6020      	str	r0, [r4, #0]
 8006d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d66:	81a3      	strh	r3, [r4, #12]
 8006d68:	9b01      	ldr	r3, [sp, #4]
 8006d6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006d6e:	b15b      	cbz	r3, 8006d88 <__smakebuf_r+0x70>
 8006d70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d74:	4630      	mov	r0, r6
 8006d76:	f000 f81d 	bl	8006db4 <_isatty_r>
 8006d7a:	b128      	cbz	r0, 8006d88 <__smakebuf_r+0x70>
 8006d7c:	89a3      	ldrh	r3, [r4, #12]
 8006d7e:	f023 0303 	bic.w	r3, r3, #3
 8006d82:	f043 0301 	orr.w	r3, r3, #1
 8006d86:	81a3      	strh	r3, [r4, #12]
 8006d88:	89a3      	ldrh	r3, [r4, #12]
 8006d8a:	431d      	orrs	r5, r3
 8006d8c:	81a5      	strh	r5, [r4, #12]
 8006d8e:	e7cf      	b.n	8006d30 <__smakebuf_r+0x18>

08006d90 <_fstat_r>:
 8006d90:	b538      	push	{r3, r4, r5, lr}
 8006d92:	4d07      	ldr	r5, [pc, #28]	@ (8006db0 <_fstat_r+0x20>)
 8006d94:	2300      	movs	r3, #0
 8006d96:	4604      	mov	r4, r0
 8006d98:	4608      	mov	r0, r1
 8006d9a:	4611      	mov	r1, r2
 8006d9c:	602b      	str	r3, [r5, #0]
 8006d9e:	f7fb fd16 	bl	80027ce <_fstat>
 8006da2:	1c43      	adds	r3, r0, #1
 8006da4:	d102      	bne.n	8006dac <_fstat_r+0x1c>
 8006da6:	682b      	ldr	r3, [r5, #0]
 8006da8:	b103      	cbz	r3, 8006dac <_fstat_r+0x1c>
 8006daa:	6023      	str	r3, [r4, #0]
 8006dac:	bd38      	pop	{r3, r4, r5, pc}
 8006dae:	bf00      	nop
 8006db0:	20005350 	.word	0x20005350

08006db4 <_isatty_r>:
 8006db4:	b538      	push	{r3, r4, r5, lr}
 8006db6:	4d06      	ldr	r5, [pc, #24]	@ (8006dd0 <_isatty_r+0x1c>)
 8006db8:	2300      	movs	r3, #0
 8006dba:	4604      	mov	r4, r0
 8006dbc:	4608      	mov	r0, r1
 8006dbe:	602b      	str	r3, [r5, #0]
 8006dc0:	f7fb fd15 	bl	80027ee <_isatty>
 8006dc4:	1c43      	adds	r3, r0, #1
 8006dc6:	d102      	bne.n	8006dce <_isatty_r+0x1a>
 8006dc8:	682b      	ldr	r3, [r5, #0]
 8006dca:	b103      	cbz	r3, 8006dce <_isatty_r+0x1a>
 8006dcc:	6023      	str	r3, [r4, #0]
 8006dce:	bd38      	pop	{r3, r4, r5, pc}
 8006dd0:	20005350 	.word	0x20005350

08006dd4 <_raise_r>:
 8006dd4:	291f      	cmp	r1, #31
 8006dd6:	b538      	push	{r3, r4, r5, lr}
 8006dd8:	4605      	mov	r5, r0
 8006dda:	460c      	mov	r4, r1
 8006ddc:	d904      	bls.n	8006de8 <_raise_r+0x14>
 8006dde:	2316      	movs	r3, #22
 8006de0:	6003      	str	r3, [r0, #0]
 8006de2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006de6:	bd38      	pop	{r3, r4, r5, pc}
 8006de8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006dea:	b112      	cbz	r2, 8006df2 <_raise_r+0x1e>
 8006dec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006df0:	b94b      	cbnz	r3, 8006e06 <_raise_r+0x32>
 8006df2:	4628      	mov	r0, r5
 8006df4:	f000 f830 	bl	8006e58 <_getpid_r>
 8006df8:	4622      	mov	r2, r4
 8006dfa:	4601      	mov	r1, r0
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e02:	f000 b817 	b.w	8006e34 <_kill_r>
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d00a      	beq.n	8006e20 <_raise_r+0x4c>
 8006e0a:	1c59      	adds	r1, r3, #1
 8006e0c:	d103      	bne.n	8006e16 <_raise_r+0x42>
 8006e0e:	2316      	movs	r3, #22
 8006e10:	6003      	str	r3, [r0, #0]
 8006e12:	2001      	movs	r0, #1
 8006e14:	e7e7      	b.n	8006de6 <_raise_r+0x12>
 8006e16:	2100      	movs	r1, #0
 8006e18:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	4798      	blx	r3
 8006e20:	2000      	movs	r0, #0
 8006e22:	e7e0      	b.n	8006de6 <_raise_r+0x12>

08006e24 <raise>:
 8006e24:	4b02      	ldr	r3, [pc, #8]	@ (8006e30 <raise+0xc>)
 8006e26:	4601      	mov	r1, r0
 8006e28:	6818      	ldr	r0, [r3, #0]
 8006e2a:	f7ff bfd3 	b.w	8006dd4 <_raise_r>
 8006e2e:	bf00      	nop
 8006e30:	20000194 	.word	0x20000194

08006e34 <_kill_r>:
 8006e34:	b538      	push	{r3, r4, r5, lr}
 8006e36:	4d07      	ldr	r5, [pc, #28]	@ (8006e54 <_kill_r+0x20>)
 8006e38:	2300      	movs	r3, #0
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	4608      	mov	r0, r1
 8006e3e:	4611      	mov	r1, r2
 8006e40:	602b      	str	r3, [r5, #0]
 8006e42:	f7fb fc64 	bl	800270e <_kill>
 8006e46:	1c43      	adds	r3, r0, #1
 8006e48:	d102      	bne.n	8006e50 <_kill_r+0x1c>
 8006e4a:	682b      	ldr	r3, [r5, #0]
 8006e4c:	b103      	cbz	r3, 8006e50 <_kill_r+0x1c>
 8006e4e:	6023      	str	r3, [r4, #0]
 8006e50:	bd38      	pop	{r3, r4, r5, pc}
 8006e52:	bf00      	nop
 8006e54:	20005350 	.word	0x20005350

08006e58 <_getpid_r>:
 8006e58:	f7fb bc51 	b.w	80026fe <_getpid>

08006e5c <_init>:
 8006e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e5e:	bf00      	nop
 8006e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e62:	bc08      	pop	{r3}
 8006e64:	469e      	mov	lr, r3
 8006e66:	4770      	bx	lr

08006e68 <_fini>:
 8006e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e6a:	bf00      	nop
 8006e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e6e:	bc08      	pop	{r3}
 8006e70:	469e      	mov	lr, r3
 8006e72:	4770      	bx	lr
